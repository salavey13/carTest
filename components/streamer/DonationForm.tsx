"use client";
import React, { useEffect, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useAppContext } from "@/contexts/AppContext";
import { useAppToast } from "@/hooks/useAppToast";
import { getSupabaseBrowserClient } from "@/lib/supabase-browser";
import MarketBox from "./MarketBox";

type Tier = {
  id: string;
  label: string;
  amount: number;
  description: string;
  badge?: string;
  highlight?: string;
  metadata?: Record<string, any>;
};

const TIERS: Tier[] = [
  { id: "tip", label: "–ß–∞–µ–≤—ã–µ", amount: 50, description: "–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", badge: "üíñ", highlight: "shadow-pink-glow", metadata: { kind: "tip" } },
  { id: "supporter", label: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", amount: 150, description: "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å + –∏–º—è –≤ —Å–ø–∏—Å–∫–µ", badge: "üëè", highlight: "shadow-blue-glow", metadata: { kind: "support" } },
  { id: "vip", label: "VIP", amount: 300, description: "VIP-—Ä–æ–ª—å –≤ —á–∞—Ç–µ + –≥—Ä–æ–º–∫–æ–µ —Å–ø–∞—Å–∏–±–æ", badge: "‚≠ê", highlight: "shadow-purple-glow", metadata: { kind: "vip", vipDays: 7 } },
  { id: "sauna", label: "–°–∞—É–Ω–∞ –ü–∞–∫", amount: 500, description: "–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ –∏ —à–ª—ë–ø–∞–Ω—Ü—ã + —Å—Ç–∏–∫–µ—Ä", badge: "üßñ", highlight: "shadow-yellow-glow", metadata: { kind: "market", sku: "sauna_pack" } },
];

export default function DonationForm({ streamerId }: { streamerId: string }) {
  const { dbUser } = useAppContext();
  const payerUserId = dbUser?.user_id ?? null;
  const supabase = getSupabaseBrowserClient();
  const toast = useAppToast();
  const [amount, setAmount] = useState<number>(TIERS[0].amount);
  const [selectedTier, setSelectedTier] = useState<Tier>(TIERS[0]);
  const [note, setNote] = useState("");
  const [loading, setLoading] = useState(false);
  const [invoice, setInvoice] = useState<any | null>(null);
  const [paid, setPaid] = useState(false);
  const chanRef = useRef<any>(null);

  useEffect(() => {
    setSelectedTier(TIERS.find((t) => t.amount === amount) ?? TIERS[0]);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [amount]);

  async function handleDonate(e: React.FormEvent) {
    e.preventDefault();
    if (!payerUserId) {
      toast.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (Telegram).");
      return;
    }
    if (!streamerId) {
      toast.error("–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å.");
      return;
    }
    if (!amount || amount <= 0) {
      toast.error("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É > 0");
      return;
    }
    if (loading) return;
    setLoading(true);

    const metadata = { ...selectedTier.metadata, note, tierId: selectedTier.id, tierLabel: selectedTier.label };

    try {
      const res = await fetch("/api/streamer/create-invoice", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-user-id": payerUserId,
        },
        body: JSON.stringify({ streamerId, amount, metadata }),
      }).then((r) => r.json());

      if (!res?.success) {
        toast.error(res?.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞");
      } else {
        setInvoice(res.invoice);
        toast.success("–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–ª–∞—Ç—ë–∂ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π.");
        watchInvoicePaid(res.invoice.id);
      }
    } catch (err: any) {
      toast.error(err?.message || "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    } finally {
      setLoading(false);
    }
  }

  // Listen for invoice -> paid
  function watchInvoicePaid(invoiceId: string) {
    if (!invoiceId || !supabase) return;
    try {
      const chan = supabase.channel(`public:invoices:watch-${invoiceId}`);
      chan.on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "invoices", filter: `id=eq.${invoiceId}` },
        (payload: any) => {
          const rec = payload?.new;
          if (!rec) return;
          if (String(rec.status) === "paid") {
            setPaid(true);
            toast.success(`–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω: +${rec.amount} XTR ‚Äî ${selectedTier.label}`);
            try { if (typeof chan.unsubscribe === "function") chan.unsubscribe(); } catch {}
          }
        }
      );
      chan.subscribe();
      chanRef.current = chan;
    } catch (e) {
      console.warn("[DonationForm] realtime invoice watch failed", e);
    }
  }

  useEffect(() => {
    return () => {
      try {
        if (chanRef.current && typeof chanRef.current.unsubscribe === "function") chanRef.current.unsubscribe();
      } catch {}
    };
  }, []);

  function copyInvoiceLink() {
    if (!invoice) return;
    const appLink = (globalThis as any).NEXT_PUBLIC_TELEGRAM_BOT_LINK || process.env.NEXT_PUBLIC_TELEGRAM_BOT_LINK;
    const link = appLink ? `${appLink}?start=pay_inv_${invoice.id}` : `invoice:${invoice.id}`;
    navigator.clipboard?.writeText(link).then(() => toast.success("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")).catch(() => toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"));
  }

  function openInTelegram() {
    const appLink = (globalThis as any).NEXT_PUBLIC_TELEGRAM_BOT_LINK || process.env.NEXT_PUBLIC_TELEGRAM_BOT_LINK;
    if (!appLink || !invoice) { toast.error("–ì–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return; }
    const link = `${appLink}?start=pay_inv_${invoice.id}`;
    window.open(link, "_blank");
  }

  function onPickMarketItem(item: any) {
    if (item.id === "sauna_pack") {
      const saunaTier = TIERS.find((t) => t.id === "sauna");
      if (saunaTier) {
        setSelectedTier(saunaTier);
        setAmount(saunaTier.amount);
        toast.success(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${saunaTier.label}. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å¬ª —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å.`);
      }
    } else {
      setAmount(item.price);
      toast.success(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${item.title}. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å¬ª.`);
    }
  }

  // background image (dark vibe)
  const bgUrl = "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=1600&q=60";

  return (
    <>
      <form
        onSubmit={handleDonate}
        className="space-y-3 p-3 rounded-md border border-border relative overflow-hidden"
        aria-live="polite"
        style={{
          backgroundImage: `linear-gradient(180deg, rgba(6,6,10,0.6) 0%, rgba(20,22,29,0.7) 40%, rgba(10,10,14,0.85) 100%), url('${bgUrl}')`,
          backgroundBlendMode: "overlay",
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent pointer-events-none" />

        <div className="relative z-10">
          <div className="flex items-center justify-between">
            <div className="text-sm text-muted-foreground">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å</div>
            <div className="text-xs text-muted-foreground whitespace-nowrap">–í—ã–±—Ä–∞–Ω: <span className="font-semibold ml-1">{selectedTier.label} ‚Ä¢ {amount}‚òÖ</span></div>
          </div>

          {/* Tiers grid */}
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 mt-2">
            {TIERS.map((t) => (
              <button
                key={t.id}
                type="button"
                aria-pressed={selectedTier.id === t.id}
                onClick={() => { setSelectedTier(t); setAmount(t.amount); }}
                className={`p-2 rounded-md text-sm flex flex-col items-start justify-between border transition-shadow duration-200 min-h-[64px] ${selectedTier.id === t.id ? `border-primary bg-primary/10 ${t.highlight}` : "bg-card border-border"}`}
              >
                <div className="flex items-center gap-2 w-full">
                  <div className="text-lg">{t.badge ?? "‚òÖ"}</div>
                  <div className="flex-1 text-left min-w-0">
                    <div className="font-medium text-sm truncate">{t.label}</div>
                    <div className="text-xs text-muted-foreground truncate">{t.description}</div>
                  </div>
                  <div className="font-semibold">{t.amount}‚òÖ</div>
                </div>
              </button>
            ))}
          </div>

          <div className="flex gap-2 mt-2 flex-wrap">
            <Input
              aria-label="–°—É–º–º–∞ XTR"
              type="number"
              min={1}
              value={amount}
              onChange={(e) => setAmount(Number(e.target.value) || 0)}
              className="flex-1 input-cyber min-w-0"
            />
            <Button
              type="submit"
              className="whitespace-nowrap shrink-0"
              disabled={loading || !!invoice}
            >
              {loading ? "–°–æ–∑–¥–∞—ë–º..." : invoice ? "–ò–Ω–≤–æ–π—Å –≥–æ—Ç–æ–≤" : "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"}
            </Button>
          </div>

          <div className="mt-2">
            <Input
              placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              value={note}
              onChange={(e) => setNote(e.target.value)}
              className="input-cyber mt-0"
              aria-label="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç—É"
            />
          </div>

          <div className="flex flex-col sm:flex-row sm:items-center items-stretch justify-between gap-3 mt-3">
            <div className="text-xs text-muted-foreground">–°—Ä–µ–¥—Å—Ç–≤–∞ ‚Äî XTR. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</div>

            {invoice ? (
              <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 w-full sm:w-auto">
                <button
                  type="button"
                  onClick={copyInvoiceLink}
                  className="px-3 py-1 rounded-md border border-border text-sm w-full sm:w-auto text-left sm:text-center"
                >
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                </button>
                <button
                  type="button"
                  onClick={openInTelegram}
                  className="px-3 py-1 rounded-md border border-border text-sm w-full sm:w-auto text-left sm:text-center"
                >
                  –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                </button>
                <div className="text-xs text-muted-foreground w-full sm:w-auto text-left sm:text-right">
                  {paid ? <span className="text-primary font-semibold">‚úÖ –û–ø–ª–∞—á–µ–Ω</span> : <span>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</span>}
                </div>
              </div>
            ) : (
              <div className="text-xs text-muted-foreground mt-1 sm:mt-0">–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–≤–æ–π—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.</div>
            )}
          </div>
        </div>
      </form>

      <div className="mt-3 relative z-10">
        <MarketBox onPick={onPickMarketItem} />
      </div>
    </>
  );
}