"use client";
import { useState, useEffect } from "react";
import { executeCozeAgent, sendTelegramDocument, createGitHubPullRequest, getOpenPullRequests, approvePullRequest } from "@/app/actions_github/actions";
import { supabaseAdmin } from "@/hooks/supabase";
import { useTelegram } from "@/hooks/useTelegram";
import { saveAs } from "file-saver";
import { Light as SyntaxHighlighter } from "react-syntax-highlighter";
import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";
import { FaInfoCircle, FaTelegramPlane } from "react-icons/fa";

interface FileEntry {
  path: string;
  content: string;
  extension: string;
}

interface CozeResponse {
  id: string;
  bot_id: string;
  user_id: string;
  content: string;
  response: any;
  metadata: any;
  created_at: string;
}

// Simple Tooltip Component
const Tooltip = ({ children, text }: { children: React.ReactNode; text: string }) => {
  const [isVisible, setIsVisible] = useState(false);
  return (
    <div className="relative inline-block">
      <div
        onMouseEnter={() => setIsVisible(true)}
        onMouseLeave={() => setIsVisible(false)}
      >
        {children}
      </div>
      {isVisible && (
        <div className="absolute z-10 p-2 bg-gray-700 text-white text-xs rounded shadow-lg max-w-xs -mt-2 ml-4 whitespace-pre-line">
          {text}
        </div>
      )}
    </div>
  );
};

export default function CozeExecutor({
  botId = "7483269209293275191",
  userId = "341503612082",
}: {
  botId?: string;
  userId?: string;
}) {
  const [response, setResponse] = useState<string>("");
  const [content, setContent] = useState<string>("Generate code components");
  const [files, setFiles] = useState<FileEntry[]>([]);
  const [savedFiles, setSavedFiles] = useState<FileEntry[]>([]);
  const [cozeResponses, setCozeResponses] = useState<CozeResponse[]>([]);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const { user, openLink } = useTelegram();

  // PR-related state
  const [repoUrl, setRepoUrl] = useState<string>("");
  const [prTitle, setPrTitle] = useState<string>("Update from CozeExecutor");
  const [prDescription, setPrDescription] = useState<string>("Auto-generated by CozeExecutor - fuck yeah!");
  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());
  const [openPRs, setOpenPRs] = useState<any[]>([]);

  // Load initial data from Supabase
  useEffect(() => {
    const loadData = async () => {
      if (!user) return;
      try {
        setError("");
        const { data: userData, error: userError } = await supabaseAdmin
          .from("users")
          .select("metadata")
          .eq("user_id", user.id)
          .single();
        if (userError) throw userError;
        if (userData?.metadata?.generated_files) {
          const parsedSavedFiles = Array.isArray(userData.metadata.generated_files)
            ? userData.metadata.generated_files.map((f: any) => ({
                path: f.path,
                content: f.code,
                extension: f.extension,
              }))
            : [];
          setSavedFiles(parsedSavedFiles);
        }

        const { data: responses, error: responsesError } = await supabaseAdmin
          .from("coze_responses")
          .select("*")
          .eq("user_id", user.id)
          .order("created_at", { ascending: false });
        if (responsesError) throw responsesError;
        setCozeResponses(responses || []);
      } catch (err) {
        setError("Не удалось загрузить данные: " + (err as Error).message);
      }
    };
    if (user) loadData();
  }, [user]);

  // Parse JSON response into file entries
  const parseFilesFromJson = (json: any): FileEntry[] => {
    const entries: FileEntry[] = [];
    try {
      json.new_components?.forEach((c: any) => {
        const match = c.code.match(/\/\/ File: (.+)\n/);
        if (match) {
          entries.push({
            path: match[1],
            content: c.code,
            extension: match[1].split(".").pop() || "tsx",
          });
        }
      });

      json.new_pages?.forEach((p: any) => {
        entries.push({
          path: p.route,
          content: p.code,
          extension: p.route.split(".").pop() || "tsx",
        });
      });

      if (json.new_actions && json.new_actions.length > 0) {
        const firstActionName = json.new_actions[0].name;
        const subfolderPrefix = firstActionName.match(/^[a-z]+/)?.[0] || "misc";
        const subfolder = `actions_${subfolderPrefix}`;
        const actionsContent = json.new_actions
          .map((a: any) => `export async function ${a.name}(${a.params || ""}) {\n${a.code}\n}`)
          .join("\n\n");
        entries.push({
          path: `app/${subfolder}/actions.ts`,
          content: actionsContent,
          extension: "ts",
        });
      }

      json.supabase_migrations?.forEach((m: any) => {
        entries.push({
          path: `supabase/migrations/${m.name}.sql`,
          content: m.sql,
          extension: "sql",
        });
      });
    } catch (err) {
      setError("Ошибка парсинга JSON: " + (err as Error).message);
    }
    return entries;
  };

  // Parse files from text
  const parseFilesFromText = (text: string): FileEntry[] => {
    const entries: FileEntry[] = [];
    const supportedLanguages = ["typescript", "tsx", "ts", "sql"];
    try {
      const codeBlocks = text.match(/```[\s\S]*?```/g) || [];
      codeBlocks.forEach((block) => {
        const content = block.slice(3, -3).trim();
        const lines = content.split("\n");
        const firstLine = lines[0].trim();

        let language = supportedLanguages.find((lang) => firstLine === lang);
        let codeStartIndex = language ? 1 : 0;
        let defaultPath = "unnamed";

        if (!language && firstLine.match(/^[a-zA-Z0-9_-]+\.(tsx|ts|sql|typescript)$/)) {
          defaultPath = firstLine;
          codeStartIndex = 1;
          language = firstLine.split(".").pop() || "text";
        } else if (!language) {
          language = "text";
        }

        const codeContent = lines.slice(codeStartIndex).join("\n");
        const fileMatch = codeContent.match(/(?:\/\/|--)\s*File:\s*(.+)/i);
        const path = fileMatch ? fileMatch[1].trim() : defaultPath;
        const extension = path.split(".").pop() || (language === "sql" ? "sql" : "txt");

        entries.push({ path, content: codeContent, extension });
      });
    } catch (err) {
      setError("Ошибка парсинга текста: " + (err as Error).message);
    }
    return entries;
  };

  // Execute Coze agent
  const handleExecute = async () => {
    setLoading(true);
    setError("");
    setFiles([]);
    try {
      const result = await executeCozeAgent(botId, userId, content, { operation: "code_generation" });
      if (result.success) {
        setResponse(JSON.stringify(result.data, null, 2));
        setFiles(parseFilesFromJson(result.data));
        if (user) {
          const { data: responses } = await supabaseAdmin
            .from("coze_responses")
            .select("*")
            .eq("user_id", user.id)
            .order("created_at", { ascending: false });
          setCozeResponses(responses || []);
        }
      } else {
        setError(result.error);
      }
    } catch (err) {
      setError("Ошибка выполнения: " + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // Handle manual parsing
  const handleParse = () => {
    setError("");
    setFiles([]);
    const parsedFiles = parseFilesFromText(response);
    setFiles(parsedFiles);
    if (parsedFiles.length === 0) {
      setError("Файлы в ответе не найдены");
    }
  };

  // Save all files to Supabase
  const handleSaveFiles = async () => {
    if (!user || files.length === 0) return;
    setLoading(true);
    try {
      const fileData = files.map((file) => ({
        path: file.path,
        code: file.content,
        extension: file.extension,
      }));

      const { data: existingData } = await supabaseAdmin
        .from("users")
        .select("metadata")
        .eq("user_id", user.id)
        .single();

      const existingFiles = existingData?.metadata?.generated_files || [];
      const updatedFiles = [
        ...existingFiles.filter((f: any) => !fileData.some((newFile) => newFile.path === f.path)),
        ...fileData,
      ];

      await supabaseAdmin
        .from("users")
        .upsert(
          { user_id: user.id, metadata: { ...existingData?.metadata, generated_files: updatedFiles } },
          { onConflict: "user_id" }
        );

      setSavedFiles(updatedFiles.map((f: any) => ({
        path: f.path,
        content: f.code,
        extension: f.extension,
      })));
      setError("Файлы успешно сохранены!");
    } catch (err) {
      setError("Ошибка сохранения файлов: " + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // Download files as ZIP
  const handleDownload = async () => {
    const JSZip = (await import("jszip")).default;
    const zip = new JSZip();
    files.forEach((file) => zip.file(file.path, file.content));
    const blob = await zip.generateAsync({ type: "blob" });
    saveAs(blob, "coze_files.zip");
  };

  // Send file to Telegram
  const downloadFile = async (file: FileEntry) => {
    if (!user) {
      setError("Пользователь Telegram не найден");
      return;
    }
    setLoading(true);
    try {
      const result = await sendTelegramDocument(user.id, file.content, file.path.split("/").pop() || "file");
      if (!result.success) throw new Error(result.error);
      setError(`Файл "${file.path}" отправлен в ваш чат Telegram!`);
    } catch (err) {
      setError(`Ошибка отправки файла "${file.path}" в Telegram: ` + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // Create GitHub PR
  const handleCreatePR = async () => {
    if (!repoUrl || !selectedFiles.size) {
      setError("Укажите URL репозитория и выберите файлы");
      return;
    }
    setLoading(true);
    try {
      const filesToCommit = files.filter((file) => selectedFiles.has(file.path));
      const result = await createGitHubPullRequest(repoUrl, filesToCommit, prTitle, prDescription);
      if (result.success) {
        setError(`PR создан: ${result.prUrl}`);
        handleGetOpenPRs();
      } else {
        setError("Ошибка создания PR: " + result.error);
      }
    } catch (err) {
      setError("Ошибка создания PR: " + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // Fetch open PRs
  const handleGetOpenPRs = async () => {
    if (!repoUrl) {
      setError("Укажите URL репозитория");
      return;
    }
    setLoading(true);
    try {
      const result = await getOpenPullRequests(repoUrl);
      if (result.success) {
        setOpenPRs(result.pullRequests);
      } else {
        setError("Ошибка загрузки PR: " + result.error);
      }
    } catch (err) {
      setError("Ошибка загрузки PR: " + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // Approve PR
  const handleApprovePR = async (pullNumber: number) => {
    if (!repoUrl) {
      setError("Укажите URL репозитория");
      return;
    }
    setLoading(true);
    try {
      const result = await approvePullRequest(repoUrl, pullNumber);
      if (result.success) {
        setError(`PR #${pullNumber} одобрен`);
        handleGetOpenPRs();
      } else {
        setError("Ошибка одобрения: " + result.error);
      }
    } catch (err) {
      setError("Ошибка одобрения: " + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // Toggle file selection for PR
  const toggleFileSelection = (path: string) => {
    const newSelected = new Set(selectedFiles);
    if (newSelected.has(path)) newSelected.delete(path);
    else newSelected.add(path);
    setSelectedFiles(newSelected);
  };

  // Select all files for PR
  const handleSelectAllFiles = () => {
    const allFilePaths = new Set(files.map((file) => file.path));
    setSelectedFiles(allFilePaths);
  };

  // Render response with syntax highlighting
  const renderResponse = (text: string) => {
    if (!text) return null;
    const parts = text.split(/(```[\s\S]*?```)/g);
    return parts.map((part, index) => {
      if (part.startsWith("```") && part.endsWith("```")) {
        const code = part.slice(3, -3).trim();
        const firstLine = code.split("\n")[0].trim();
        const languageMatch = ["typescript", "tsx", "ts", "sql"].includes(firstLine);
        const language = languageMatch ? firstLine : "text";
        const codeContent = languageMatch ? code.split("\n").slice(1).join("\n") : code;
        return (
          <SyntaxHighlighter key={index} language={language} style={docco}>
            {codeContent}
          </SyntaxHighlighter>
        );
      }
      return <span key={index}>{part}</span>;
    });
  };

  return (
    <div className="p-2 sm:p-4 bg-gray-900 text-white text-xs sm:text-sm">
      <div className="flex items-center gap-2">
        <h1 className="text-2xl font-bold mb-4">Coze Executor</h1>
        <Tooltip
          text={`Как стать PROграммером с нуля:\n1) Используйте @oneSitePlsBot (или @webanybot с подпиской) для анализа задач с Kwork — сравните с моим шаблоном веб-приложения.\n2) Скопируйте описание задачи и анализ, вставьте сюда или в Grok (откройте: https://xAI.com/grok через Telegram 'openLink'). Прикрепите файлы из репо.\n3) Нажмите "Parse Files" для извлечения действий, страниц, компонентов и миграций.\n4) Создайте PR через "Create PR" и одобрите его в списке.\n5) Готово — вы PRO!`}
        >
          <FaInfoCircle className="text-blue-500 cursor-pointer" />
        </Tooltip>
      </div>

      {/* Input for Coze Agent */}
      <div className="mb-4">
        <label className="block mb-2">Запрос для Coze Agent</label>
        <textarea
          className="w-full h-24 p-2 bg-gray-800 text-white rounded"
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Введите запрос для Coze агента"
        />
      </div>

      {/* Response Textarea */}
      <div className="mb-4">
        <h2 className="text-xl font-semibold mb-2">Ответ</h2>
        <textarea
          className="w-full h-64 p-2 bg-gray-800 text-white rounded overflow-auto"
          value={response}
          onChange={(e) => setResponse(e.target.value)}
          placeholder="Вставьте или отредактируйте ответ здесь..."
        />
      </div>

      {/* Buttons */}
      <div className="mb-4 flex gap-2 flex-wrap">
        <button
          className="bg-blue-500 p-2 rounded flex-1 sm:flex-none hover:bg-blue-600 disabled:bg-gray-400"
          onClick={handleExecute}
          disabled={loading}
        >
          {loading ? "Выполняется..." : "Запустить Агент"}
        </button>
        <button
          className="bg-yellow-500 p-2 rounded flex-1 sm:flex-none hover:bg-yellow-600 disabled:bg-gray-400"
          onClick={handleParse}
          disabled={loading || !response}
        >
          Парсить Файлы
        </button>
        <button
          className="bg-green-500 p-2 rounded flex-1 sm:flex-none hover:bg-green-600 disabled:bg-gray-400"
          onClick={handleSaveFiles}
          disabled={loading || files.length === 0}
        >
          Сохранить Все Файлы
        </button>
        <button
          className="bg-purple-500 p-2 rounded flex-1 sm:flex-none hover:bg-purple-600 disabled:bg-gray-400"
          onClick={handleDownload}
          disabled={loading || files.length === 0}
        >
          Скачать ZIP
        </button>
        <button
          className="bg-cyan-500 p-2 rounded flex-1 sm:flex-none hover:bg-cyan-600"
          onClick={() => openLink("https://xAI.com/grok")}
        >
          Открыть Grok
        </button>
        <button
          className="bg-gray-500 p-2 rounded flex-1 sm:flex-none hover:bg-gray-600"
          onClick={() => {
            setResponse("");
            setContent("");
            setFiles([]);
            setSelectedFiles(new Set());
          }}
        >
          Очистить
        </button>
      </div>

      {/* Generated Files */}
      {files.length > 0 && (
        <div className="mb-4">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold mb-2">Сгенерированные Файлы</h2>
            <button
              className="bg-indigo-500 p-1 rounded hover:bg-indigo-600 disabled:bg-gray-400"
              onClick={handleSelectAllFiles}
              disabled={loading || files.length === 0}
            >
              Добавить Все в PR
            </button>
          </div>
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {files.map((file) => (
              <div key={file.path} className="bg-gray-800 p-2 rounded flex justify-between items-center">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={selectedFiles.has(file.path)}
                    onChange={() => toggleFileSelection(file.path)}
                  />
                  <span className="truncate">{file.path}</span>
                </label>
                <button
                  className="bg-purple-500 p-1 rounded hover:bg-purple-600 disabled:bg-gray-400"
                  onClick={() => downloadFile(file)}
                  disabled={loading}
                >
                  <FaTelegramPlane />
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* GitHub PR Section */}
      <div className="mb-4">
        <h2 className="text-xl font-semibold mb-2">Создать GitHub PR</h2>
        <input
          className="w-full p-2 mb-2 bg-gray-800 text-white rounded"
          value={repoUrl}
          onChange={(e) => setRepoUrl(e.target.value)}
          placeholder="URL репозитория GitHub (например, https://github.com/user/repo)"
        />
        <input
          className="w-full p-2 mb-2 bg-gray-800 text-white rounded"
          value={prTitle}
          onChange={(e) => setPrTitle(e.target.value)}
          placeholder="Заголовок PR"
        />
        <textarea
          className="w-full p-2 mb-2 bg-gray-800 text-white rounded"
          value={prDescription}
          onChange={(e) => setPrDescription(e.target.value)}
          placeholder="Описание PR"
          rows={3}
        />
        <div className="flex gap-2">
          <button
            className="bg-blue-500 p-2 rounded hover:bg-blue-600 disabled:bg-gray-400"
            onClick={handleCreatePR}
            disabled={loading}
          >
            Создать PR
          </button>
          <button
            className="bg-gray-500 p-2 rounded hover:bg-gray-600 disabled:bg-gray-400"
            onClick={handleGetOpenPRs}
            disabled={loading}
          >
            Показать открытые PR
          </button>
        </div>
      </div>

      {/* Open PRs */}
      {openPRs.length > 0 && (
        <div className="mb-4">
          <h2 className="text-xl font-semibold mb-2">Открытые Pull Requests</h2>
          <ul className="list-disc pl-5">
            {openPRs.map((pr) => (
              <li key={pr.number} className="flex items-center gap-2">
                <a href={pr.html_url} target="_blank" rel="noopener noreferrer" className="text-blue-500">
                  #{pr.number}: {pr.title}
                </a>
                <button
                  className="bg-green-500 p-1 rounded hover:bg-green-600 disabled:bg-gray-400"
                  onClick={() => handleApprovePR(pr.number)}
                  disabled={loading}
                >
                  Одобрить
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Error/Success Display */}
      {error && (
        <div
          className={`mb-4 ${error.includes("успешно") ? "text-green-500" : "text-red-500"}`}
        >
          {error}
        </div>
      )}

      {/* Previous Responses */}
      {cozeResponses.length > 0 && (
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-2">Предыдущие Ответы</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead>
                <tr className="bg-gray-800">
                  <th className="p-2">ID</th>
                  <th className="p-2">Bot ID</th>
                  <th className="p-2">Контент</th>
                  <th className="p-2">Ответ</th>
                  <th className="p-2">Дата</th>
                </tr>
              </thead>
              <tbody>
                {cozeResponses.map((resp) => (
                  <tr key={resp.id} className="border-b border-gray-700">
                    <td className="p-2">{resp.id.slice(0, 8)}...</td>
                    <td className="p-2">{resp.bot_id}</td>
                    <td className="p-2">{resp.content.slice(0, 30)}...</td>
                    <td className="p-2">{typeof resp.response === "string" ? resp.response.slice(0, 30) : "JSON"}...</td>
                    <td className="p-2">{new Date(resp.created_at).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Saved Files */}
      {savedFiles.length > 0 && (
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-2">Сохраненные Файлы</h2>
          <div className="space-y-2">
            {savedFiles.map((file) => (
              <div key={file.path} className="bg-gray-700 p-2 rounded flex justify-between items-center">
                <span className="truncate">{file.path}</span>
                <button
                  className="bg-purple-500 p-1 rounded hover:bg-purple-600 disabled:bg-gray-400"
                  onClick={() => downloadFile(file)}
                  disabled={loading}
                >
                  <FaTelegramPlane />
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
