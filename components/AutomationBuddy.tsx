"use client";

import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "sonner"; // Assuming sonner is available
import {
    FaStar, FaArrowRight, FaWandMagicSparkles, FaHighlighter, FaGithub,
    FaDownload, FaCode, FaBrain, FaRocket, FaEye, FaCircleInfo, FaKeyboard,
    FaCopy, FaListCheck, FaBug, FaSync, FaPlus, FaPaperPlane, FaBroom, FaCheck,
    FaRobot, FaArrowRotateRight, FaArrowsRotate, FaAngrycreative, FaPoo,
    FaList, FaCodeBranch, FaExclamation // Added FaCodeBranch and FaExclamation
} from "react-icons/fa6";

// Import Subcomponents
import { FloatingActionButton } from "@/components/stickyChat_components/FloatingActionButton";
import { SpeechBubble } from "@/components/stickyChat_components/SpeechBubble";
import { CharacterDisplay } from "@/components/stickyChat_components/CharacterDisplay";
import { SuggestionList } from "@/components/stickyChat_components/SuggestionList";

// Context Import
import { useRepoXmlPageContext, FetchStatus, WorkflowStep } from "@/contexts/RepoXmlPageContext";

// --- Constants & Types ---
const AUTO_OPEN_DELAY_MS_BUDDY = 4000; // Slightly faster auto-open
const BUDDY_IMAGE_URL = "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/character-images/public/x13.png";
const BUDDY_ALT_TEXT = "Automation Buddy";

interface Suggestion {
    id: string;
    text: string;
    action?: () => void | Promise<void>;
    icon?: React.ReactNode;
    disabled?: boolean;
    tooltip?: string;
}

// --- Animation Variants ---
const containerVariants = { hidden: { opacity: 0, x: 300 }, visible: { opacity: 1, x: 0, transition: { type: "spring", stiffness: 120, damping: 15, when: "beforeChildren", staggerChildren: 0.08, }, }, exit: { opacity: 0, x: 300, transition: { duration: 0.3 } }, };
const childVariants = { hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0, transition: { type: "spring", bounce: 0.4 } }, exit: { opacity: 0, transition: { duration: 0.2 } }, };
const fabVariants = { hidden: { scale: 0, opacity: 0 }, visible: { scale: 1, opacity: 1, rotate: [0, -15, 10, 0], transition: { scale: { duration: 0.4, ease: "easeOut" }, opacity: { duration: 0.4, ease: "easeOut" }, rotate: { repeat: Infinity, duration: 1.8, ease: "easeInOut", delay: 0.8 } } }, exit: { scale: 0, opacity: 0, transition: { duration: 0.3 } } };
const notificationVariants = { hidden: { scale: 0, opacity: 0 }, visible: { scale: 1, opacity: 1, transition: { type: "spring", stiffness: 500, damping: 30 } }, exit: { scale: 0, opacity: 0 } };


// --- Main Component ---
const AutomationBuddy: React.FC = () => {
    // --- State ---
    const [isOpen, setIsOpen] = useState(false);
    const [hasAutoOpened, setHasAutoOpened] = useState(false);
    const [hasNewSuggestions, setHasNewSuggestions] = useState(false); // Indicator state
    const previousSuggestionIds = useRef<Set<string>>(new Set()); // Store previous suggestion IDs

    // --- Context ---
    const {
        // States
        currentStep, fetchStatus, repoUrlEntered, filesFetched,
        selectedFetcherFiles, kworkInputHasContent, aiResponseHasContent, filesParsed,
        selectedAssistantFiles, assistantLoading, aiActionLoading, loadingPrs,
        targetBranchName, // Read effective target branch
        manualBranchName, // Read manual input
        isSettingsModalOpen, // Read modal state
        isParsing,
        currentAiRequestId, // ID of request being monitored

        // Triggers
        triggerFetch = () => console.warn("triggerFetch not available"),
        triggerSelectHighlighted = () => console.warn("triggerSelectHighlighted not available"),
        triggerAddSelectedToKwork = async () => console.warn("triggerAddSelectedToKwork not available"),
        triggerCopyKwork = () => console.warn("triggerCopyKwork not available"),
        triggerAskAi = async () => { console.warn("triggerAskAi not available"); return { success: false, error: "Context unavailable" }; }, // Updated return type
        triggerParseResponse = async () => console.warn("triggerParseResponse not available"),
        triggerSelectAllParsed = () => console.warn("triggerSelectAllParsed not available"),
        triggerCreatePR = async () => console.warn("triggerCreatePR not available"), // Points to combined create/update handler
        triggerToggleSettingsModal = () => console.warn("triggerToggleSettingsModal not available"), // Settings modal toggle
        scrollToSection = () => console.warn("scrollToSection not available"),

        // Messages
        getXuinityMessage: getBaseMessage, // Use the base message logic

        // Refs (primarily for clearing)
        fetcherRef,

    } = useRepoXmlPageContext();

    // --- Get Welcoming Message ---
    const getXuinityMessage = useCallback((): string => {
        const effectiveBranch = manualBranchName.trim() || targetBranchName;
        const branchInfo = effectiveBranch ? ` (–≤–µ—Ç–∫–∞: ${effectiveBranch})` : ' (–≤–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)';
        const settingsMention = "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö";

        switch (currentStep) {
          case 'idle': return `–ô–æ! –ì–æ—Ç–æ–≤(–∞) –∫–æ–¥–∏—Ç—å –≤ –ø–æ—Ç–æ–∫–µ? ‚ú® –ù–∞—á–Ω–µ–º!`;
          case 'need_repo_url': return `–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –û—Ç–∫—Ä–æ–π ${settingsMention}, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ.`;
          case 'ready_to_fetch': return repoUrlEntered ? `–†–µ–ø–æ –µ—Å—Ç—å! üëç –ñ–º–∏ "–ò–∑–≤–ª–µ—á—å —Ñ–∞–π–ª—ã"${branchInfo} –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ ${settingsMention} –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏/PR.` : `–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ URL —Ä–µ–ø–æ –≤ ${settingsMention}.`;
          case 'fetching': return `–ú–∏–Ω—É—Ç–∫—É, –ø–æ–ª—É—á–∞—é –∫–æ–¥ –∏–∑${branchInfo}... ‚è≥`;
          case 'fetch_failed': return `–£–ø—Å! üò¨ –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã${branchInfo}. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É/—Ç–æ–∫–µ–Ω/–≤–µ—Ç–∫—É –≤ ${settingsMention} –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞?`;
          case 'files_fetched': return `–ö–æ–¥ –∑–¥–µ—Å—å! ‚úÖ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è AI –∏–ª–∏ —á–µ–∫–Ω–∏ ${settingsMention} –¥–ª—è –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–∏.`;
          case 'files_fetched_highlights': return `–ï—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã! üòé –í—ã–±–µ—Ä–∏ –∏—Ö –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∞–º(–∞). –í–µ—Ç–∫—É –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ ${settingsMention}.`;
          case 'files_selected': return `–û—Ç–ª–∏—á–Ω–æ, —Ñ–∞–π–ª—ã –≤—ã–±—Ä–∞–Ω—ã${branchInfo}! –î–æ–±–∞–≤—å –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π (+) –∏–ª–∏ —Å—Ä–∞–∑—É –∂–º–∏ "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI"!`;
          case 'request_written': return aiActionLoading && !currentAiRequestId ? "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å..." : "–ó–∞–ø—Ä–æ—Å –≥–æ—Ç–æ–≤! üî• –û—Ç–ø—Ä–∞–≤–ª—è–π –µ–≥–æ AI (\"ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI\") –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π.";
          case 'generating_ai_response': return `–ó–∞–ø—Ä–æ—Å ${currentAiRequestId ? `(${currentAiRequestId.substring(0,6)}...) ` : ''}–≤ –æ—á–µ—Ä–µ–¥–∏. –û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç AI... ü§ñüí≠`; // Show request ID hint
          case 'request_copied': return `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ! ‚úÖ –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ AI. –í—Å—Ç–∞–≤–ª—è–π –µ–≥–æ –≤ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∏–∂–µ.`;
          case 'response_pasted': return `–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω! ü§ò –ù–∞–∂–º–∏ '‚û°Ô∏è' —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã —è –µ–≥–æ —Ä–∞–∑–æ–±—Ä–∞–ª.`;
          case 'parsing_response': return `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç AI... üß† –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!`;
          case 'response_parsed': return `–†–∞–∑–æ–±—Ä–∞–ª! üí™ –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª—ã –∏ –º–æ–∂–Ω–æ ${effectiveBranch ? `–æ–±–Ω–æ–≤–ª—è—Ç—å –≤–µ—Ç–∫—É '${effectiveBranch}'` : '—Å–æ–∑–¥–∞–≤–∞—Ç—å PR'}!`;
          case 'pr_ready': return assistantLoading
                               ? (effectiveBranch ? `–û–±–Ω–æ–≤–ª—è—é –≤–µ—Ç–∫—É ${branchInfo}...` : "–°–æ–∑–¥–∞—é PR...")
                               : (effectiveBranch ? `–ì–æ—Ç–æ–≤(–∞) –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ç–∫—É ${branchInfo}?` : "–ì–æ—Ç–æ–≤(–∞) —Å–æ–∑–¥–∞—Ç—å Pull Request?");
          default: return "–ß—Ç–æ –¥–∞–ª—å—à–µ? üòâ";
        }
      }, [currentStep, repoUrlEntered, fetchStatus, assistantLoading, targetBranchName, manualBranchName, isParsing, aiActionLoading, currentAiRequestId]);


    const activeMessage = useMemo(() => getXuinityMessage(), [getXuinityMessage]);


    // --- Define Suggestions ---
    const suggestions = useMemo((): Suggestion[] => {
        const suggestionsList: Suggestion[] = [];
        const isFetcherLoading = fetchStatus === 'loading' || fetchStatus === 'retrying';
        const isAnyLoading = isFetcherLoading || assistantLoading || aiActionLoading || loadingPrs || isParsing;
        const effectiveBranch = manualBranchName.trim() || targetBranchName;
        const branchInfo = effectiveBranch ? ` (${effectiveBranch})` : ' (default)';
        const createOrUpdateActionText = effectiveBranch ? `–û–±–Ω–æ–≤–∏—Ç—å –í–µ—Ç–∫—É '${effectiveBranch}'` : "–°–æ–∑–¥–∞—Ç—å PR";
        const createOrUpdateIcon = effectiveBranch ? <FaCodeBranch /> : <FaGithub />;
        const isWaitingForAi = aiActionLoading && !!currentAiRequestId; // Specific waiting state

        const addSuggestion = (id: string, text: string, action: () => any, icon: React.ReactNode, condition = true, disabled = false, tooltip = '') => {
            if (condition) {
                let isDisabled = disabled;
                if (isAnyLoading) {
                   if (id === 'retry-fetch' || (id === 'toggle-settings' && isSettingsModalOpen)) isDisabled = false;
                   else if (id === 'toggle-settings' && !isSettingsModalOpen && !isFetcherLoading && !isParsing) isDisabled = false;
                   else isDisabled = true;
                }
                 suggestionsList.push({ id, text, action, icon, disabled: isDisabled, tooltip });
            }
        };

        // --- Core Suggestions ---
        addSuggestion( "toggle-settings", isSettingsModalOpen ? "–ó–∞–∫—Ä—ã—Ç—å –ù–∞—Å—Ç—Ä–æ–π–∫–∏" : "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (URL/–í–µ—Ç–∫–∞/PR)", triggerToggleSettingsModal, <FaCodeBranch />, true );

        switch (currentStep) {
            case 'ready_to_fetch':
                addSuggestion("fetch", `–ò–∑–≤–ª–µ—á—å –§–∞–π–ª—ã${branchInfo}`, triggerFetch, <FaDownload />, true, !repoUrlEntered, !repoUrlEntered ? "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ URL" : "");
                break;
            case 'fetching':
                addSuggestion("loading-indicator", `–ó–∞–≥—Ä—É–∑–∫–∞ –§–∞–π–ª–æ–≤${branchInfo}...`, () => {}, <FaArrowsRotate className="animate-spin"/>, true, true );
                break;
            case 'fetch_failed':
                addSuggestion("retry-fetch", `–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –°–Ω–æ–≤–∞${branchInfo}?`, () => triggerFetch(true), <FaArrowRotateRight />, true);
                break;
            case 'files_fetched':
                 addSuggestion("goto-files", "–ö –°–ø–∏—Å–∫—É –§–∞–π–ª–æ–≤", () => scrollToSection('fetcher'), <FaEye />);
                 addSuggestion("ask-ai-empty", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI", triggerAskAi, <FaRobot />);
                 break;
            case 'files_fetched_highlights':
                 addSuggestion("select-highlighted", "–í—ã–±—Ä–∞—Ç—å –°–≤—è–∑–∞–Ω–Ω—ã–µ", triggerSelectHighlighted, <FaHighlighter />);
                 addSuggestion("goto-files", "–ö –°–ø–∏—Å–∫—É –§–∞–π–ª–æ–≤", () => scrollToSection('fetcher'), <FaEye />);
                 addSuggestion("add-selected", "–î–æ–±–∞–≤–∏—Ç—å (+)", () => triggerAddSelectedToKwork(true), <FaPlus />, selectedFetcherFiles.size > 0);
                 addSuggestion("ask-ai-highlights", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI", triggerAskAi, <FaRobot />);
                break;
            case 'files_selected':
                addSuggestion("add-selected", "–î–æ–±–∞–≤–∏—Ç—å (+) –∏ –°–ø—Ä–æ—Å–∏—Ç—å AI", () => triggerAddSelectedToKwork(true), <FaPlus />);
                addSuggestion("ask-ai-selected", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI (—Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å)", triggerAskAi, <FaRobot />);
                addSuggestion("goto-kwork", "–ö –ü–æ–ª—é –ó–∞–ø—Ä–æ—Å–∞", () => scrollToSection('kworkInput'), <FaKeyboard />);
                break;
            case 'request_written':
                 // Disable Ask AI if already submitted and waiting
                 addSuggestion("ask-ai-written", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI", triggerAskAi, <FaRobot />, true, isWaitingForAi, isWaitingForAi ? "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" : "");
                 addSuggestion("copy-kwork", "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ó–∞–ø—Ä–æ—Å", triggerCopyKwork, <FaCopy />, true, !kworkInputHasContent, !kworkInputHasContent ? "–ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç" : "");
                 addSuggestion("goto-kwork", "–ö –ü–æ–ª—é –ó–∞–ø—Ä–æ—Å–∞", () => scrollToSection('kworkInput'), <FaKeyboard />);
                 break;
            case 'generating_ai_response': // Waiting for Realtime
                 addSuggestion("loading-indicator", `‚è≥ –ñ–¥—É AI (${currentAiRequestId?.substring(0,6)}...)`, () => {}, <FaBrain className="animate-pulse"/>, true, true );
                 addSuggestion("goto-ai-response-wait", "–ö –ü–æ–ª—é –û—Ç–≤–µ—Ç–∞ AI", () => scrollToSection('aiResponseInput'), <FaKeyboard />); // Still allow scroll
                 break;
            case 'request_copied':
                addSuggestion("goto-ai-response", "–ö –ü–æ–ª—é –û—Ç–≤–µ—Ç–∞ AI", () => scrollToSection('aiResponseInput'), <FaArrowRight />);
                addSuggestion("parse-response", "–†–∞–∑–æ–±—Ä–∞—Ç—å –û—Ç–≤–µ—Ç", triggerParseResponse, <FaWandMagicSparkles />, aiResponseHasContent, !aiResponseHasContent, !aiResponseHasContent ? "–í—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç AI" : "");
                break;
            case 'response_pasted':
                 addSuggestion("parse-response", "‚û°Ô∏è –†–∞–∑–æ–±—Ä–∞—Ç—å –û—Ç–≤–µ—Ç", triggerParseResponse, <FaWandMagicSparkles />, true, !aiResponseHasContent, !aiResponseHasContent ? "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞" : "");
                 addSuggestion("goto-ai-response", "–ö –ü–æ–ª—é –û—Ç–≤–µ—Ç–∞", () => scrollToSection('aiResponseInput'), <FaKeyboard />);
                break;
            case 'parsing_response': // NEW: Show parsing indicator
                 addSuggestion("loading-indicator", "–†–∞–∑–±–æ—Ä –û—Ç–≤–µ—Ç–∞...", () => {}, <FaBrain className="animate-pulse"/>, true, true );
                 break;
            case 'response_parsed':
            case 'pr_ready':
                 addSuggestion("select-all-parsed", "–í—ã–±—Ä–∞—Ç—å –í—Å–µ –§–∞–π–ª—ã", triggerSelectAllParsed, <FaListCheck />, filesParsed);
                 addSuggestion("goto-assistant-files", "–ö –§–∞–π–ª–∞–º –ù–∏–∂–µ", () => scrollToSection('assistant'), <FaEye />);
                 addSuggestion( effectiveBranch ? "update-branch" : "create-pr", createOrUpdateActionText, triggerCreatePR, createOrUpdateIcon, selectedAssistantFiles.size > 0, selectedAssistantFiles.size === 0, "–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞" );
                 addSuggestion("goto-pr-form", "–ö –§–æ—Ä–º–µ PR/–í–µ—Ç–∫–∏", () => scrollToSection('prSection'), <FaRocket />);
                break;
            default: break;
        }

        // --- Clear All Suggestion ---
         if (fetcherRef?.current?.clearAll && (selectedFetcherFiles.size > 0 || kworkInputHasContent || aiResponseHasContent)) {
             addSuggestion("clear-all", "–û—á–∏—Å—Ç–∏—Ç—å –í—Å–µ?", fetcherRef.current.clearAll, <FaBroom/>, true);
         }

        return suggestionsList;

    }, [ // Dependencies
        currentStep, fetchStatus, repoUrlEntered, filesFetched, selectedFetcherFiles,
        kworkInputHasContent, aiResponseHasContent, filesParsed, selectedAssistantFiles,
        assistantLoading, aiActionLoading, loadingPrs, isParsing, currentAiRequestId,
        targetBranchName, manualBranchName, isSettingsModalOpen,
        triggerFetch, triggerSelectHighlighted, triggerAddSelectedToKwork, triggerCopyKwork,
        triggerAskAi, triggerParseResponse, triggerSelectAllParsed, triggerCreatePR,
        triggerToggleSettingsModal, scrollToSection, fetcherRef
    ]);


    // --- Suggestion Change Detection for Notification ---
    // Use the standard, readable useEffect logic here
    useEffect(() => {
        const currentIds = new Set(suggestions.map(s => s.id));
        const prevIds = previousSuggestionIds.current;

        if (isOpen) {
            setHasNewSuggestions(false);
            previousSuggestionIds.current = currentIds;
        } else {
            let changed = currentIds.size !== prevIds.size;
            if (!changed) {
                // Check if any new ID is not in the old set
                for (const id of currentIds) {
                    if (!prevIds.has(id)) {
                        changed = true;
                        break;
                    }
                }
                // Check if any old ID is not in the new set (if still not changed)
                if (!changed) {
                    for (const id of prevIds) {
                        if (!currentIds.has(id)) {
                            changed = true;
                            break;
                        }
                    }
                }
            }

            // Ignore changes that only involve loading indicators appearing/disappearing
            const meaningfulChange = Array.from(currentIds).some(id => !id.includes('loading-indicator')) ||
                                     Array.from(prevIds).some(id => !id.includes('loading-indicator'));

            if (changed && meaningfulChange && !hasNewSuggestions) {
                setHasNewSuggestions(true);
                console.log("Buddy: New suggestions available!");
            }

            // Update previous suggestions reference only when suggestions actually change while closed
            if(changed) {
                previousSuggestionIds.current = currentIds;
            }
        }
    }, [suggestions, isOpen, hasNewSuggestions]);


    // --- Auto-open Timer ---
    useEffect(() => { let t:NodeJS.Timeout|null=null; if(!hasAutoOpened&&!isOpen){t=setTimeout(()=>{setIsOpen(true);setHasAutoOpened(true);},AUTO_OPEN_DELAY_MS_BUDDY);} return()=>{if(t)clearTimeout(t);}; }, [hasAutoOpened, isOpen]);
    // --- Handle Escape Key ---
    const handleEscKey = useCallback((e:KeyboardEvent) => { if(e.key==='Escape'&&isOpen)setIsOpen(false);}, [isOpen]);
    useEffect(() => { document.addEventListener('keydown',handleEscKey); return()=>{document.removeEventListener('keydown',handleEscKey);}; }, [handleEscKey]);

    // --- Event Handlers ---
    const handleSuggestionClick = (suggestion: Suggestion) => { if(suggestion.disabled)return; console.log("Buddy Click:",suggestion.id); if(suggestion.action){ const r=suggestion.action(); if(!suggestion.id.startsWith('goto-')&&suggestion.id!=='loading-indicator'&&suggestion.id!=='toggle-settings'){setIsOpen(false);} else if(suggestion.id.startsWith('goto-')){setTimeout(()=>setIsOpen(false),300);} if(r instanceof Promise){r.catch(err=>{console.error(`Buddy action (${suggestion.id}) error:`, err); toast.error(`–î–µ–π—Å—Ç–≤–∏–µ "${suggestion.text}" –Ω–µ —É–¥–∞–ª–æ—Å—å.`);});} } else {setIsOpen(false);} };
    const handleOverlayClick = () => setIsOpen(false);
    const handleDialogClick = (e:React.MouseEvent<HTMLDivElement>) => e.stopPropagation();
    const handleFabClick = () => { setIsOpen(!isOpen); if(!isOpen){setHasAutoOpened(true);setHasNewSuggestions(false);} };

    // --- Render Logic ---
    return (
        <AnimatePresence>
            {isOpen ? (
                <motion.div key="buddy-dialog-overlay" className="fixed inset-0 z-50 flex items-end sm:items-center justify-center sm:justify-end p-4 bg-black bg-opacity-60 backdrop-blur-sm" onClick={handleOverlayClick} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.2 }} aria-modal="true" role="dialog" aria-labelledby="buddy-suggestions-title" >
                    <motion.div variants={containerVariants} initial="hidden" animate="visible" exit="exit" className="relative p-4 w-full max-w-xs sm:max-w-sm md:max-w-md flex flex-col items-center sm:items-end bg-transparent" onClick={handleDialogClick} >
                        <h2 id="buddy-suggestions-title" className="sr-only">Automation Buddy Suggestions</h2>
                        <SpeechBubble message={activeMessage} variants={childVariants} bubblePosition="right" />
                        <div className="flex flex-col sm:flex-row-reverse items-center sm:items-end w-full gap-4 mt-2">
                            <CharacterDisplay characterImageUrl={BUDDY_IMAGE_URL} characterAltText={BUDDY_ALT_TEXT} githubProfile={null} variants={childVariants} />
                            <SuggestionList suggestions={suggestions} onSuggestionClick={handleSuggestionClick} listVariants={childVariants} itemVariants={childVariants} className="items-center sm:items-end" />
                        </div>
                    </motion.div>
                </motion.div>
            ) : (
                <div className="fixed bottom-4 right-4 z-50">
                    <motion.div variants={fabVariants} initial="hidden" animate="visible" exit="exit" className="relative">
                         <FloatingActionButton onClick={handleFabClick} icon={<FaAngrycreative className="text-xl" />} className="bg-gradient-to-br from-purple-600 to-indigo-700 hover:from-purple-700 hover:to-indigo-800 text-white shadow-lg hover:shadow-xl rounded-full" aria-label="Open Automation Buddy" />
                         <AnimatePresence> {hasNewSuggestions && ( <motion.div key="buddy-notification" variants={notificationVariants} initial="hidden" animate="visible" exit="exit" className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center border-2 border-gray-900 shadow-md" aria-hidden="true" > <FaExclamation className="text-white text-xs" /> </motion.div> )} </AnimatePresence>
                    </motion.div>
                </div>
            )}
        </AnimatePresence>
    );
};
export default AutomationBuddy;