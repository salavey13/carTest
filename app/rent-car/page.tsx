"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { createInvoice, supabaseAnon, getUserSubscription } from "@/hooks/supabase"
import { sendTelegramInvoice } from "@/app/actions"
import { useTelegram } from "@/hooks/useTelegram"
import { getTelegramUser } from "@/lib/telegram"
import SemanticSearch from "@/components/SemanticSearch"
import { toast } from "sonner"
import { Badge } from "@/components/ui/badge"
import { Crown } from 'lucide-react'

const YUAN_TO_STARS_RATE = 0.1 // 1 Yuan = 0.1 Stars

export default function RentCar() {
  const { user: tgUser, isInTelegramContext } = useTelegram()
  const [selectedCar, setSelectedCar] = useState(null)
  const [rentDays, setRentDays] = useState(1)
  const [cars, setCars] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const [hasSubscription, setHasSubscription] = useState<boolean>(false)

  // Check subscription status
  useEffect(() => {
    const checkSubscription = async () => {
      if (tgUser) {
        const subscriptionId = await getUserSubscription(tgUser.id.toString())
        setHasSubscription(!!subscriptionId)
      }
    }
    checkSubscription()
  }, [tgUser])

  // Check if we're in Telegram context on mount
  useEffect(() => {
    const webAppUser = getTelegramUser()
    if (!webAppUser && typeof window !== "undefined" && !(window as any).Telegram?.WebApp) {
      setError("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram.")
    }
  }, [])

  useEffect(() => {
    const fetchCars = async () => {
      const { data, error } = await supabaseAnon.from("cars").select("*")
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:", error)
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
      } else {
        setCars(data || [])
      }
    }
    fetchCars()
  }, [])

  const getWelcomeMessage = () => {
    if (hasSubscription) {
      return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ."
    }
    return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –°—Ç–∞–Ω—å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º."
  }

  const getSuccessMessage = () => {
    if (hasSubscription) {
      return "üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! –í–∞—à –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏. –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram."
    }
    return "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É! –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram. –°—Ç–∞–Ω—å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º!"
  }

  const handleRent = async () => {
    if (!selectedCar) return

    const webAppUser = getTelegramUser()
    if (!webAppUser) {
      setError("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
      return
    }

    setLoading(true)
    setError(null)

    try {
      const totalPriceYuan = selectedCar.daily_price * rentDays
      const totalPriceStars = Math.round(totalPriceYuan * YUAN_TO_STARS_RATE)

      // Apply subscriber discount if applicable
      const finalPrice = hasSubscription ? Math.round(totalPriceStars * 0.9) : totalPriceStars

      // Create metadata for the invoice
      const metadata = {
        car_id: selectedCar.id,
        car_make: selectedCar.make,
        car_model: selectedCar.model,
        days: rentDays,
        price_yuan: totalPriceYuan,
        price_stars: finalPrice,
        is_subscriber: hasSubscription,
        original_price: totalPriceStars,
        discount_applied: hasSubscription ? "10%" : "0%"
      }

      // Create invoice in Supabase first
      const invoiceId = `car_rental_${selectedCar.id}_${webAppUser.id}_${Date.now()}`
      await createInvoice(invoiceId, webAppUser.id.toString(), finalPrice, metadata)

      // Prepare description with subscription status
      const description = hasSubscription
        ? `–ü—Ä–µ–º–∏—É–º-–∞—Ä–µ–Ω–¥–∞ –Ω–∞ ${rentDays} –¥–Ω–µ–π\n–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${finalPrice} XTR (${totalPriceYuan} ¬•)\n–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: 10%`
        : `–ê—Ä–µ–Ω–¥–∞ –Ω–∞ ${rentDays} –¥–Ω–µ–π\n–¶–µ–Ω–∞: ${finalPrice} XTR (${totalPriceYuan} ¬•)`

      // Send Telegram invoice
      const response = await sendTelegramInvoice(
        webAppUser.id.toString(),
        `–ê—Ä–µ–Ω–¥–∞ ${selectedCar.make} ${selectedCar.model}`,
        description,
        invoiceId,
        finalPrice,
      )

      if (!response.success) {
        throw new Error(response.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç")
      }

      setSuccess(true)
      toast.success(getSuccessMessage())
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:", err)
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    } finally {
      setLoading(false)
    }
  }

  // Early return if not in Telegram context
  if (!isInTelegramContext && !getTelegramUser()) {
    return (
      <div className="min-h-screen bg-gray-100 text-gray-900 pt-20">
        <div className="container mx-auto px-4 py-8">
          <Card className="max-w-md mx-auto">
            <CardHeader>
              <CardTitle className="text-center text-red-600">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-center">
                –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.
              </p>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-100 text-gray-900 pt-20">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center gap-2 mb-4">
          <h1 className="text-4xl font-bold text-center font-sans text-blue-900">–ê—Ä–µ–Ω–¥–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</h1>
          {hasSubscription && (
            <Badge variant="premium" className="ml-2">
              <Crown className="w-4 h-4 mr-1" />
              Premium
            </Badge>
          )}
        </div>

        <p className="text-center text-gray-600 mb-8">{getWelcomeMessage()}</p>

        {error && <p className="text-red-500 text-center mb-4">{error}</p>}
        {success && (
          <p className="text-green-500 text-center mb-4">{getSuccessMessage()}</p>
        )}

        <div className="mb-8">
          <SemanticSearch />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <Card className="bg-white border-gray-300">
            <CardHeader>
              <CardTitle className="text-blue-900 font-sans">
                {hasSubscription ? "–ü—Ä–µ–º–∏—É–º –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è" : "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å"}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Select onValueChange={(value) => setSelectedCar(cars.find((car) => car.id === value))}>
                <SelectTrigger className="bg-gray-50 border-gray-300 text-gray-900 font-sans">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" />
                </SelectTrigger>
                <SelectContent className="bg-white border-gray-300">
                  {cars.map((car) => (
                    <SelectItem key={car.id} value={car.id} className="text-gray-900 font-sans">
                      {car.make} {car.model} - {car.daily_price} ¬•/–¥–µ–Ω—å (
                      {Math.round(car.daily_price * YUAN_TO_STARS_RATE)} XTR)
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <div className="mt-4">
                <label className="text-sm font-sans text-gray-700">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π</label>
                <Input
                  type="number"
                  min="1"
                  value={rentDays}
                  onChange={(e) => setRentDays(Number.parseInt(e.target.value) || 1)}
                  className="bg-gray-50 border-gray-300 text-gray-900 font-sans mt-1"
                />
              </div>
              <Button
                onClick={handleRent}
                disabled={!selectedCar || loading}
                className={`w-full mt-4 ${
                  hasSubscription 
                    ? "bg-gradient-to-r from-purple-600 to-blue-600" 
                    : "bg-blue-600"
                } text-white hover:opacity-90 font-sans`}
              >
                {loading ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : hasSubscription ? "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π" : "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å"}
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-white border-gray-300">
            <CardHeader>
              <CardTitle className="text-blue-900 font-sans">
                {hasSubscription ? "–ü—Ä–µ–º–∏—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" : "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {selectedCar ? (
                <>
                  <Image
                    src={selectedCar.image_url || "/placeholder.svg"}
                    alt={`${selectedCar.make} ${selectedCar.model}`}
                    width={200}
                    height={200}
                    className="mx-auto mb-4 rounded"
                  />
                  <p className="text-gray-700 font-sans">
                    {selectedCar.make} {selectedCar.model}
                  </p>
                  <p className="text-gray-700 font-sans">
                    {selectedCar.daily_price} ¬•/–¥–µ–Ω—å ({Math.round(selectedCar.daily_price * YUAN_TO_STARS_RATE)} XTR)
                  </p>
                  <p className="text-gray-700 font-sans mt-4">
                    –ò—Ç–æ–≥–æ: {selectedCar.daily_price * rentDays} ¬• (
                    {hasSubscription 
                      ? <span className="text-purple-600 font-semibold">
                          {Math.round(selectedCar.daily_price * rentDays * YUAN_TO_STARS_RATE * 0.9)} XTR (—Å–∫–∏–¥–∫–∞ 10%)
                        </span>
                      : `${Math.round(selectedCar.daily_price * rentDays * YUAN_TO_STARS_RATE)} XTR`
                    })
                  </p>
                  {!hasSubscription && (
                    <p className="text-sm text-gray-500 mt-2">
                      üí° –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç 10% —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Å–µ –∞—Ä–µ–Ω–¥—ã!
                    </p>
                  )}
                </>
              ) : (
                <p className="text-center text-gray-700 font-sans">
                  {hasSubscription 
                    ? "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–º–∏—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" 
                    : "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}
                </p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

