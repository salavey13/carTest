"use server";

import type { WebhookHandler } from "./types";
import { supabaseAdmin, updateUserMetadata } from '@/hooks/supabase';
import { sendTelegramMessage } from "@/app/actions";
import { logger } from "@/lib/logger";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–µ–∫ –≤ metadata –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserProtoCard {
  type: string;                 // –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "simulation_access" –∏–ª–∏ "mission_support"
  purchased_at: string;         // ISO timestamp –ø–æ–∫—É–ø–∫–∏
  price_xtr: number;            // –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ XTR
  status: "active" | "redeemed" | "voided"; // –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏
  invoice_id: string;           // ID –∏–Ω–≤–æ–π—Å–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫—É–ø–ª–µ–Ω–∞
  data?: Record<string, any>;   // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (page_link, lead_id, title –∏ —Ç.–¥.)
}

interface UserMetadataWithProtoCards {
  xtr_protocards?: {
    [cardId: string]: UserProtoCard;
  };
  // ...–¥—Ä—É–≥–∏–µ –ø–æ–ª—è metadata...
}

export const protocardPurchaseHandler: WebhookHandler = {
  canHandle: (invoice, payload) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –∏–Ω–≤–æ–π—Å–∞ –≤ –ë–î –∏–ª–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É payload, –µ—Å–ª–∏ —Ç–∏–ø –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
    const typeMatch = invoice.type?.startsWith('protocard_');
    const payloadMatch = typeof payload === 'string' && payload.startsWith("protocard_");
    return !!(typeMatch || payloadMatch);
  },

  handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, baseUrl) => {
    logger.info(`[ProtoCardHandler] Processing ProtoCard purchase. UserID: ${userId}, InvoiceID: ${invoice.id}, Amount: ${totalAmount} XTR.`);
    
    // cardId –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ invoices.subscription_id
    const cardId = invoice.subscription_id; 
    const cardMetadataFromInvoice = invoice.metadata;

    if (!cardId) {
      logger.error(`[ProtoCardHandler] Critical: cardId (from invoice.subscription_id) is missing for invoice ${invoice.id}. Cannot update user metadata.`);
      await sendTelegramMessage(
        `üö® –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–û–¢–û–ö–ê–†–¢–´ –¥–ª—è ${userData.username || userId}! ID –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–æ–π—Å–µ ${invoice.id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
        [], undefined, userId, undefined
      );
      await sendTelegramMessage(
        `üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID –∫–∞—Ä—Ç–æ—á–∫–∏ (invoice.subscription_id) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–æ–π—Å–µ ${invoice.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`,
        [], undefined, adminChatId, undefined
      );
      return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç cardId
    }

    logger.debug(`[ProtoCardHandler] Extracted cardId: ${cardId}. Card metadata from invoice:`, cardMetadataFromInvoice);

    try {
      // 1. –ü–æ–º–µ—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å –∫–∞–∫ 'paid' (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ –≤ proxy, –Ω–æ –ª—É—á—à–µ —É–±–µ–¥–∏—Ç—å—Å—è)
      const { error: updateInvoiceError } = await supabaseAdmin
        .from("invoices")
        .update({ status: "paid", updated_at: new Date().toISOString() })
        .eq("id", invoice.id)
        .neq("status", "paid"); // –û–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ 'paid'

      if (updateInvoiceError) {
        logger.error(`[ProtoCardHandler] Error marking invoice ${invoice.id} as paid:`, updateInvoiceError);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
      }

      // 2. –û–±–Ω–æ–≤–∏—Ç—å users.metadata
      const currentUserMetadata = (userData.metadata || {}) as UserMetadataWithProtoCards;
      const existingProtoCards = currentUserMetadata.xtr_protocards || {};

      const newProtoCardEntry: UserProtoCard = {
        type: cardMetadataFromInvoice?.original_card_type || invoice.type || 'unknown', // –ò—Å–ø–æ–ª—å–∑—É–µ–º original_card_type –µ—Å–ª–∏ –µ—Å—Ç—å
        purchased_at: new Date().toISOString(),
        price_xtr: totalAmount, // totalAmount —É–∂–µ –≤ XTR
        status: "active",
        invoice_id: invoice.id,
        data: {
            title: cardMetadataFromInvoice?.card_title || "–ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∞",
            description: cardMetadataFromInvoice?.card_description || "–î–æ—Å—Ç—É–ø –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            ...(cardMetadataFromInvoice?.associated_lead_id && { lead_id: cardMetadataFromInvoice.associated_lead_id }),
            ...(cardMetadataFromInvoice?.simulator_page && { page_link: cardMetadataFromInvoice.simulator_page }),
            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ cardDetails.metadata, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏–Ω–≤–æ–π—Å–µ
            ...Object.fromEntries(
                Object.entries(cardMetadataFromInvoice || {})
                      .filter(([key]) => !['card_title', 'card_description', 'original_card_type', 'associated_lead_id', 'simulator_page'].includes(key))
            )
        }
      };

      const updatedProtoCards = {
        ...existingProtoCards,
        [cardId]: newProtoCardEntry,
      };

      const finalMetadataUpdate: UserMetadataWithProtoCards = {
        ...currentUserMetadata,
        xtr_protocards: updatedProtoCards,
      };
      
      const metadataUpdateResult = await updateUserMetadata(userId, finalMetadataUpdate);

      if (!metadataUpdateResult.success) {
        logger.error(`[ProtoCardHandler] Failed to update user ${userId} metadata with ProtoCard ${cardId}:`, metadataUpdateResult.error);
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω—É, —Ç.–∫. –∞–¥–º–∏–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç updateUserMetadata
        await sendTelegramMessage(
          `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoice.id}`,
          [], undefined, userId, undefined
        );
        return;
      }
      logger.info(`[ProtoCardHandler] User ${userId} metadata updated successfully with ProtoCard ${cardId}.`);

      // 3. –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
      const cardTitleForNotification = cardMetadataFromInvoice?.card_title || `–ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId}`;
      await sendTelegramMessage(
        `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏ "${cardTitleForNotification}"! –û–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. VIBE ON!`,
        [], undefined, userId, undefined
      );

      await sendTelegramMessage(
        `üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –ø—Ä–∏–æ–±—Ä–µ–ª –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫—É "${cardTitleForNotification}" (ID: ${cardId}) –∑–∞ ${totalAmount} XTR. –ò–Ω–≤–æ–π—Å: ${invoice.id}.`,
        [], undefined, adminChatId, undefined
      );

    } catch (error) {
      logger.error(`[ProtoCardHandler] Critical error processing ProtoCard purchase for user ${userId}, card ${cardId}:`, error);
      await sendTelegramMessage( // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏! User: ${userId}, CardID: ${cardId}, Invoice: ${invoice.id}. –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        [], undefined, adminChatId, undefined
      );
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ—à–∏–±–∫–µ –∑–¥–µ—Å—å, –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
    }
  },
};