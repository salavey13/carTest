import type { WebhookHandler } from "./types";
import { supabaseAdmin, updateUserMetadata } from '@/hooks/supabase';
import { sendTelegramMessage } from "@/app/actions";
import { logger } from "@/lib/logger";
import type { Database } from "@/types/database.types";

type UserMetadata = Database["public"]["Tables"]["users"]["Row"]["metadata"];

interface UserProtoCard {
  type: string;                 
  purchased_at: string;         
  price: string; // Changed to string to accommodate "13 XTR" or "100 KV"         
  status: "active" | "redeemed" | "voided"; 
  transaction_id: string; // Changed from invoice_id to be more generic         
  data?: Record<string, any>;   
}

interface UserMetadataWithProtoCards extends UserMetadata {
  xtr_protocards?: {
    [cardId: string]: UserProtoCard;
  };
}

// THIS HANDLER IS NOW ONLY FOR XTR PAYMENTS. KV purchases are handled directly.
export const protocardPurchaseHandler: WebhookHandler = {
  canHandle: (invoice, payload) => {
    const typeMatch = invoice.type?.startsWith('protocard_');
    const payloadMatch = typeof payload === 'string' && payload.startsWith("protocard_");
    logger.debug(`[ProtoCardHandler canHandle] Checking invoice.type: ${invoice.type}, payload: ${payload}. TypeMatch: ${typeMatch}, PayloadMatch: ${payloadMatch}`);
    return !!(typeMatch || payloadMatch);
  },

  handle: async (invoice, userId, userData, totalAmountXTR, supabase, telegramToken, adminChatId, baseUrl) => {
    logger.info(`[ProtoCardHandler] Processing XTR-based ProtoCard purchase. UserID: ${userId}, InvoiceID: ${invoice.id}, Amount: ${totalAmountXTR} XTR.`);
    
    const cardId = invoice.subscription_id; 
    const cardMetadataFromInvoice = invoice.metadata;

    if (!cardId) {
      logger.error(`[ProtoCardHandler] Critical: cardId (from invoice.subscription_id) is missing for invoice ${invoice.id}.`);
      // User is already notified by the payment system, but admin needs to know.
      await sendTelegramMessage(
        `üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID –∫–∞—Ä—Ç–æ—á–∫–∏ (invoice.subscription_id) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–æ–π—Å–µ ${invoice.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª!`,
        [], undefined, adminChatId, undefined
      );
      return; 
    }

    try {
      // Step 1: Grant Access. This function encapsulates updating the user metadata.
      const grantResult = await supabaseAdmin.rpc('grant_protocard_access', {
          p_user_id: userId,
          p_card_id: cardId,
          p_card_details: { // Constructing the card details based on invoice
            type: cardMetadataFromInvoice?.original_card_type || invoice.type?.replace('protocard_', '') || 'unknown',
            purchased_at: new Date().toISOString(),
            price: `${totalAmountXTR} XTR`,
            status: "active",
            transaction_id: invoice.id,
            data: {
              title: cardMetadataFromInvoice?.card_title || "–ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∞",
              description: cardMetadataFromInvoice?.card_description || "–î–æ—Å—Ç—É–ø –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
              ...(cardMetadataFromInvoice || {}), // Add all other metadata from invoice
            }
          }
      });
      
      if (grantResult.error) {
          logger.error(`[ProtoCardHandler] RPC grant_protocard_access failed for user ${userId}, card ${cardId}:`, grantResult.error);
          await sendTelegramMessage(
            `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoice.id}`,
            [], undefined, userId, undefined
          );
          return;
      }
      
      logger.info(`[ProtoCardHandler] User ${userId} metadata updated successfully via RPC with ProtoCard ${cardId}.`);

      // Step 2: Mark invoice as paid
      const { error: updateInvoiceError } = await supabaseAdmin
        .from("invoices")
        .update({ status: "paid", updated_at: new Date().toISOString() })
        .eq("id", invoice.id)
        .neq("status", "paid"); 

      if (updateInvoiceError) {
        logger.error(`[ProtoCardHandler] Error marking invoice ${invoice.id} as paid (but access was granted):`, updateInvoiceError);
        // Don't stop here, user already has access.
      }

      // Step 3: Notify user and admin
      const cardTitleForNotification = cardMetadataFromInvoice?.card_title || `–ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId}`;
      let userMessage = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏ "${cardTitleForNotification}"! –û–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. VIBE ON!`;
      const pageLink = cardMetadataFromInvoice?.page_link || (cardMetadataFromInvoice?.data as any)?.page_link;
      const demoLinkParam = cardMetadataFromInvoice?.demo_link_param || (cardMetadataFromInvoice?.data as any)?.demo_link_param;

      if (pageLink) {
        userMessage += `\n–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç: ${baseUrl}${pageLink}`;
      } else if (demoLinkParam) {
        const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'webAnyBot';
        const demoUrl = `https://t.me/${botUsername}/app?startapp=${demoLinkParam}`;
        userMessage += `\n–î–æ—Å—Ç—É–ø –∫ –¥–µ–º–æ –¥–ª—è –º–∏—Å—Å–∏–∏: ${demoUrl}`;
      }

      await sendTelegramMessage(userMessage, [], undefined, userId, undefined);

      await sendTelegramMessage(
        `üîî [XTR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –ø—Ä–∏–æ–±—Ä–µ–ª –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫—É "${cardTitleForNotification}" (ID: ${cardId}) –∑–∞ ${totalAmountXTR} XTR. –ò–Ω–≤–æ–π—Å: ${invoice.id}.`,
        [], undefined, adminChatId, undefined
      );

    } catch (error) {
      logger.error(`[ProtoCardHandler] Critical error processing XTR purchase for user ${userId}, card ${cardId}:`, error);
      await sendTelegramMessage( 
        `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XTR –ø–ª–∞—Ç–µ–∂–∞! User: ${userId}, CardID: ${cardId}, Invoice: ${invoice.id}. –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        [], undefined, adminChatId, undefined
      );
    }
  },
};