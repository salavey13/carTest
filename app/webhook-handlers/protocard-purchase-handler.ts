// /app/webhook-handlers/protocard-purchase-handler.ts
"use server";

import type { WebhookHandler } from "./types";
import { supabaseAdmin, updateUserMetadata } from '@/hooks/supabase';
import { sendTelegramMessage } from "@/app/actions";
import { logger } from "@/lib/logger";
import type { Database } from "@/types/database.types";

type UserMetadata = Database["public"]["Tables"]["users"]["Row"]["metadata"];

interface UserProtoCard {
  type: string;                 
  purchased_at: string;         
  price_xtr: number;            
  status: "active" | "redeemed" | "voided"; 
  invoice_id: string;           
  data?: Record<string, any>;   
}

interface UserMetadataWithProtoCards extends UserMetadata { // –†–∞—Å—à–∏—Ä—è–µ–º UserMetadata
  xtr_protocards?: {
    [cardId: string]: UserProtoCard;
  };
}

export const protocardPurchaseHandler: WebhookHandler = {
  canHandle: (invoice, payload) => {
    const typeMatch = invoice.type?.startsWith('protocard_');
    const payloadMatch = typeof payload === 'string' && payload.startsWith("protocard_");
    logger.debug(`[ProtoCardHandler canHandle] Checking invoice.type: ${invoice.type}, payload: ${payload}. TypeMatch: ${typeMatch}, PayloadMatch: ${payloadMatch}`);
    return !!(typeMatch || payloadMatch);
  },

  handle: async (invoice, userId, userData, totalAmountXTR, supabase, telegramToken, adminChatId, baseUrl) => {
    // totalAmountXTR –∑–¥–µ—Å—å —É–∂–µ –≤ XTR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13), —Ç.–∫. proxy.ts –¥–µ–ª–∏—Ç –Ω–∞ 100
    logger.info(`[ProtoCardHandler] Processing ProtoCard purchase. UserID: ${userId}, InvoiceID: ${invoice.id}, Amount: ${totalAmountXTR} XTR.`);
    
    const cardId = invoice.subscription_id; 
    const cardMetadataFromInvoice = invoice.metadata;

    if (!cardId) {
      logger.error(`[ProtoCardHandler] Critical: cardId (from invoice.subscription_id) is missing for invoice ${invoice.id}. Cannot update user metadata.`);
      await sendTelegramMessage(
        `üö® –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–û–¢–û–ö–ê–†–¢–´ –¥–ª—è ${userData.username || userId}! ID –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–æ–π—Å–µ ${invoice.id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
        [], undefined, userId, undefined
      );
      await sendTelegramMessage(
        `üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID –∫–∞—Ä—Ç–æ—á–∫–∏ (invoice.subscription_id) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–æ–π—Å–µ ${invoice.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`,
        [], undefined, adminChatId, undefined
      );
      return; 
    }

    logger.debug(`[ProtoCardHandler] Extracted cardId: ${cardId}. Card metadata from invoice:`, cardMetadataFromInvoice);

    try {
      // 1. –ü–æ–º–µ—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å –∫–∞–∫ 'paid'
      const { error: updateInvoiceError } = await supabaseAdmin
        .from("invoices")
        .update({ status: "paid", updated_at: new Date().toISOString() })
        .eq("id", invoice.id)
        .neq("status", "paid"); 

      if (updateInvoiceError) {
        logger.error(`[ProtoCardHandler] Error marking invoice ${invoice.id} as paid:`, updateInvoiceError);
      } else {
        logger.info(`[ProtoCardHandler] Invoice ${invoice.id} marked as paid or was already paid.`);
      }

      // 2. –û–±–Ω–æ–≤–∏—Ç—å users.metadata
      const currentUserMetadata = (userData.metadata || {}) as UserMetadataWithProtoCards;
      const existingProtoCards = currentUserMetadata.xtr_protocards || {};

      const newProtoCardEntry: UserProtoCard = {
        type: cardMetadataFromInvoice?.original_card_type || invoice.type?.replace('protocard_', '') || 'unknown',
        purchased_at: new Date().toISOString(),
        price_xtr: totalAmountXTR, 
        status: "active",
        invoice_id: invoice.id,
        data: {
            title: cardMetadataFromInvoice?.card_title || "–ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∞",
            description: cardMetadataFromInvoice?.card_description || "–î–æ—Å—Ç—É–ø –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            // –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã
            ...(cardMetadataFromInvoice?.associated_lead_id && { lead_id: cardMetadataFromInvoice.associated_lead_id }),
            ...(cardMetadataFromInvoice?.lead_title && { lead_title: cardMetadataFromInvoice.lead_title }),
            ...(cardMetadataFromInvoice?.demo_link_param && { demo_link_param: cardMetadataFromInvoice.demo_link_param }),
            ...(cardMetadataFromInvoice?.simulator_page && { page_link: cardMetadataFromInvoice.simulator_page }),
        }
      };
      // –£–¥–∞–ª—è–µ–º data, –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      if (Object.keys(newProtoCardEntry.data || {}).length === 0) {
          delete newProtoCardEntry.data;
      }

      const updatedProtoCards = {
        ...existingProtoCards,
        [cardId]: newProtoCardEntry,
      };

      const finalMetadataUpdate: UserMetadataWithProtoCards = {
        ...currentUserMetadata,
        xtr_protocards: updatedProtoCards,
      };
      
      const metadataUpdateResult = await updateUserMetadata(userId, finalMetadataUpdate);

      if (!metadataUpdateResult.success) {
        logger.error(`[ProtoCardHandler] Failed to update user ${userId} metadata with ProtoCard ${cardId}:`, metadataUpdateResult.error);
        await sendTelegramMessage(
          `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoice.id}`,
          [], undefined, userId, undefined
        );
        return;
      }
      logger.info(`[ProtoCardHandler] User ${userId} metadata updated successfully with ProtoCard ${cardId}.`);

      // 3. –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
      const cardTitleForNotification = cardMetadataFromInvoice?.card_title || `–ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId}`;
      let userMessage = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏ "${cardTitleForNotification}"! –û–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. VIBE ON!`;
      if (newProtoCardEntry.data?.page_link) {
        userMessage += `\n–î–æ—Å—Ç—É–ø –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É: ${baseUrl}${newProtoCardEntry.data.page_link}`;
      } else if (newProtoCardEntry.data?.lead_id && newProtoCardEntry.data?.demo_link_param) {
        const demoUrl = `https://t.me/${process.env.TELEGRAM_BOT_USERNAME || 'webAnyBot'}/app?startapp=${newProtoCardEntry.data.demo_link_param}`;
        userMessage += `\n–î–æ—Å—Ç—É–ø –∫ –¥–µ–º–æ –¥–ª—è –º–∏—Å—Å–∏–∏ "${newProtoCardEntry.data.lead_title || newProtoCardEntry.data.lead_id}": ${demoUrl}`;
      }

      await sendTelegramMessage(userMessage, [], undefined, userId, undefined);

      await sendTelegramMessage(
        `üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –ø—Ä–∏–æ–±—Ä–µ–ª –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫—É "${cardTitleForNotification}" (ID: ${cardId}) –∑–∞ ${totalAmountXTR} XTR. –ò–Ω–≤–æ–π—Å: ${invoice.id}.`,
        [], undefined, adminChatId, undefined
      );

    } catch (error) {
      logger.error(`[ProtoCardHandler] Critical error processing ProtoCard purchase for user ${userId}, card ${cardId}:`, error);
      await sendTelegramMessage( 
        `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ü—Ä–æ—Ç–æ–ö–∞—Ä—Ç–æ—á–∫–∏! User: ${userId}, CardID: ${cardId}, Invoice: ${invoice.id}. –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        [], undefined, adminChatId, undefined
      );
    }
  },
};