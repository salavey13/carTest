import { WebhookHandler } from "./types";
import { sendComplexMessage } from "./actions/sendComplexMessage";
import { supabaseAdmin } from "@/hooks/supabase";
import { updateQuantity } from "@/app/tapki/actions";

export const tapkiHandler: WebhookHandler = {
  canHandle: (invoice) => invoice.type === "tapki_purchase",
  handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, baseUrl) => {
    const metadata = invoice.metadata;
    const tapkiId = metadata?.tapki_id;

    if (!tapkiId) throw new Error("Tapki ID missing");

    // Update quantity
    const { success: qtySuccess } = await updateQuantity(tapkiId);
    if (!qtySuccess) throw new Error("Failed to update stock");

    // User confirmation with humor
    const userMessage = `‚úÖ –¢–∞–ø–æ—á–∫–∏ –∫—É–ø–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –Ω–æ–≥–∏ –≤ —Å–∞—É–Ω–µ ‚Äî –∫–∞–∫ –≤ —à–ª—é–ø–∫–µ –≤–æ –≤—Ä–µ–º—è —à—Ç–æ—Ä–º–∞. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è, –≤—ã–∂–∏–≤—à–∏–π! üòÇ`;
    await sendComplexMessage(userId, userMessage, [], { imageQuery: metadata?.image_url });

    // Admin notification
    const adminMessage = `üîî –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–∞–ø–æ—á–µ–∫: ${totalAmount} XTR –æ—Ç @${userData.username || userId}. –û—Å—Ç–∞—Ç–æ–∫: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ CRM!`;
    await sendComplexMessage(adminChatId, adminMessage, []);
  },
};