import { WebhookHandler } from "./types";
import { sendTelegramMessage } from "../actions";

export const carRentalHandler: WebhookHandler = {
  canHandle: (invoice) => invoice.type === "car_rental",
  handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, baseUrl) => {
    const metadata = invoice.metadata;
    const telegramBotLink = process.env.TELEGRAM_BOT_LINK || "https://t.me/oneSitePlsBot/app";
    
    // 1. Fetch vehicle data including the owner_id
    const { data: vehicle, error: vehicleError } = await supabase
      .from("cars")
      .select("owner_id, make, model, type")
      .eq("id", metadata.car_id)
      .single();

    if (vehicleError) {
      throw new Error(`Vehicle fetch error for ID ${metadata.car_id}: ${vehicleError.message}`);
    }
    if (!vehicle) {
        throw new Error(`Vehicle with ID ${metadata.car_id} not found.`);
    }

    // 2. Create a new entry in the 'rentals' table
    const { data: rental, error: rentalError } = await supabase
        .from('rentals')
        .insert({
            user_id: userId,
            vehicle_id: metadata.car_id,
            owner_id: vehicle.owner_id,
            status: 'pending_confirmation',
            payment_status: 'interest_paid',
            interest_amount: totalAmount,
            metadata: {
                initial_invoice_id: invoice.id,
                requested_days: metadata.days,
            }
        })
        .select('rental_id')
        .single();
    
    if (rentalError) {
        throw new Error(`Failed to create rental record: ${rentalError.message}`);
    }

    const rentalManagementUrl = `${telegramBotLink}?startapp=rental_${rental.rental_id}`;
    const vehicleTypeString = vehicle.type === 'bike' ? '–±–∞–π–∫' : '–∞–≤—Ç–æ–º–æ–±–∏–ª—å';

    // 3. Notify the Renter (user who paid)
    const renterMessage = `‚úÖ –í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∞—Ä–µ–Ω–¥–µ ${vehicleTypeString} **${metadata.car_make} ${metadata.car_model}** –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω! –í–ª–∞–¥–µ–ª–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É.`;
    await sendTelegramMessage(
        renterMessage,
        [{ text: "–£–ø—Ä–∞–≤–ª—è—Ç—å –ê—Ä–µ–Ω–¥–æ–π", url: rentalManagementUrl }],
        metadata.image_url,
        userId
    );

    // 4. Notify the Owner
    if (vehicle.owner_id) {
        const ownerMessage = `üî• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userData.username || userId} –æ–ø–ª–∞—Ç–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞—à–µ–º—É ${vehicleTypeString} **${metadata.car_make} ${metadata.car_model}**.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏.`;
        await sendTelegramMessage(
            ownerMessage,
            [{ text: "–ö –î–µ—Ç–∞–ª—è–º –°–¥–µ–ª–∫–∏", url: rentalManagementUrl }],
            metadata.image_url,
            vehicle.owner_id,
        );
    }

    // 5. Notify the Admin (optional, can be commented out)
    const adminMessage = `üîî –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∞—Ä–µ–Ω–¥–µ: \n- **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** ${metadata.car_make} ${metadata.car_model}\n- **–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:** @${userData.username || userId}\n- **–í–ª–∞–¥–µ–ª–µ—Ü:** ${vehicle.owner_id}\n- **–°—É–º–º–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞:** ${totalAmount} XTR`;
    await sendTelegramMessage(adminMessage, [], undefined, adminChatId);
  },
};