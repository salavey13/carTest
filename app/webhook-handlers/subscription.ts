import { WebhookHandler } from "./types";
import { sendTelegramMessage } from "../actions";
import { logger } from "@/lib/logger"; // Assuming you have a logger

export const subscriptionHandler: WebhookHandler = {
  // Ensure the 'type' in createInvoice matches this.
  // In BuySubscriptionPage, it's "subscription_cyberfitness".
  canHandle: (invoice) => invoice.type === "subscription_cyberfitness",

  handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, _baseUrl) => {
    logger.log(`[SubscriptionHandler] Processing for user ${userId}, invoice ID: ${invoice.id}, type: ${invoice.type}`);

    const purchasedSubscriptionId = invoice.metadata?.subscription_id as string | undefined;
    const purchasedSubscriptionName = invoice.metadata?.subscription_name as string | undefined;
    const expectedPriceXTR = invoice.metadata?.subscription_price_stars as number | undefined;

    if (!purchasedSubscriptionId || !purchasedSubscriptionName) {
      logger.error(`[SubscriptionHandler] Critical: subscription_id or subscription_name missing in invoice metadata for invoice ${invoice.id}. Metadata:`, invoice.metadata);
      await sendTelegramMessage(
        telegramToken,
 —è–¥–µ—Ä        `üö® –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–î–ü–ò–°–ö–ò –¥–ª—è ${userData.username || userId}! ID –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞ ${invoice.id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
        [], undefined, userId
      );
      await sendTelegramMessage(
        telegramToken,
        `üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID/–ò–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞ ${invoice.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –°—É–º–º–∞: ${totalAmount} XTR. Metadata: ${JSON.stringify(invoice.metadata)}`,
        [], undefined, adminChatId
      );
      return; // Stop processing if essential metadata is missing
    }

    // Optional: Verify totalAmount matches expectedPriceXTR if it's reliable
    if (expectedPriceXTR !== undefined && totalAmount !== expectedPriceXTR) {
        logger.warn(`[SubscriptionHandler] Price mismatch for invoice ${invoice.id}! Expected ${expectedPriceXTR} XTR, got ${totalAmount} XTR. Proceeding with ID: ${purchasedSubscriptionId}`);
        // You might choose to send an admin alert here too.
    }

    // Define user updates based on purchasedSubscriptionId
    let userUpdatePayload: {
      subscription_id: string;
      subscription_name?: string; // Optional: store the name too
      role?: string;              // Optional: adjust role based on subscription
      status?: string;            // Optional: adjust status based on subscription
      // Add any other fields you want to update
    } = {
      subscription_id: purchasedSubscriptionId,
      subscription_name: purchasedSubscriptionName,
    };

    // Example: Assigning roles based on subscription tier
    // This logic needs to match your actual tier IDs from BuySubscriptionPage.tsx
    if (purchasedSubscriptionId === "vibe_launch_co_pilot_intro") {
      userUpdatePayload.role = "co_pilot_subscriber"; // Example role
      userUpdatePayload.status = "active_paid"; // Example status
    } else if (purchasedSubscriptionId === "qbi_matrix_mastery_wowtro") {
      userUpdatePayload.role = "qbi_master"; // Example role
      userUpdatePayload.status = "active_premium"; // Example status
    }
    // Note: The free tier "cyber_initiate_free_demo" doesn't involve payment,
    // so it won't come through this webhook. Its status might be set on user creation or a different trigger.

    // Special override for an "admin" price (if you still want this backdoor)
    // Be very careful with hardcoded amounts for admin status.
    // It's better to have a separate, secure way to grant admin rights.
    if (totalAmount === 420 && purchasedSubscriptionId === "qbi_matrix_mastery_wowtro") { // Example: 420 XTR for QBI makes admin
      logger.warn(`[SubscriptionHandler] Admin override triggered for user ${userId} with amount 420 XTR on QBI plan.`);
      userUpdatePayload.role = "admin";
      userUpdatePayload.status = "admin";
    }

    const { error: updateUserError } = await supabase
      .from("users")
      .update(userUpdatePayload)
      .eq("user_id", userId);

    if (updateUserError) {
      logger.error(`[SubscriptionHandler] Failed to update user ${userId} with subscription ${purchasedSubscriptionId}:`, updateUserError);
      await sendTelegramMessage(
        telegramToken,
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–π CyberVibe OS –¥–æ "${purchasedSubscriptionName}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoice.id}`,
        [], undefined, userId
      );
      await sendTelegramMessage(
        telegramToken,
        `üö´ –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ${purchasedSubscriptionId} (${purchasedSubscriptionName}). –ò–Ω–≤–æ–π—Å: ${invoice.id}. –û—à–∏–±–∫–∞: ${updateUserError.message}`,
        [], undefined, adminChatId
      );
      return; // Stop if user update fails
    }

    logger.log(`[SubscriptionHandler] User ${userId} successfully upgraded to subscription: ${purchasedSubscriptionName} (ID: ${purchasedSubscriptionId}). Role/Status may also be updated.`);

    // Notify user of successful upgrade
    await sendTelegramMessage(
      telegramToken,
      `üéâ VIBE –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ CyberVibe OS —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è: "${purchasedSubscriptionName}"! –ü–æ–≥—Ä—É–∂–∞–π—Ç–µ—Å—å –≤ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ê–≥–µ–Ω—Ç!`,
      [],
      undefined,
      userId
    );

    // Notify admin of successful upgrade
    await sendTelegramMessage(
      telegramToken,
      `üîî –ê–ø–≥—Ä–µ–π–¥! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª CyberVibe OS –¥–æ: "${purchasedSubscriptionName}" (–°—É–º–º–∞: ${totalAmount} XTR).`,
      [],
      undefined,
      adminChatId
    );
  },
};