import { WebhookHandler } from "./types";
import { sendTelegramMessage } from "../actions";
import { logger } from "@/lib/logger"; 
import { updateUserSubscription } from "@/hooks/supabase";

export const subscriptionHandler: WebhookHandler = {
  canHandle: (invoice) => 
    invoice.type === "subscription_cyberfitness" || 
    invoice.type === "subscription_warehouse" ||
    invoice.type === "service_setup" ||
    invoice.type === "service_training",

  handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, _baseUrl) => {
    logger.log(`[SubscriptionHandler] Processing for user ${userId}, invoice ID: ${invoice.id}, type: ${invoice.type}`);

    const purchasedSubscriptionId = invoice.metadata?.subscription_id as string | undefined;
    const purchasedSubscriptionName = invoice.metadata?.subscription_name as string | undefined;
    const serviceType = invoice.metadata?.service_type as string | undefined;
    const expectedPriceXTR = invoice.metadata?.subscription_price_stars as number | undefined;

    // Handle service payments (one-time setup/training)
    if (invoice.type === "service_setup" || invoice.type === "service_training") {
      await handleServicePayment(invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, serviceType);
      return;
    }

    // Handle subscription payments
    if (!purchasedSubscriptionId || !purchasedSubscriptionName) {
      logger.error(`[SubscriptionHandler] Critical: subscription_id or subscription_name missing in invoice metadata for invoice ${invoice.id}. Metadata:`, invoice.metadata);
      await sendTelegramMessage(
        `üö® –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–î–ü–ò–°–ö–ò –¥–ª—è ${userData.username || userId}! ID –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞ ${invoice.id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
        [], undefined, userId
      );
      await sendTelegramMessage(
        `üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID/–ò–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞ ${invoice.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –°—É–º–º–∞: ${totalAmount} XTR. Metadata: ${JSON.stringify(invoice.metadata)}`,
        [], undefined, adminChatId
      );
      return; 
    }

    if (expectedPriceXTR !== undefined && totalAmount !== expectedPriceXTR) {
        logger.warn(`[SubscriptionHandler] Price mismatch for invoice ${invoice.id}! Expected ${expectedPriceXTR} XTR, got ${totalAmount} XTR. Proceeding with ID: ${purchasedSubscriptionId}`);
    }

    // Update user's subscription_id using the hook
    const updateResult = await updateUserSubscription(userId, purchasedSubscriptionId);

    if (!updateResult.success || !updateResult.data) {
      logger.error(`[SubscriptionHandler] Failed to update user ${userId} with subscription ${purchasedSubscriptionId}:`, updateResult.error);
      await sendTelegramMessage(
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ –¥–æ "${purchasedSubscriptionName}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoice.id}`,
        [], undefined, userId
      );
      await sendTelegramMessage(
        `üö´ –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ${purchasedSubscriptionId} (${purchasedSubscriptionName}). –ò–Ω–≤–æ–π—Å: ${invoice.id}. –û—à–∏–±–∫–∞: ${updateResult.error}`,
        [], undefined, adminChatId
      );
      return; 
    }
    
    // Set appropriate role and status based on subscription type and ID
    let userStatusUpdatePayload: { role?: string; status?: string; metadata?: any } = {};
    
    if (invoice.type === "subscription_warehouse") {
      // Warehouse management subscriptions
      switch (purchasedSubscriptionId) {
        case "warehouse_free":
          userStatusUpdatePayload.role = "warehouse_user";
          userStatusUpdatePayload.status = "active";
          userStatusUpdatePayload.metadata = { 
            ...userData.metadata,
            plan_limits: { 
              max_articles: 100, 
              max_warehouses: 1, 
              max_employees: 3,
              features: ['basic_sync', 'telegram_ui', 'csv_reports']
            }
          };
          break;
        case "warehouse_pro":
          userStatusUpdatePayload.role = "warehouse_pro";
          userStatusUpdatePayload.status = "active_paid";
          userStatusUpdatePayload.metadata = { 
            ...userData.metadata,
            plan_limits: { 
              max_articles: 500, 
              max_warehouses: 3, 
              max_employees: 10,
              features: ['full_sync', 'shift_management', 'advanced_reports', 'warehouse_visualization', 'priority_support']
            }
          };
          break;
        case "warehouse_enterprise":
          userStatusUpdatePayload.role = "warehouse_enterprise";
          userStatusUpdatePayload.status = "active_premium";
          userStatusUpdatePayload.metadata = { 
            ...userData.metadata,
            plan_limits: { 
              max_articles: -1, // unlimited
              max_warehouses: -1, // unlimited
              max_employees: -1, // unlimited
              features: ['all_features', 'ai_analytics', 'custom_integrations', 'dedicated_manager', 'custom_development']
            }
          };
          break;
      }
    } else if (invoice.type === "subscription_cyberfitness") {
      // Cyberfitness subscriptions (existing logic)
      if (purchasedSubscriptionId === "vibe_launch_co_pilot_intro") {
        userStatusUpdatePayload.role = "co_pilot_subscriber";
        userStatusUpdatePayload.status = "active_paid";
      } else if (purchasedSubscriptionId === "qbi_matrix_mastery_wowtro") {
        userStatusUpdatePayload.role = "qbi_master";
        userStatusUpdatePayload.status = "active_premium";
      }
      
      // Admin override for testing
      if (totalAmount === 420 && purchasedSubscriptionId === "qbi_matrix_mastery_wowtro") {
        logger.warn(`[SubscriptionHandler] Admin override triggered for user ${userId} with amount 420 XTR on QBI plan.`);
        userStatusUpdatePayload.role = "admin";
        userStatusUpdatePayload.status = "admin";
      }
    }

    // Update user role/status if needed
    if (Object.keys(userStatusUpdatePayload).length > 0) {
        const updateData: any = {};
        if (userStatusUpdatePayload.role) updateData.role = userStatusUpdatePayload.role;
        if (userStatusUpdatePayload.status) updateData.status = userStatusUpdatePayload.status;
        if (userStatusUpdatePayload.metadata) updateData.metadata = userStatusUpdatePayload.metadata;

        const { error: updateStatusError } = await supabase
            .from("users")
            .update(updateData)
            .eq("user_id", userId);
            
        if (updateStatusError) {
             logger.error(`[SubscriptionHandler] Failed to update user ${userId} role/status for subscription ${purchasedSubscriptionId}:`, updateStatusError);
        } else {
            logger.log(`[SubscriptionHandler] User ${userId} role/status updated for subscription ${purchasedSubscriptionId}.`);
        }
    }

    // Send success messages
    let userMessage = "";
    let adminMessage = "";

    if (invoice.type === "subscription_warehouse") {
      userMessage = `üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ç–∞—Ä–∏—Ñ "${purchasedSubscriptionName}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –≤–∞—à–∏–º —Å–∫–ª–∞–¥–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
      adminMessage = `üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–∫–ª–∞–¥–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç–∞—Ä–∏—Ñ: "${purchasedSubscriptionName}" (–°—É–º–º–∞: ${totalAmount} XTR).`;
    } else {
      userMessage = `üéâ VIBE –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ CyberVibe OS —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è: "${purchasedSubscriptionName}"! –ü–æ–≥—Ä—É–∂–∞–π—Ç–µ—Å—å –≤ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ê–≥–µ–Ω—Ç!`;
      adminMessage = `üîî –ê–ø–≥—Ä–µ–π–¥! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª CyberVibe OS –¥–æ: "${purchasedSubscriptionName}" (–°—É–º–º–∞: ${totalAmount} XTR).`;
    }

    logger.log(`[SubscriptionHandler] User ${userId} successfully upgraded to subscription: ${purchasedSubscriptionName} (ID: ${purchasedSubscriptionId}).`);

    await sendTelegramMessage(
      userMessage,
      [],
      undefined,
      userId
    );

    await sendTelegramMessage(
      adminMessage,
      [],
      undefined,
      adminChatId
    );

    // For warehouse subscriptions, send additional onboarding information
    if (invoice.type === "subscription_warehouse" && purchasedSubscriptionId !== "warehouse_free") {
      setTimeout(async () => {
        const onboardingMessage = `üì¶ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
1. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ "–≠–∫–∏–ø–∞–∂–∏"
2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ CSV-–∏–º–ø–æ—Ä—Ç –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
4. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π? –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥—É –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ 20 000‚ÇΩ - –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`;
        
        await sendTelegramMessage(
          onboardingMessage,
          [],
          undefined,
          userId
        );
      }, 2000);
    }
  },
};

// Handle one-time service payments (setup, training)
async function handleServicePayment(
  invoice: any, 
  userId: string, 
  userData: any, 
  totalAmount: number, 
  supabase: any, 
  telegramToken: string, 
  adminChatId: string, 
  serviceType?: string
) {
  const serviceName = invoice.metadata?.service_name as string || "–£—Å–ª—É–≥–∞";
  const serviceDetails = invoice.metadata?.service_details as string || "";

  logger.log(`[ServiceHandler] Processing service payment for user ${userId}, service: ${serviceType}, amount: ${totalAmount} XTR`);

  // Update user metadata to track purchased services
  const currentMetadata = userData.metadata || {};
  const purchasedServices = currentMetadata.purchased_services || [];
  
  const newService = {
    id: invoice.id,
    type: serviceType,
    name: serviceName,
    amount: totalAmount,
    purchased_at: new Date().toISOString(),
    details: serviceDetails,
    status: 'pending_activation'
  };

  purchasedServices.push(newService);

  const { error: updateError } = await supabase
    .from("users")
    .update({
      metadata: {
        ...currentMetadata,
        purchased_services: purchasedServices
      }
    })
    .eq("user_id", userId);

  if (updateError) {
    logger.error(`[ServiceHandler] Failed to update user ${userId} with service purchase:`, updateError);
    await sendTelegramMessage(
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –∑–∞ —É—Å–ª—É–≥—É "${serviceName}". –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoice.id}`,
      [], undefined, userId
    );
    return;
  }

  // Send confirmation messages
  let userServiceMessage = "";
  let adminServiceMessage = "";

  switch (serviceType) {
    case "quick_setup":
      userServiceMessage = `üöÄ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É—Å–ª—É–≥—É "–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞" –∑–∞ ${totalAmount} XTR. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞.`;
      adminServiceMessage = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –æ–ø–ª–∞—Ç–∏–ª –±—ã—Å—Ç—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –°—É–º–º–∞: ${totalAmount} XTR.`;
      break;
    case "team_training":
      userServiceMessage = `üë®‚Äçüè´ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É—Å–ª—É–≥—É "–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã" –∑–∞ ${totalAmount} XTR. –ù–∞—à —Ç—Ä–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.`;
      adminServiceMessage = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –æ–ø–ª–∞—Ç–∏–ª –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –°—É–º–º–∞: ${totalAmount} XTR.`;
      break;
    default:
      userServiceMessage = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥–∏ "${serviceName}"! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;
      adminServiceMessage = `üîî –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username || userId} (${userId}) –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥—É "${serviceName}". –°—É–º–º–∞: ${totalAmount} XTR.`;
  }

  await sendTelegramMessage(
    userServiceMessage,
    [],
    undefined,
    userId
  );

  await sendTelegramMessage(
    adminServiceMessage,
    [],
    undefined,
    adminChatId
  );

  logger.log(`[ServiceHandler] Service payment processed successfully for user ${userId}, service: ${serviceType}`);
}