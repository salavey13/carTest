import { WebhookHandler } from "./types";
import { sendTelegramMessage, notifyAdmin } from "../actions"; 
import { debugLogger } from "@/lib/debugLogger";
import { logger } from "@/lib/logger"; // This logger is for server-side/build logs
import { supabaseAdmin } from '@/hooks/supabase'; 
import type { Database } from "@/types/database.types"; 

type User = Database["public"]["Tables"]["users"]["Row"];
type Invoice = Database["public"]["Tables"]["invoices"]["Row"];

export const disableDummyModeHandler: WebhookHandler = {
  canHandle: (invoice: Invoice | null | undefined) => {
    const can = invoice?.type === "disable_dummy_mode";
    debugLogger.log(`[DisableDummyModeHandler] canHandle check: invoice.type=${invoice?.type}, result=${can}`);
    return can;
  },

  handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, baseUrl) => {
    const requesterUserId = userId;
    const requesterUsername = userData?.username || requesterUserId;

    debugLogger.log(`[DisableDummyModeHandler] Handling successful payment for disable_dummy_mode. Invoice ID: ${invoice.id}, Requester: ${requesterUserId}, Amount: ${totalAmount} XTR`);

    if (!invoice || !invoice.metadata) {
        logger.error(`[DisableDummyModeHandler] Critical error: Invoice or metadata missing for ID ${invoice?.id}. Cannot process.`);
        await notifyAdmin(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ ${invoice?.id} –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Dummy Mode.`);
        return; 
    }

    const targetUserId = invoice.metadata.target_user_id as string | undefined;
    const targetUsername = invoice.metadata.target_username as string | undefined; 

    if (!targetUserId) {
        logger.error(`[DisableDummyModeHandler] Critical error: target_user_id missing in metadata for invoice ${invoice.id}.`);
        await notifyAdmin(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç target_user_id –≤ –∏–Ω–≤–æ–π—Å–µ ${invoice.id} (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Dummy Mode). –ü–ª–∞—Ç–µ–∂ –æ—Ç ${requesterUsername}.`);
        await sendTelegramMessage(
            `‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º –ø–ª–∞—Ç–µ–∂–æ–º (${invoice.id}). –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Dummy Mode. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
            [], undefined, requesterUserId
        );
        return; 
    }

    logger.info(`[DisableDummyModeHandler] Processing disable dummy mode for target user: ${targetUserId} (requested by ${requesterUserId})`);

    try {
      const { data: targetUserData, error: fetchError } = await supabaseAdmin
        .from('users')
        .select('metadata, username, full_name') 
        .eq('user_id', targetUserId)
        .single(); 

      if (fetchError || !targetUserData) {
        logger.error(`[DisableDummyModeHandler] Failed to fetch target user ${targetUserId} data:`, fetchError);
         await notifyAdmin(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Dummy Mode! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ${invoice.id} (–∑–∞–ø—Ä–æ—Å–∏–ª ${requesterUsername}). –û—à–∏–±–∫–∞: ${fetchError?.message}`);
         await sendTelegramMessage(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Dummy Mode: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUsername || targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∏–Ω–≤–æ–π—Å ${invoice.id}).`,
             [], undefined, requesterUserId
         );
        return;
      }

      const currentMetadata = targetUserData.metadata || {};
      if (currentMetadata.is_dummy_mode_disabled_by_parent === true) {
          logger.warn(`[DisableDummyModeHandler] Target user ${targetUserId} already had Dummy Mode disabled. Metadata unchanged.`);
           await sendTelegramMessage(
               `üí° –†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserData.username || targetUserId} —É–∂–µ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω —Ä–∞–Ω–µ–µ. –í–∞—à –ø–ª–∞—Ç–µ–∂ (${invoice.id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`,
               [], undefined, requesterUserId
           );
           await notifyAdmin(`‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Dummy Mode –¥–ª—è ${targetUserData.username || targetUserId} (–∏–Ω–≤–æ–π—Å ${invoice.id}, –∑–∞–ø—Ä–æ—Å–∏–ª ${requesterUsername}). –°—Ç–∞—Ç—É—Å —É–∂–µ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω.`);
           return; 
      }

      const updatedMetadata = {
        ...currentMetadata,
        is_dummy_mode_disabled_by_parent: true, 
        disabled_by: requesterUserId, 
        disabled_at: new Date().toISOString(), 
      };

      const { error: updateError } = await supabaseAdmin
        .from("users")
        .update({ metadata: updatedMetadata })
        .eq("user_id", targetUserId);

      if (updateError) {
        logger.error(`[DisableDummyModeHandler] Failed to update metadata for target user ${targetUserId}:`, updateError);
        await notifyAdmin(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Dummy Mode! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserData.username || targetUserId} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ${invoice.id} (–∑–∞–ø—Ä–æ—Å–∏–ª ${requesterUsername}). –û—à–∏–±–∫–∞: ${updateError.message}`);
         await sendTelegramMessage(
            `‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Dummy Mode –¥–ª—è ${targetUserData.username || targetUserId} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–∏–Ω–≤–æ–π—Å ${invoice.id}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
             [], undefined, requesterUserId
         );
      } else {
        debugLogger.log(`[DisableDummyModeHandler] Target user ${targetUserId} metadata updated successfully. Dummy Mode permanently disabled.`);

        await sendTelegramMessage(
            `‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚ú® –†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **${targetUserData.username || targetUserId}** —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.`,
            [], 
            undefined,
            requesterUserId 
        );

        await notifyAdmin(
          `üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${requesterUsername} (${requesterUserId}) –æ–ø–ª–∞—Ç–∏–ª –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –†–µ–∂–∏–º–∞ –ü–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è **${targetUserData.username || targetUserId}**! –°—É–º–º–∞: ${totalAmount} XTR (–ò–Ω–≤–æ–π—Å: ${invoice.id}).`
        );
      }

    } catch (error) {
      logger.error(`[DisableDummyModeHandler] Unexpected error processing Disable Dummy Mode payment for invoice ${invoice.id}:`, error);
      await notifyAdmin(
        `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${invoice.id} (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Dummy Mode –¥–ª—è ${targetUserId}, –∑–∞–ø—Ä–æ—Å–∏–ª ${requesterUsername}). –î–µ—Ç–∞–ª–∏: ${error instanceof Error ? error.message : String(error)}`
      );
       await sendTelegramMessage(
           `üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ${invoice.id}. –ú—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∏—Ç—Å—è.`,
           [], undefined, requesterUserId
       );
    }
  },
};