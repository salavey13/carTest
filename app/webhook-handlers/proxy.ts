import { WebhookHandler } from "./types";
import { subscriptionHandler } from "./subscription";
import { carRentalHandler } from "./car-rental"; // Restored car rental handler
import { supportHandler } from "./support";
import { donationHandler } from "./donation";
import { scriptAccessHandler } from "./script-access";
import { inventoryScriptAccessHandler } from "./inventory-script-access";
import { selfDevBoostHandler } from "./selfdev-boost";
import { disableDummyModeHandler } from "./disable-dummy-mode";
import { protocardPurchaseHandler } from "./protocard-purchase-handler"; // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
// Import the specific supabaseAdmin instance from your hook
import { supabaseAdmin } from "@/hooks/supabase";
import { sendTelegramMessage } from "../actions"; // Import from main actions
import { logger } from "@/lib/logger";
import { getBaseUrl } from "@/lib/utils";

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID!;

// Ensure all required handlers are in this array
const handlers: WebhookHandler[] = [
  subscriptionHandler,
  carRentalHandler, 
  supportHandler,
  donationHandler,
  scriptAccessHandler,
  inventoryScriptAccessHandler,
  selfDevBoostHandler,
  disableDummyModeHandler,
  protocardPurchaseHandler, // –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
];

export async function handleWebhookProxy(update: any) {
  logger.log("Webhook Proxy: Received update", update);

  if (update.pre_checkout_query) {
    logger.log("Webhook Proxy: Handling pre_checkout_query", update.pre_checkout_query.id);
    try {
      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerPreCheckoutQuery`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ pre_checkout_query_id: update.pre_checkout_query.id, ok: true }),
      });
      logger.log("Webhook Proxy: Answered pre_checkout_query successfully");
    } catch (error) {
      logger.error("Webhook Proxy: Failed to answer pre_checkout_query:", error);
    }
    return; 
  }

  if (update.message?.successful_payment) {
    const payment = update.message.successful_payment;
    const userId = update.message.chat.id.toString(); 
    const { invoice_payload, total_amount } = payment;
    logger.log(`Webhook Proxy: Handling successful_payment. Payload: ${invoice_payload}, Amount: ${total_amount}, UserID: ${userId}`);

    try {
      const { data: invoice, error: invoiceError } = await supabaseAdmin
        .from("invoices")
        .select("*") // Select all fields including subscription_id and metadata
        .eq("id", invoice_payload)
        .maybeSingle(); 

      if (invoiceError) {
        logger.error(`Webhook Proxy: Error fetching invoice ${invoice_payload}:`, invoiceError);
        throw new Error(`Invoice fetch error: ${invoiceError.message}`);
      }

      if (!invoice) {
        logger.error(`Webhook Proxy: Invoice not found in DB for payload: ${invoice_payload}. Payment amount: ${total_amount}, User: ${userId}`);
        await sendTelegramMessage(
          `üö® –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ (${total_amount / 100} XTR) —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º payload: ${invoice_payload} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!`,
          [],
          undefined,
          ADMIN_CHAT_ID 
        );
        throw new Error(`Invoice not found for payload: ${invoice_payload}`);
      }

      if (invoice.status === 'paid') {
        logger.warn(`Webhook Proxy: Invoice ${invoice_payload} already marked as paid. Skipping processing.`);
        return; 
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ 'paid' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞,
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å.
      // –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —Ö–µ–Ω–¥–ª–µ—Ä —É–ø–∞–¥–µ—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π.
      // –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–µ—Å—å, –∞ —Ö–µ–Ω–¥–ª–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π.
      // –î–ª—è MVP –æ—Å—Ç–∞–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏–Ω–æ–≥–æ.
      // –ù–û! protocardPurchaseHandler –°–ê–ú –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å. –ü–æ—ç—Ç–æ–º—É –¥–ª—è –Ω–µ–≥–æ —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –¥–µ–ª–∞—é—Ç —ç—Ç–æ–≥–æ —è–≤–Ω–æ, –æ—Å—Ç–∞–≤–∏–º.
      // –î–ª—è –±–æ–ª—å—à–µ–π —á–∏—Å—Ç–æ—Ç—ã, –∫–∞–∂–¥—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–∞–º –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞.
      // –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ protocard, –æ–±–Ω–æ–≤–∏–º –∑–¥–µ—Å—å.
      if (!invoice.type?.startsWith('protocard_')) {
          const { error: updateInvoiceError } = await supabaseAdmin
            .from("invoices")
            .update({ status: "paid", updated_at: new Date().toISOString() })
            .eq("id", invoice_payload);

          if (updateInvoiceError) {
            logger.error(`Webhook Proxy: Error marking non-protocard invoice ${invoice_payload} as paid:`, updateInvoiceError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–∞–º–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
          } else {
            logger.log(`Webhook Proxy: Non-protocard invoice ${invoice_payload} marked as paid.`);
          }
      }


      const { data: userData, error: userError } = await supabaseAdmin
        .from("users")
        .select("*") 
        .eq("user_id", userId)
        .single(); 

      if (userError && userError.code !== 'PGRST116') { 
         logger.error(`Webhook Proxy: Error fetching user ${userId} for invoice ${invoice_payload}:`, userError);
      }
      if (!userData) {
          logger.warn(`Webhook Proxy: User ${userId} not found in DB for invoice ${invoice_payload}. Proceeding with basic info.`);
      } else {
          logger.log(`Webhook Proxy: Fetched user data for ${userId}:`, userData.username || 'No username');
      }

      const handler = handlers.find(h => h.canHandle(invoice, invoice_payload));

      if (handler) {
        logger.log(`Webhook Proxy: Found handler for invoice. Payload: ${invoice_payload}, DB Type: ${invoice.type}. Executing...`);
        const baseUrl = getBaseUrl(); 
        await handler.handle(
          invoice,
          userId,
          userData || { user_id: userId, metadata: {}, username: `tg_user_${userId}` }, // Provide default if userData is null
          total_amount, // –ü–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö XTR (–∫–∞–∫ –ø—Ä–∏—à–ª–æ –æ—Ç Telegram)
          supabaseAdmin,
          TELEGRAM_BOT_TOKEN, 
          ADMIN_CHAT_ID,
          baseUrl
        );
        logger.log(`Webhook Proxy: Handler for invoice ${invoice_payload} executed successfully.`);
      } else {
        logger.warn(`Webhook Proxy: No handler found for invoice. Payload: ${invoice_payload}, DB Type: ${invoice.type}.`);
        await sendTelegramMessage( 
          `‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂! Payload: ${invoice_payload}, –¢–∏–ø –≤ –ë–î: ${invoice.type || 'N/A'}, –°—É–º–º–∞: ${total_amount} XTR (min. units), –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`,
          [],
          undefined,
          ADMIN_CHAT_ID
        );
      }
    } catch (error) {
      logger.error("Webhook Proxy: Error processing successful_payment:", error);
      await sendTelegramMessage( 
        `üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞! Payload: ${update.message?.successful_payment?.invoice_payload || 'N/A'}, User: ${update.message?.chat?.id || 'N/A'}. –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        [],
        undefined,
        ADMIN_CHAT_ID
      );
    }
  } else {
    logger.log("Webhook Proxy: Received update that is not pre_checkout_query or successful_payment. Ignoring.", { type: Object.keys(update) });
  }
}