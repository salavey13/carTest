import { logger } from "@/lib/logger";
import { getArbitrageScannerSettings } from "@/app/elon/arbitrage_scanner_actions";
import { sendComplexMessage } from "../actions/sendComplexMessage";
import { supabaseAdmin } from "@/hooks/supabase";
import { Database } from "@/lib/database.types";

type MarketDataInsert = Database['public']['Tables']['market_data']['Insert'];

export async function seedMarketCommand(chatId: number, userId: string) {
  logger.info(`[SeedMarket] User ${userId} initiated market seeding.`);
  await sendComplexMessage(chatId, "üå± *–ó–∞—Å–µ–∏–≤–∞—é —Ä—ã–Ω–æ–∫...* –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", []);

  try {
    const settingsResult = await getArbitrageScannerSettings(userId);
    if (!settingsResult.success || !settingsResult.data) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–¥–∏–Ω–≥–∞.");
    }
    const { trackedPairs, enabledExchanges } = settingsResult.data;

    const seedPoints: MarketDataInsert[] = [];
    const basePrices: { [key: string]: number } = {
        'BTC/USDT': 68000,
        'ETH/USDT': 3500,
        'SOL/USDT': 150,
    };

    const now = new Date();

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –ø–∞—Ä–∞–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    const symbolsToDelete = trackedPairs.filter(p => p.includes('/USDT'));
    await supabaseAdmin.from('market_data').delete().in('symbol', symbolsToDelete);
    logger.info(`[SeedMarket] Cleared old data for symbols: ${symbolsToDelete.join(', ')}`);


    for (const pair of trackedPairs) {
      if (!pair.includes('/USDT')) continue;

      for (const exchange of enabledExchanges) {
        let currentPrice = basePrices[pair] || 100;
        
        // --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–°–¢–û–†–ò–ò (3 —Ç–æ—á–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–º) ---
        // –¢–æ—á–∫–∞ 3 (—Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è): –Ω–∞—á–∞–ª–æ —Ä–æ—Å—Ç–∞
        let price1 = currentPrice * (1 - Math.random() * 0.005); // -0.5% –æ—Ç –±–∞–∑—ã
        // –¢–æ—á–∫–∞ 2: –ø–∏–∫ —Ä–æ—Å—Ç–∞
        let price2 = price1 * (1 + Math.random() * 0.01); // +1% –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        // –¢–æ—á–∫–∞ 1 (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è): –Ω–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        let price3 = price2 * (1 - Math.random() * 0.003); // -0.3% –æ—Ç –ø–∏–∫–∞

        const prices = [price3, price2, price1];

        for (let i = 0; i < prices.length; i++) {
          const price = prices[i] * (1 + (Math.random() - 0.5) * 0.001); // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π —à—É–º –±–∏—Ä–∂–∏
          const timestamp = new Date(now.getTime() - i * 5 * 60 * 1000); // 0, 5, 10 –º–∏–Ω—É—Ç –≤ –ø—Ä–æ—à–ª–æ–º

          seedPoints.push({
            exchange,
            symbol: pair,
            last_price: price,
            bid_price: price * 0.9999,
            ask_price: price * 1.0001,
            volume: Math.random() * 20 + 1,
            is_simulated: false,
            timestamp: timestamp.toISOString(),
          });
        }
      }
    }
    
    if (seedPoints.length === 0) {
      throw new Error("–ù–µ—Ç –ø–∞—Ä –∏–ª–∏ –±–∏—Ä–∂ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }

    const { error } = await supabaseAdmin.from('market_data').insert(seedPoints);
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`);
    }

    await sendComplexMessage(chatId, `‚úÖ *–†—ã–Ω–æ–∫ –∑–∞—Å–µ—è–Ω!* –°–æ–∑–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ ${seedPoints.length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—é.`, []);

  } catch (error) {
    logger.error("[SeedMarket] Error seeding market:", error);
    await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ —Å–∏–¥–∏–Ω–≥–∞: ${error.message}`, []);
  }
}