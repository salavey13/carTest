import { sendTelegramMessage } from "@/app/actions";
import { logger } from "@/lib/logger";
import { fetchLeadsForDashboard } from "@/app/leads/actions";
import type { LeadRow } from "@/app/leads/actions";

function formatLead(lead: LeadRow): string {
    const title = lead.client_name ? `${lead.client_name}` : (lead.project_description || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').substring(0, 40) + '...';
    const budget = lead.budget_range ? ` | ${lead.budget_range}` : '';
    const link = lead.lead_url ? `\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ –ª–∏–¥—É](${lead.lead_url})` : '';
    return `*${title}* (–°—Ç–∞—Ç—É—Å: ${lead.status || 'new'})${budget}${link}`;
}

export async function leadsCommand(chatId: number, userId: number) {
    logger.info(`[Leads Command] User ${userId} triggered the /leads command.`);
    await sendTelegramMessage("üì° *–°–µ—Ç–µ–≤–æ–π –î–æ–∑–æ—Ä:* –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–≤–æ–¥–∫—É –ø–æ —Å–∞–º—ã–º –≥–æ—Ä—è—á–∏–º –ª–∏–¥–∞–º...", [], undefined, chatId.toString());
    
    try {
        const { data: leads, error } = await fetchLeadsForDashboard(String(userId), 'new');

        if (error) {
            throw new Error(error);
        }

        if (!leads || leads.length === 0) {
            await sendTelegramMessage("üì™ –í—Ö–æ–¥—è—â–∏–µ –ø—É—Å—Ç—ã. –ù–æ–≤—ã—Ö –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", [], undefined, chatId.toString());
            return;
        }

        const top5Leads = leads.slice(0, 5);
        const messageLines = top5Leads.map(lead => formatLead(lead));
        const finalMessage = "üî• *–¢–æ–ø-5 –ù–æ–≤—ã—Ö –õ–∏–¥–æ–≤:*\n\n" + messageLines.join('\n\n');

        await sendTelegramMessage(finalMessage, [], undefined, chatId.toString(), undefined, "Markdown");

    } catch (error) {
        logger.error("[Leads Command] Error fetching leads:", error);
        await sendTelegramMessage("üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –ª–∏–¥–∞–º. –¶–û–î –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.", [], undefined, chatId.toString());
    }
}