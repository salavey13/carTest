import { logger } from "@/lib/logger";
import { getArbitrageScannerSettings } from "@/app/elon/arbitrage_scanner_actions";
import { runGodModeSimulation } from "@/app/elon/arbitrage_god_mode_actions";
import { sendComplexMessage } from "../actions/sendComplexMessage";
import { supabaseAdmin } from "@/hooks/supabase";
import type { GodModeDeck, GodModeSimulationResult } from "@/app/elon/arbitrage_scanner_types";

export async function simGodCommand(chatId: number, userId: string, args: string[]) {
  const burstAmount = parseInt(args[0]) || 5000;
  const botUsername = process.env.BOT_USERNAME || 'oneSitePlsBot';
  logger.info(`[sim_god] User ${userId} requested God-Mode deck. Burst: $${burstAmount}`);
  
  await sendComplexMessage(chatId, "üëë *God Mode: ON.* –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–≤–∞–Ω—Ç–æ–≤—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏...", []);

  try {
    const settingsResult = await getArbitrageScannerSettings(userId);
    if (!settingsResult.success || !settingsResult.data) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const simResult = await runGodModeSimulation(settingsResult.data, burstAmount);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è real-time –ø–æ–¥–ø–∏—Å–∫–∏
    const { error: insertError } = await supabaseAdmin
        .from('god_mode_simulations')
        .insert({
            user_id: userId,
            simulation_result: simResult as unknown as any, // Cast to any to satisfy Supabase
        });

    if (insertError) {
        logger.error(`[sim_god] Failed to insert simulation result for user ${userId}`, insertError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç –æ—Ç—á–µ—Ç.
    } else {
        logger.info(`[sim_god] Successfully broadcasted simulation ${simResult.simulationId} for user ${userId}`);
    }

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π scoreboard –∏–∑ 'users' –ø–æ 'user_id'
    const { data: userProfile } = await supabaseAdmin.from('users').select('metadata').eq('user_id', userId).single();
    const deck: GodModeDeck = userProfile?.metadata?.god_mode_deck || { balances: {}, total_profit_usd: 0 };
    
    let scoreboardText = "";
    if (Object.keys(deck.balances).length > 0) {
      scoreboardText = "*Scoreboard (Virtual Net Worth):*\n" +
        Object.entries(deck.balances).map(([asset, amount]) => ` ‚Ä¢ \`${asset}\`: ${amount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 8})}`).join('\n') +
        `\n*Total Profit:* $${deck.total_profit_usd.toFixed(2)}`;
    } else {
      scoreboardText = "*Scoreboard:* –ü—É—Å—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π `/sim_go` –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.";
    }

    let opportunitiesText = "*TOP-3 ALPHA SHIFTS:*\n";
    if (simResult.opportunities.length > 0) {
      opportunitiesText += simResult.opportunities.slice(0, 3).map((op, i) => 
        `${i+1}. **\`${op.asset}\` | +${op.spreadPercent.toFixed(2)}% | +$${op.potentialProfitUSD.toFixed(2)}**\n` +
        `     *BUY:* ${op.buyAt.exchange} @ $${op.buyAt.price.toFixed(2)}\n` +
        `     *SELL:* ${op.sellAt.exchange} @ $${op.sellAt.price.toFixed(2)}`
      ).join('\n\n');
      if (simResult.opportunities.length > 3) {
        opportunitiesText += `\n...–∏ –µ—â–µ ${simResult.opportunities.length - 3} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.`;
      }
    } else {
      opportunitiesText = "*–†—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–µ–Ω. –ê–ª—å—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.*";
    }

    // –°–æ–∑–¥–∞–µ–º Deep Link
    const vizLink = `https://t.me/${botUsername}/app?startapp=viz_${simResult.simulationId}`;

    const finalMessage = `üëë *GOD-MODE DECK (Burst: $${burstAmount.toLocaleString()})*\n\n` +
                         `*Market Vibe Index (Juiciness): ${simResult.marketJuiciness}/100* ${simResult.marketJuiciness > 70 ? 'üî•' : 'üíß'}\n\n` +
                         `${scoreboardText}\n\n---\n\n${opportunitiesText}\n\n---\n` +
                         `*–ò–ù–°–¢–†–£–ö–¶–ò–Ø:*\n`+
                         `–≠—Ç–æ —Å–Ω–∏–º–æ–∫ —Ä—ã–Ω–∫–∞. –ß—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å "–≤–∑—Ä—ã–≤" –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π \`/sim_go ${burstAmount}\`\n\n` +
                         `[üöÄ –û—Ç–∫—Ä—ã—Ç—å 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ Voxel Sandbox](${vizLink})`;

    await sendComplexMessage(chatId, finalMessage, []);
  } catch (error) {
    const err = error as Error;
    logger.error("[sim_god] Error processing command:", err);
    await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –ë–æ–≥–∞: ${err.message}`, []);
  }
}