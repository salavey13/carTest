"use server";

import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage } from "../actions/sendComplexMessage";

function escapeTelegramMarkdown(text: string): string {
    if (!text) return "";
    const charsToEscape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    return text.replace(new RegExp(`([${charsToEscape.join('\\')}])`, 'g'), '\\$1');
}

export async function shiftCommand(chatId: number, userId: string, username?: string, action?: string) {
    logger.info(`[Shift Command EXEC] User ${userId}, Action: ${action || 'request_keyboard'}`);
    
    try {
        // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ê–ö–¢–ò–í–ù–´–ú —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        const { data: crewMember, error: crewError } = await supabaseAdmin
            .from("crew_members")
            .select("crew_id, live_status, crews(owner_id, name)")
            .eq("user_id", userId)
            .eq("membership_status", "active") // –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–¢–ê–¢–£–°
            .single();

        if (crewError || !crewMember) {
            await sendComplexMessage(chatId, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç–∫–∏–ø–∞–∂–∞.");
            return;
        }

        const { crews: crew, live_status } = crewMember;
        if (!crew) throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–∏–ø–∞–∂–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId}`);
        
        const { owner_id: ownerId, name: crewName } = crew;

        // –®–ê–ì 2: –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ñ–ò–í–û–ì–û –°–¢–ê–¢–£–°–ê
        if (!action) {
            let buttons;
            if (live_status === 'offline') {
                buttons = [[{ text: "‚úÖ –ù–∞—á–∞—Ç—å –°–º–µ–Ω—É" }]];
            } else if (live_status === 'online') {
                buttons = [[{ text: "üèçÔ∏è –ù–∞ –ë–∞–π–∫–µ" }], [{ text: "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –°–º–µ–Ω—É" }]];
            } else { // riding
                buttons = [[{ text: "üè¢ –í –ë–æ–∫—Å–µ" }], [{ text: "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –°–º–µ–Ω—É" }]];
            }
            await sendComplexMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons, { keyboardType: 'reply' });
            return;
        }

        // –®–ê–ì 3: –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å—Ç—å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        let updateData: any = {};
        let userMessage = "";
        let ownerMessage = "";
        
        const safeUsername = escapeTelegramMarkdown(username || 'user');
        const safeCrewName = escapeTelegramMarkdown(crewName);

        switch (action) {
            case 'clock_in':
                if (live_status === 'offline') {
                    updateData = { live_status: 'online' };
                    userMessage = "‚úÖ *–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞\\.* –í—Ä–µ–º—è –ø–æ—à–ª–æ\\.";
                    ownerMessage = `üü¢ @${safeUsername} –Ω–∞—á–∞–ª —Å–º–µ–Ω—É –≤ —ç–∫–∏–ø–∞–∂–µ *'${safeCrewName}'*\\.`;
                }
                break;
            case 'clock_out':
                 if (live_status !== 'offline') {
                    updateData = { live_status: 'offline', last_location: null };
                    userMessage = `‚úÖ *–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\.*\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞\\!`;
                    ownerMessage = `üî¥ @${safeUsername} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –≤ —ç–∫–∏–ø–∞–∂–µ *'${safeCrewName}'*\\.`;
                }
                break;
            case 'toggle_ride':
                if (live_status !== 'offline') {
                    const newStatus = live_status === 'online' ? 'riding' : 'online';
                    updateData = { live_status: newStatus };
                    if (newStatus === 'riding') {
                        userMessage = "üèçÔ∏è –°—Ç–∞—Ç—É—Å: *–ù–∞ –ë–∞–π–∫–µ*\\. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ —ç–∫–∏–ø–∞–∂–∞\\.";
                    } else { // 'online'
                        updateData.last_location = null;
                        userMessage = "üè¢ –°—Ç–∞—Ç—É—Å: *–û–Ω–ª–∞–π–Ω*\\. –°–Ω–æ–≤–∞ –≤ –±–æ–∫—Å–µ, —Å –∫–∞—Ä—Ç—ã —É–±—Ä–∞–Ω—ã\\.";
                    }
                    ownerMessage = `‚öôÔ∏è –°—Ç–∞—Ç—É—Å @${safeUsername} –≤ *'${safeCrewName}'*: ${newStatus === 'riding' ? "–ù–∞ –ë–∞–π–∫–µ" : "–û–Ω–ª–∞–π–Ω"}`;
                }
                break;
        }
        
        // –®–ê–ì 4: –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if (Object.keys(updateData).length > 0) {
            await supabaseAdmin.from("crew_members").update(updateData).eq("user_id", userId).eq("membership_status", "active");
            
            await sendComplexMessage(chatId, userMessage, [], { removeKeyboard: true, parseMode: 'MarkdownV2' });

            if (ownerId && ownerId !== userId) {
                await sendComplexMessage(ownerId, ownerMessage, [], { parseMode: 'MarkdownV2' });
            }
        } else {
            await sendComplexMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω).", [], { removeKeyboard: true });
        }

    } catch (e: any) {
        logger.error(`[Shift Command FATAL] for user ${userId}:`, e);
        await sendComplexMessage(chatId, `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–º–µ–Ω: ${escapeTelegramMarkdown(e.message)}`);
    }
}