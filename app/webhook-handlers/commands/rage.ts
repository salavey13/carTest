import { sendTelegramMessage } from "@/app/actions";
import { logger } from "@/lib/logger";
import { fetchArbitrageOpportunities } from "@/app/elon/arbitrage_scanner_actions";
import type { ArbitrageOpportunity, TwoLegArbitrageOpportunity, ThreeLegArbitrageOpportunity } from "@/app/elon/arbitrage_scanner_types";

// –•–µ–ª–ø–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function formatOpportunity(op: ArbitrageOpportunity): string {
    const profit = `${op.profitPercentage.toFixed(3)}% ($${op.potentialProfitUSD.toFixed(2)})`;
    if (op.type === '2-leg') {
        const twoLegOp = op as TwoLegArbitrageOpportunity;
        return `*2-Leg:* ${twoLegOp.currencyPair}\n` +
               `  - –ü–æ–∫—É–ø–∫–∞: *${twoLegOp.buyExchange}* @ ${twoLegOp.buyPrice.toFixed(4)}\n` +
               `  - –ü—Ä–æ–¥–∞–∂–∞: *${twoLegOp.sellExchange}* @ ${twoLegOp.sellPrice.toFixed(4)}\n` +
               `  - üî• *–ü—Ä–æ—Ñ–∏—Ç: ${profit}*`;
    }
    const threeLegOp = op as ThreeLegArbitrageOpportunity;
    return `*3-Leg:* ${threeLegOp.currencyPair} –Ω–∞ *${threeLegOp.exchange}*\n` +
           `  - üî• *–ü—Ä–æ—Ñ–∏—Ç: ${profit}*`;
}

export async function rageCommand(chatId: number, userId: number) {
    logger.info(`[Rage Command] User ${userId} triggered the /rage command.`);
    await sendTelegramMessage("‚ö°Ô∏è *–†–µ–∂–∏–º –Ø—Ä–æ—Å—Ç–∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!* –ò—â—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ...", [], undefined, chatId.toString());

    try {
        const { opportunities } = await fetchArbitrageOpportunities(String(userId));

        if (!opportunities || opportunities.length === 0) {
            await sendTelegramMessage("üßò‚Äç‚ôÇÔ∏è –†—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–µ–Ω. –ó–Ω–∞—á–∏–º—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", [], undefined, chatId.toString());
            return;
        }

        const sortedOps = opportunities.sort((a, b) => b.profitPercentage - a.profitPercentage);
        const top3 = sortedOps.slice(0, 3);

        const messageLines = top3.map(op => formatOpportunity(op));
        const finalMessage = "üèÜ *–¢–æ–ø-3 –ì–æ—Ä—è—á–∏—Ö –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:*\n\n" + messageLines.join('\n\n');

        await sendTelegramMessage(finalMessage, [], undefined, chatId.toString());

    } catch (error) {
        logger.error("[Rage Command] Error fetching arbitrage opportunities:", error);
        await sendTelegramMessage("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", [], undefined, chatId.toString());
    }
}