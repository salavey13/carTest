import { logger } from "@/lib/logger";
import { fetchUserCyberFitnessProfile } from "@/app/cyberfitness/actions"; // CORRECTED IMPORT
import type { CyberFitnessProfile } from "@/app/cyberfitness/actions";
import { sendComplexMessage, KeyboardButton } from "../actions/sendComplexMessage";

function formatProfileStats(profile: CyberFitnessProfile): string {
    const stats = [
        `‚ö°Ô∏è *KiloVibes:* ${profile.kiloVibes.toLocaleString()}`,
        `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${profile.level}`,
        `üß† *Deep Work:* ${profile.focusTimeHours.toFixed(1)} —á.`,
        `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* ${profile.achievements.length}`
    ];
    return stats.join('\n');
}

export async function profileCommand(chatId: number, userId: number, username:string | undefined) {
  logger.info(`[Profile Command] User ${userId} (${username}) triggered the /profile command.`);
  
  const botUsername = process.env.BOT_USERNAME || 'oneSitePlsBot';
  const profileLink = `https://t.me/${botUsername}/app?startapp=profile`;
  const settingsLink = `https://t.me/${botUsername}/app?startapp=settings`;

  try {
    // Using the new, safe, server-side function
    const { success, data: profile, error } = await fetchUserCyberFitnessProfile(String(userId));

    if (!success || !profile) {
        logger.warn(`[Profile Command] Could not fetch profile for user ${userId}. Error: ${error}. Sending default message.`);
        const defaultMessage = `–ê–≥–µ–Ω—Ç, —Ç–≤–æ–π –∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É. –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–∫–∏.`;
        const buttons: KeyboardButton[][] = [[{ text: "üìä –û—Ç–∫—Ä—ã—Ç—å –ü—Ä–æ—Ñ–∏–ª—å", url: profileLink }]];
        await sendComplexMessage(chatId, defaultMessage, buttons, { keyboardType: 'inline' });
        return;
    }

    const statsMessage = formatProfileStats(profile);
    const fullMessage = `*–ü—Ä–æ—Ñ–∏–ª—å –ê–≥–µ–Ω—Ç–∞: @${username || userId}*\n\n` +
                        `${statsMessage}\n\n` +
                        `–ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞—Ä—Å–µ–Ω–∞–ª—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.`;

    const buttons: KeyboardButton[][] = [
        [
            { text: "üìä –û—Ç–∫—Ä—ã—Ç—å –ü—Ä–æ—Ñ–∏–ª—å", url: profileLink },
            { text: "‚öôÔ∏è –ö –ù–∞—Å—Ç—Ä–æ–π–∫–∞–º", url: settingsLink }
        ]
    ];
    
    await sendComplexMessage(chatId, fullMessage, buttons, { keyboardType: 'inline' });

  } catch (e) {
      logger.error(`[Profile Command] Critical error for user ${userId}:`, e);
      const errorMessage = `üö® –ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
      const buttons: KeyboardButton[][] = [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –ü—Ä–æ—Ñ–∏–ª—å (–∞–≤–∞—Ä–∏–π–Ω–æ)", url: profileLink }]];
      await sendComplexMessage(chatId, errorMessage, buttons, { keyboardType: 'inline' });
  }
}