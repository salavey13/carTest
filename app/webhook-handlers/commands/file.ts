import { sendTelegramMessage } from "@/app/actions";
import { logger } from "@/lib/logger";
import { fetchRepoTree } from "@/app/actions_github/actions";
import { sendComplexMessage } from "../actions/sendComplexMessage";

const REPO_URL = process.env.NEXT_PUBLIC_REPO_URL || "https://github.com/salavey13/carTest";

async function sendBatchedCode(chatId: number, content: string, path: string) {
    const MAX_LENGTH = 4096;
    const codeBlockDelimiter = "```";
    const firstLine = `\`${path}\`\n\n`;

    // Split content by lines to avoid breaking code mid-line
    const lines = content.split('\n');
    let currentBatch = "";

    for (const line of lines) {
        if (currentBatch.length + line.length + codeBlockDelimiter.length * 2 + firstLine.length < MAX_LENGTH) {
            currentBatch += line + '\n';
        } else {
            // Send the previous batch and start a new one
            await sendComplexMessage(chatId, `${codeBlockDelimiter}typescript\n${currentBatch}${codeBlockDelimiter}`, []);
            currentBatch = line + '\n';
        }
    }
    
    // Send the last batch
    if (currentBatch) {
        await sendComplexMessage(chatId, `${firstLine}${codeBlockDelimiter}typescript\n${currentBatch}${codeBlockDelimiter}`, []);
    }
}


export async function fileCommand(chatId: number, userId: number, args: string[]) {
    logger.info(`[File Command] User ${userId} triggered /file with args: [${args.join(', ')}]`);
    
    if (args.length === 0) {
        await sendComplexMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/file help` –∏–ª–∏ `/file actions.ts`.", []);
        return;
    }

    const searchTerm = args.join(' ').toLowerCase();
    await sendComplexMessage(chatId, `üîé –ò—â—É —Ñ–∞–π–ª –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É \`${searchTerm}\`...`, []);

    try {
        const treeResult = await fetchRepoTree(REPO_URL);

        if (!treeResult.success || !treeResult.tree) {
            throw new Error(treeResult.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.");
        }

        const foundFiles = treeResult.tree
            .filter(item => item.type === 'blob' && item.path?.toLowerCase().includes(searchTerm))
            .slice(0, 5); // Limit to 5 results to avoid spam

        if (foundFiles.length === 0) {
            await sendComplexMessage(chatId, `ü§∑‚Äç‚ôÇÔ∏è –§–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \`${searchTerm}\` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.`, []);
            return;
        }

        if (foundFiles.length > 1) {
            const fileList = foundFiles.map((file, index) => `${index + 1}. \`${file.path}\``).join('\n');
            await sendComplexMessage(chatId, `üéØ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤. –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π:\n\n${fileList}`, []);
            return;
        }

        const file = foundFiles[0];
        const { owner, repo } = treeResult;
        const rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/main/${file.path}`;

        await sendComplexMessage(chatId, `‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω! –ó–∞–≥—Ä—É–∂–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...\n\n\`${file.path}\`\n\n[Raw](${rawUrl})`, []);

        const response = await fetch(rawUrl);
        if (!response.ok) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞. –°—Ç–∞—Ç—É—Å: ${response.status}`);
        }
        const content = await response.text();
        
        await sendBatchedCode(chatId, content, file.path!);
        
        const studioLink = `t.me/${process.env.BOT_USERNAME || 'oneSitePlsBot'}/app`;
        await sendComplexMessage(chatId, `–ì–æ—Ç–æ–≤–æ! –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å [—Å—Ç—É–¥–∏—é](${studioLink}) –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã.`, []);

    } catch (error) {
        logger.error("[File Command] Error processing /file command:", error);
        const errorMessage = error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";
        await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n\`${errorMessage}\``, []);
    }
}