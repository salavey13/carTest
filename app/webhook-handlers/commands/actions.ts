"use server";

import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage, KeyboardButton } from "../actions/sendComplexMessage";
import { sosCommand } from './sos';
import { confirmVehiclePickup, confirmVehicleReturn } from '@/app/rentals/actions';
import { sendTelegramInvoice } from "@/app/actions";

const buttonLabels: Record<string, string> = {
    "action_upload-photo-start": "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ '–î–û'",
    "action_upload-photo-end": "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ '–ü–û–°–õ–ï'",
    "action_confirm-pickup": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ",
    "action_confirm-return": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç",
    "action_drop-anywhere": "Ê£Ñ –Ø —Å–≤–∞–ª–∏–≤–∞—é (200 XTR)",
    "sos": "üÜò SOS",
    "cancel": "‚ùå –ó–∞–∫—Ä—ã—Ç—å"
};

async function getRentalContext(userId: string): Promise<{rentalId: string, role: 'renter' | 'owner', status: string} | null> {
    const { data, error } = await supabaseAdmin
        .from('rentals')
        .select('rental_id, user_id, owner_id, status')
        .or(`user_id.eq.${userId},owner_id.eq.${userId}`)
        .in('status', ['pending_confirmation', 'confirmed', 'active'])
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
    
    if (error || !data) {
        if (error && error.code !== 'PGRST116') logger.error(`[actionsCommand] Error fetching rental context for ${userId}`, error);
        return null;
    }
    
    return { rentalId: data.rental_id, role: data.user_id === userId ? 'renter' : 'owner', status: data.status };
}


export async function actionsCommand(chatId: number, userId: string) {
    logger.info(`[actionsCommand] User ${userId} initiated /actions command.`);
    
    const context = await getRentalContext(userId);

    if (!context) {
        await sendComplexMessage(chatId, "ü§î –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.", [], { removeKeyboard: true });
        return;
    }

    const { data: events, error } = await supabaseAdmin.from('events').select('type, status').eq('rental_id', context.rentalId).order('created_at', { ascending: true });
    if (error) {
        logger.error(`[actionsCommand] Error fetching events for rental ${context.rentalId}`, error);
        await sendComplexMessage(chatId, "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã.", [], { removeKeyboard: true });
        return;
    }

    const buttons: KeyboardButton[][] = [];
    const eventTypes = new Set(events.map(e => e.type));

    if (context.role === 'renter') {
        if (context.status === 'active') {
            if (!eventTypes.has('photo_end')) buttons.push([{ text: buttonLabels["action_upload-photo-end"] }]);
            buttons.push([{ text: buttonLabels["action_drop-anywhere"] }]);
            buttons.push([{ text: buttonLabels["sos"] }]);
        } else if (!eventTypes.has('photo_start')) {
            buttons.push([{ text: buttonLabels["action_upload-photo-start"] }]);
        }
    }

    if (context.role === 'owner') {
        const hasCompletedStartPhoto = events.some(e => e.type === 'photo_start' && e.status === 'completed');
        const hasPickupConfirmed = events.some(e => e.type === 'pickup_confirmed');
        const hasCompletedEndPhoto = events.some(e => e.type === 'photo_end' && e.status === 'completed');

        if (hasCompletedStartPhoto && !hasPickupConfirmed) buttons.push([{ text: buttonLabels["action_confirm-pickup"] }]);
        if (hasCompletedEndPhoto) buttons.push([{ text: buttonLabels["action_confirm-return"] }]);
    }
    
    buttons.push([{ text: buttonLabels["cancel"] }]);

    if (buttons.length > 1) {
        await sendComplexMessage(chatId, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons, { keyboardType: 'reply' });
    } else {
        await sendComplexMessage(chatId, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.", [], { removeKeyboard: true });
    }
}

export async function handleActionChoice(chatId: number, userId: string, choice: string) {
    logger.info(`[handleActionChoice] User ${userId} chose action: "${choice}"`);
    
    const context = await getRentalContext(userId);
    if (!context) {
        await sendComplexMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", [], { removeKeyboard: true });
        return;
    }
    
    const actionKey = Object.keys(buttonLabels).find(key => buttonLabels[key] === choice);

    switch(actionKey) {
        case "action_upload-photo-start":
        case "action_upload-photo-end":
            const photoType = actionKey.endsWith('start') ? 'start' : 'end';
            await supabaseAdmin.from('user_states').upsert({ user_id: userId, state: 'awaiting_rental_photo', context: { rental_id: context.rentalId, photo_type: photoType }});
            await sendComplexMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç. –Ø –∂–¥—É...`, [], { removeKeyboard: true });
            break;
        case "action_confirm-pickup":
            await confirmVehiclePickup(context.rentalId, userId);
            await sendComplexMessage(chatId, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!", [], { removeKeyboard: true });
            break;
        case "action_confirm-return":
            await confirmVehicleReturn(context.rentalId, userId);
            await sendComplexMessage(chatId, "–í–æ–∑–≤—Ä–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", [], { removeKeyboard: true });
            break;
        case "action_drop-anywhere":
            await sendTelegramInvoice(String(chatId), "Hustle: Drop Anywhere", "–û–ø–ª–∞—Ç–∞ —Å–±–æ—Ä–∞ –∑–∞ –≤—ã–∑–æ–≤ —ç–∫–∏–ø–∞–∂–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.", `hustle_dropoff_${context.rentalId}_${Date.now()}`, 20000, 0); // 200 XTR
            await sendComplexMessage(chatId, "–°—á–µ—Ç –Ω–∞ 200 XTR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", [], { removeKeyboard: true });
            break;
        case "sos":
            await sosCommand(chatId, userId);
            break;
        case "cancel":
            await sendComplexMessage(chatId, "–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–∫—Ä—ã—Ç–æ.", [], { removeKeyboard: true });
            break;
        default:
             await sendComplexMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", [], { removeKeyboard: true });
            break;
    }
}