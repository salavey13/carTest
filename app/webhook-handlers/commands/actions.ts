"use server";

import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage, KeyboardButton } from "../actions/sendComplexMessage";
import { sosCommand } from './sos';

// Helper to determine the current state and available actions
async function getRentalContext(userId: string): Promise<{rentalId: string, role: 'renter' | 'owner'} | null> {
    const { data, error } = await supabaseAdmin
        .from('rentals')
        .select('rental_id, user_id, owner_id, status')
        .or(`user_id.eq.${userId},owner_id.eq.${userId}`)
        .in('status', ['pending_confirmation', 'confirmed', 'active'])
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
    
    if (error || !data) {
        if (error) logger.error(`[actionsCommand] Error fetching rental context for ${userId}`, error);
        return null;
    }
    
    return {
        rentalId: data.rental_id,
        role: data.user_id === userId ? 'renter' : 'owner'
    };
}


export async function actionsCommand(chatId: number, userId: string) {
    logger.info(`[actionsCommand] User ${userId} initiated /actions command.`);
    
    const context = await getRentalContext(userId);

    if (!context) {
        await sendComplexMessage(chatId, "ü§î –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.", [], { removeKeyboard: true });
        return;
    }

    const { data: events, error } = await supabaseAdmin
        .from('events')
        .select('type, status')
        .eq('rental_id', context.rentalId)
        .order('created_at', { ascending: true });

    if (error) {
        logger.error(`[actionsCommand] Error fetching events for rental ${context.rentalId}`, error);
        await sendComplexMessage(chatId, "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã.", [], { removeKeyboard: true });
        return;
    }

    const buttons: KeyboardButton[][] = [];
    const eventTypes = new Set(events.map(e => e.type));

    if (context.role === 'renter') {
        if (!eventTypes.has('photo_start')) buttons.push([{ text: "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ '–î–û'" }]);
        if (eventTypes.has('pickup_confirmed') && !eventTypes.has('photo_end')) buttons.push([{ text: "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ '–ü–û–°–õ–ï'" }]);
        buttons.push([{ text: "üÜò SOS" }]);
    }

    if (context.role === 'owner') {
        const lastPendingEvent = events.filter(e => e.status === 'pending').pop();
        if (lastPendingEvent?.type === 'photo_start') buttons.push([{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ" }]);
        if (lastPendingEvent?.type === 'photo_end') buttons.push([{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç" }]);
    }
    
    buttons.push([{ text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å" }]);

    if (buttons.length > 1) { // More than just the "Close" button
        await sendComplexMessage(chatId, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons, { keyboardType: 'reply' });
    } else {
        await sendComplexMessage(chatId, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.", [], { removeKeyboard: true });
    }
}

export async function handleActionChoice(chatId: number, userId: string, choice: string) {
    logger.info(`[handleActionChoice] User ${userId} chose action: "${choice}"`);
    
    const context = await getRentalContext(userId);
    if (!context) {
        await sendComplexMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", [], { removeKeyboard: true });
        return;
    }

    let actionResponse = "–î–µ–π—Å—Ç–≤–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...";
    
    switch(choice) {
        case "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ '–î–û'":
        case "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ '–ü–û–°–õ–ï'":
            actionResponse = `–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ä–µ–Ω–¥—ã.`;
            break;
        case "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ":
            actionResponse = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ... "; // Placeholder
            break;
        case "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç":
            actionResponse = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤–æ–∑–≤—Ä–∞—Ç..."; // Placeholder
            break;
        case "üÜò SOS":
            await sosCommand(chatId, userId);
            return; // SOS has its own flow
        case "‚ùå –ó–∞–∫—Ä—ã—Ç—å":
            actionResponse = "–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–∫—Ä—ã—Ç–æ.";
            break;
        default:
            actionResponse = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.";
            break;
    }
    
    await sendComplexMessage(chatId, actionResponse, [], { removeKeyboard: true });
}