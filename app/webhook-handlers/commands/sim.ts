import { logger } from "@/lib/logger";
import { getArbitrageScannerSettings } from "@/app/elon/arbitrage_scanner_actions";
import { executeQuantumFluctuation } from "@/app/elon/arbitrage_god_mode_actions";
import { sendComplexMessage } from "../actions/sendComplexMessage";

export async function simCommand(chatId: number, userId: string, args: string[]) {
  const burstAmount = parseInt(args[0]) || 5000;
  logger.info(`[sim] User ${userId} triggered OBSERVER EFFECT. Burst: $${burstAmount}`);
  
  await sendComplexMessage(chatId, `üî¨ *–ù–∞–±–ª—é–¥–µ–Ω–∏–µ...* –í—ã—á–∏—Å–ª—è—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å –æ–±—ä–µ–º–æ–º $${burstAmount.toLocaleString()}...`, []);

  try {
    const settingsResult = await getArbitrageScannerSettings(userId);
    if (!settingsResult.success || !settingsResult.data) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const result = await executeQuantumFluctuation(settingsResult.data, burstAmount);
    
    let report = `*–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:*\n\n` +
                 `–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ *+$${result.totalProfit.toFixed(2)}*. ` +
                 `–≠—Ö–æ —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∫–∞–Ω—å —Ä—ã–Ω–∫–∞. –í–∞—à –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.\n\n` +
                 `*–¢–û–ü-3 –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô:*\n`;

    if (result.opportunities.length > 0) {
        report += result.opportunities.slice(0, 3).map(op => 
            ` ‚Ä¢ **\`${op.asset}\`**: +${op.spreadPercent.toFixed(2)}% | –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +$${op.potentialProfitUSD.toFixed(2)}`
        ).join('\n');
    } else {
        report += `–†—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–µ–Ω. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
    }

    await sendComplexMessage(chatId, report, []);
  } catch (error) {
    logger.error("[sim] Error processing command:", error);
    await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ –ù–∞–±–ª—é–¥–µ–Ω–∏—è: ${error.message}`, []);
  }
}