import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage } from "../actions/sendComplexMessage";
import type { GodModeDeck } from "@/app/elon/arbitrage_scanner_types";

interface LeaderboardEntry {
  rank: number;
  username: string;
  totalProfit: number;
  usdtBalance: number;
  isCurrentUser: boolean;
}

export async function leaderboardCommand(chatId: number, userId: string) {
  logger.info(`[Leaderboard] User ${userId} requested leaderboard.`);
  await sendComplexMessage(chatId, "üèÜ *–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å–∫—É –ø–æ—á–µ—Ç–∞...* –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –≤—Å–µ–ª–µ–Ω–Ω–æ–π...", []);

  try {
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'users' ---
    const { data: users, error } = await supabaseAdmin
      .from('users')
      .select('user_id, username, metadata')
      .neq('metadata', null); // –û—Ç—Å–µ–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 'users': ${error.message}`);
    }

    if (!users || users.length === 0) {
      await sendComplexMessage(chatId, "üï≥Ô∏è *–ü—É—Å—Ç–æ—Ç–∞...* –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–∏–º—É–ª—è—Ü–∏–∏. –ë—É–¥—å –ø–µ—Ä–≤—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π `/sim_go`!", []);
      return;
    }

    const leaderboardData: Omit<LeaderboardEntry, 'rank'>[] = users
      .map(user => {
        const deck = user.metadata?.god_mode_deck as GodModeDeck | undefined;
        if (!deck || typeof deck.total_profit_usd !== 'number') {
          return null;
        }
        return {
          username: user.username || `–ê–≥–µ–Ω—Ç_${user.user_id.substring(0, 5)}`,
          totalProfit: deck.total_profit_usd,
          usdtBalance: deck.balances?.USDT || 0,
          // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 'user_id' ---
          isCurrentUser: user.user_id === userId,
        };
      })
      .filter((entry): entry is Omit<LeaderboardEntry, 'rank'> => entry !== null)
      .sort((a, b) => b.totalProfit - a.totalProfit);

    if (leaderboardData.length === 0) {
        await sendComplexMessage(chatId, "üï≥Ô∏è *–ü—É—Å—Ç–æ—Ç–∞...* –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π `/sim_go`!", []);
        return;
    }

    let userRank: number | null = null;
    const rankedData: LeaderboardEntry[] = leaderboardData.map((entry, index) => {
        const rank = index + 1;
        if (entry.isCurrentUser) {
            userRank = rank;
        }
        return { ...entry, rank };
    });

    const top10 = rankedData.slice(0, 10);

    let message = "üèÜ *–î–æ—Å–∫–∞ –õ–∏–¥–µ—Ä–æ–≤ God-Mode (–ø–æ –æ–±—â–µ–º—É –ø—Ä–æ—Ñ–∏—Ç—É)*\n\n";
    top10.forEach(entry => {
        const medal = entry.rank === 1 ? 'ü•á' : entry.rank === 2 ? 'ü•à' : entry.rank === 3 ? 'ü•â' : `*${entry.rank}.*`;
        const marker = entry.isCurrentUser ? ' üéØ' : '';
        message += `${medal} *@${entry.username}*${marker}\n` +
                   `   ‚îî‚îÄ –ü—Ä–æ—Ñ–∏—Ç: *$${entry.totalProfit.toFixed(2)}* | –ë–∞–ª–∞–Ω—Å: ${entry.usdtBalance.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\n`;
    });
    
    if (userRank && userRank > 10) {
        const currentUserEntry = rankedData.find(e => e.isCurrentUser)!;
        message += `\n...\n` +
                   `*${currentUserEntry.rank}.* *@${currentUserEntry.username}* üéØ\n` +
                   `   ‚îî‚îÄ –ü—Ä–æ—Ñ–∏—Ç: *$${currentUserEntry.totalProfit.toFixed(2)}* | –ë–∞–ª–∞–Ω—Å: ${currentUserEntry.usdtBalance.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}`;
    } else if (!userRank) {
        message += `\n*–¢–≤–æ–π —Ä–∞–Ω–≥ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –°–æ–≤–µ—Ä—à–∏ —Å–¥–µ–ª–∫—É —Å –ø–æ–º–æ—â—å—é /sim_go, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫!*`;
    }

    await sendComplexMessage(chatId, message, []);

  } catch (err) {
    const error = err as Error;
    logger.error("[Leaderboard] Error fetching leaderboard data:", error);
    await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${error.message}`, []);
  }
}