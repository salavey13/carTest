import { logger } from "@/lib/logger";
import { getArbitrageScannerSettings } from "@/app/elon/arbitrage_scanner_actions";
import { runGodModeSimulation } from "@/app/elon/arbitrage_god_mode_actions";
import { sendComplexMessage } from "../actions/sendComplexMessage";
import { supabaseAdmin } from "@/hooks/supabase";
import type { GodModeDeck } from "@/app/elon/arbitrage_scanner_types";

const INITIAL_BALANCES: Record<string, number> = {
  "USDT": 50000,
  "BTC": 1,
  "ETH": 15,
  "SOL": 300
};

export async function simGoCommand(chatId: number, userId: string, args: string[]) {
  const burstAmount = parseInt(args[0]) || 5000;
  logger.info(`[sim_go] User ${userId} triggered BURST. Amount: $${burstAmount}`);
  
  await sendComplexMessage(chatId, `üöÄ *–ü—Ä–∏–Ω—è—Ç–æ.* –°–æ–≤–µ—Ä—à–∞—é –∫–≤–∞–Ω—Ç–æ–≤—ã–π —Å–¥–≤–∏–≥ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ $${burstAmount}...`, []);

  // --- –®–ê–ì 1 & 2: READ & VERIFY ---
  const { data: userProfile, error: readError } = await supabaseAdmin
      .from('profiles')
      .select('metadata')
      .eq('id', userId)
      .single();

  if (readError || !userProfile) {
    logger.error(`[sim_go] CRITICAL: Failed to read user profile for ${userId}. Aborting write.`, readError);
    await sendComplexMessage(chatId, "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö.");
    return;
  }

  try {
    const settingsResult = await getArbitrageScannerSettings(userId);
    if (!settingsResult.success || !settingsResult.data) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ —Å–∞–º—ã–º —Å–≤–µ–∂–∏–º –¥–∞–Ω–Ω—ã–º
    const simResult = await runGodModeSimulation(settingsResult.data, burstAmount);

    if (simResult.opportunities.length === 0) {
        await sendComplexMessage(chatId, "‚úÖ *BURST COMPLETE!* –†—ã–Ω–æ–∫ –±—ã–ª —Å–ø–æ–∫–æ–µ–Ω, –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.");
        return;
    }

    // --- –®–ê–ì 3: MODIFY (Calculate new state) ---
    const currentMetadata = userProfile.metadata || {};
    let deck: GodModeDeck = JSON.parse(JSON.stringify(currentMetadata.god_mode_deck || { balances: {}, total_profit_usd: 0 }));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å—ã –ø—É—Å—Ç—ã–µ
    if (Object.keys(deck.balances).length === 0) {
        deck.balances = { ...INITIAL_BALANCES };
        logger.info(`[sim_go] Initializing balances for user ${userId}`);
    }

    // –í God-Mode –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç –≤ USDT, —Ç.–∫. –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∞–∫—Ç–∏–≤–æ–≤
    deck.balances["USDT"] = (deck.balances["USDT"] || 0) + simResult.totalProfit;
    deck.total_profit_usd = (deck.total_profit_usd || 0) + simResult.totalProfit;

    // --- –®–ê–ì 4: MERGE & WRITE ---
    const finalMetadata = {
        ...currentMetadata,
        god_mode_deck: deck,
    };

    const { error: writeError } = await supabaseAdmin
        .from('profiles')
        .update({ metadata: finalMetadata })
        .eq('id', userId);

    if (writeError) {
      logger.error(`[sim_go] CRITICAL: Failed to write metadata for ${userId}.`, writeError);
      throw new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.");
    }
    
    // --- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ---
    const updatedScoreboardText = "*Updated Scoreboard:*\n" +
      Object.entries(deck.balances).map(([asset, amount]) => ` ‚Ä¢ \`${asset}\`: ${amount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 8})}`).join('\n') +
      `\n*Total Profit:* $${deck.total_profit_usd.toFixed(2)}`;

    const finalMessage = `‚úÖ *BURST COMPLETE! (–û–±—ä–µ–º: $${burstAmount.toLocaleString()})*\n\n` +
                         `*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞ "–≤–∑—Ä—ã–≤": +$${simResult.totalProfit.toFixed(2)}*\n\n` +
                         `${updatedScoreboardText}\n\n---\n` +
                         `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Å \`/sim_god ${burstAmount}\` –∏–ª–∏ —Å–æ–≤–µ—Ä—à–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∑—Ä—ã–≤.`;

    await sendComplexMessage(chatId, finalMessage, []);

  } catch (error) {
    logger.error("[sim_go] Error processing command:", error);
    await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è "–≤–∑—Ä—ã–≤–∞": ${error.message}`, []);
  }
}