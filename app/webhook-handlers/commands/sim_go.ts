import { logger } from "@/lib/logger";
import { getArbitrageScannerSettings } from "@/app/elon/arbitrage_scanner_actions";
import { executeQuantumFluctuation } from "@/app/elon/arbitrage_god_mode_actions";
import { sendComplexMessage } from "../actions/sendComplexMessage";
import { supabaseAdmin } from "@/hooks/supabase";
import type { GodModeDeck } from "@/app/elon/arbitrage_scanner_types";

const INITIAL_BALANCES: Record<string, number> = { "USDT": 50000 };

export async function simGoCommand(chatId: number, userId: string, args: string[]) {
  const burstAmount = parseInt(args[0]) || 5000;
  logger.info(`[sim_go] User ${userId} triggered INTERVENTION EFFECT. Burst: $${burstAmount}`);
  
  await sendComplexMessage(chatId, `üöÄ *–í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ...* –°–æ–≤–µ—Ä—à–∞—é –∫–≤–∞–Ω—Ç–æ–≤—ã–π –≤–∑—Ä—ã–≤ –Ω–∞ $${burstAmount.toLocaleString()}...`, []);

  // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É 'users' —Å –∫–ª—é—á–æ–º 'user_id' ---
  const { data: userProfile, error: readError } = await supabaseAdmin.from('users').select('metadata').eq('user_id', userId).single();
  
  if (readError || !userProfile) {
    logger.error(`[sim_go] CRITICAL: Cannot read profile from 'users' table for user ${userId}.`, { error: readError });
    await sendComplexMessage(chatId, "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `users`. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  }

  try {
    const settingsResult = await getArbitrageScannerSettings(userId);
    if (!settingsResult.success || !settingsResult.data) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–ª—É–∫—Ç—É–∞—Ü–∏—é
    const result = await executeQuantumFluctuation(settingsResult.data, burstAmount);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –±–∞–ª–∞–Ω—Å—É
    const currentMetadata = userProfile.metadata || {};
    let deck: GodModeDeck = JSON.parse(JSON.stringify(currentMetadata.god_mode_deck || { balances: {}, total_profit_usd: 0 }));
    if (Object.keys(deck.balances).length === 0) deck.balances = { ...INITIAL_BALANCES };

    deck.balances["USDT"] = (deck.balances["USDT"] || 0) + result.totalProfit;
    deck.total_profit_usd = (deck.total_profit_usd || 0) + result.totalProfit;
    
    const finalMetadata = { ...currentMetadata, god_mode_deck: deck };
    
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É 'users' ---
    const { error: writeError } = await supabaseAdmin.from('users').update({ metadata: finalMetadata }).eq('user_id', userId);
    
    if (writeError) throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: ${writeError.message}`);

    const finalMessage = `‚úÖ *–ö–í–ê–ù–¢–û–í–´–ô –í–ó–†–´–í –ó–ê–í–ï–†–®–ï–ù!*\n\n` +
                         `–í–∞—à–∞ —á–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ *+$${result.totalProfit.toFixed(2)}*.\n` +
                         `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT: *${deck.balances["USDT"].toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}*`;

    await sendComplexMessage(chatId, finalMessage, []);

  } catch (error) {
    const err = error as Error;
    logger.error("[sim_go] Error processing command:", err);
    await sendComplexMessage(chatId, `üö® –û—à–∏–±–∫–∞ –í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: ${err.message}`, []);
  }
}