"use server";

import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage, KeyboardButton, sendTelegramInvoice } from "../actions/sendComplexMessage";

// This function INITIATES the SOS flow by requesting a location
export async function sosCommand(chatId: number, userId: string) {
    logger.info(`[SOS Command] User ${userId} initiated /sos command.`);

    const { data: activeRental, error } = await supabaseAdmin
        .from('rentals')
        .select('rental_id, vehicle:cars(crew_id)')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
    
    if (error || !activeRental) {
        logger.warn(`[SOS Command] User ${userId} has no active rentals.`, error);
        await sendComplexMessage(chatId, "üö® –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ SOS. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏.", [], { removeKeyboard: true });
        return;
    }

    if (!activeRental.vehicle?.crew_id) {
        await sendComplexMessage(chatId, "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–∫–∏–ø–∞–∂ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. SOS –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", [], { removeKeyboard: true });
        return;
    }

    // Put user in a state to await their location
    await supabaseAdmin
        .from('user_states')
        .upsert({
            user_id: userId,
            state: 'awaiting_sos_geotag',
            context: { rental_id: activeRental.rental_id, crew_id: activeRental.vehicle.crew_id }
        });

    const message = "üö® *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –°–ª—É–∂–±–∞ VIBE*\n\n–ü–æ–Ω—è–ª, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å —ç–∫–∏–ø–∞–∂, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n–ò—Å–ø–æ–ª—å–∑—É–π —Å–∫—Ä–µ–ø–∫—É (üìé) –≤ Telegram –∏ –≤—ã–±–µ—Ä–∏ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.";
    await sendComplexMessage(chatId, message, [], { removeKeyboard: true });
}

// This function handles the user's PAYMENT choice from the reply keyboard
export async function handleSosPaymentChoice(chatId: number, userId: string, choice: string) {
    logger.info(`[SOS Handler] User ${userId} chose payment: "${choice}"`);

    const { data: userState, error: stateError } = await supabaseAdmin
        .from('user_states').select('*').eq('user_id', userId).single();

    if (stateError || !userState || userState.state !== 'awaiting_sos_payment_choice') {
        await sendComplexMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å SOS. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sos.", [], { removeKeyboard: true });
        return;
    }

    const { rental_id, geotag } = userState.context as { rental_id: string, geotag: {latitude: number, longitude: number} };
    
    // Parse amount from button text like "‚õΩÔ∏è –¢–æ–ø–ª–∏–≤–æ (150 XTR)"
    const amountMatch = choice.match(/\((\d+)\s*XTR\)/);
    const amount = amountMatch ? parseInt(amountMatch[1], 10) : 0;
    const isFuel = choice.includes('–¢–æ–ø–ª–∏–≤–æ');
    const type = isFuel ? 'sos_fuel' : 'sos_evac';

    if (amount === 0) { // Handle "No payment" case
        await supabaseAdmin.from('events').insert({
            rental_id,
            type,
            status: 'pending',
            payload: { xtr_amount: 0, reason: "User requested help without payment", geotag },
            created_by: userId
        });
        await supabaseAdmin.from('user_states').delete().eq('user_id', userId);
        await sendComplexMessage(chatId, "‚úÖ –í–∞—à–∞ –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –≠–∫–∏–ø–∞–∂ —É–≤–µ–¥–æ–º–ª–µ–Ω.", [], { removeKeyboard: true });
        return;
    }

    // Create an invoice for payment
    const invoicePayload = `${type}_${rental_id}_${Date.now()}`;
    const description = `–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –¥–ª—è –∞—Ä–µ–Ω–¥—ã ${rental_id}.`;
    
    // We create the invoice in our DB FIRST
    await supabaseAdmin.from('invoices').insert({
        id: invoicePayload,
        type: type,
        user_id: userId,
        amount: amount,
        status: 'pending',
        subscription_id: rental_id, // Re-using this field for rental_id context
        metadata: { rental_id, geotag }
    });

    await sendTelegramInvoice(userId, choice, description, invoicePayload, amount * 100); // Amount in smallest units for TG
    await sendComplexMessage(chatId, `–°—á–µ—Ç –Ω–∞ ${amount} XTR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —ç–∫–∏–ø–∞–∂ –±—É–¥–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω.`, [], { removeKeyboard: true });
    
    // Clear state after sending invoice
    await supabaseAdmin.from('user_states').delete().eq('user_id', userId);
}