"use server";

import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage, KeyboardButton, sendTelegramInvoice } from "../actions/sendComplexMessage";

// This function presents the initial SOS options
export async function sosCommand(chatId: number, userId: string) {
    logger.info(`[SOS Command] User ${userId} initiated /sos command.`);

    const { data: activeRental, error } = await supabaseAdmin
        .from('rentals')
        .select('rental_id, vehicle_id')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
    
    if (error || !activeRental) {
        logger.warn(`[SOS Command] User ${userId} has no active rentals.`, error);
        await sendComplexMessage(chatId, "üö® –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ SOS. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏.", [], { removeKeyboard: true });
        return;
    }

    const message = "üö® *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –°–ª—É–∂–±–∞ VIBE*\n\n–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é, –∏ –º—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á–µ—Ç. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.";
    const buttons: KeyboardButton[][] = [
        [{ text: "‚õΩÔ∏è –ó–∞–ø—Ä–æ—Å –¢–æ–ø–ª–∏–≤–∞ (50 XTR)" }],
        [{ text: "üõ†Ô∏è –ó–∞–ø—Ä–æ—Å –≠–≤–∞–∫—É–∞—Ü–∏–∏ (250 XTR)" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞" }]
    ];

    await sendComplexMessage(chatId, message, buttons, { keyboardType: 'reply' });
}

// This function handles the user's choice from the reply keyboard
export async function handleSosChoice(chatId: number, userId: string, choice: string) {
    logger.info(`[SOS Handler] User ${userId} chose: "${choice}"`);

    const { data: activeRental, error: rentalError } = await supabaseAdmin
        .from('rentals')
        .select('rental_id')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

    if (rentalError || !activeRental) {
        await sendComplexMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", [], { removeKeyboard: true });
        return;
    }
    
    let invoiceType: string | null = null;
    let title: string | null = null;
    let description: string | null = null;
    let xtrAmount: number | null = null;

    if (choice.startsWith("‚õΩÔ∏è –ó–∞–ø—Ä–æ—Å –¢–æ–ø–ª–∏–≤–∞")) {
        invoiceType = 'sos_fuel';
        title = 'SOS: –î–æ—Å—Ç–∞–≤–∫–∞ –¢–æ–ø–ª–∏–≤–∞';
        description = '–û–ø–ª–∞—Ç–∞ –∑–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–ø–ª–∏–≤–∞ –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.';
        xtrAmount = 5000; // 50 XTR in cents
    } else if (choice.startsWith("üõ†Ô∏è –ó–∞–ø—Ä–æ—Å –≠–≤–∞–∫—É–∞—Ü–∏–∏")) {
        invoiceType = 'sos_evac';
        title = 'SOS: –≠–≤–∞–∫—É–∞—Ü–∏—è';
        description = '–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–∑–æ–≤ —ç–≤–∞–∫—É–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.';
        xtrAmount = 25000; // 250 XTR in cents
    } else if (choice === "‚ùå –û—Ç–º–µ–Ω–∞") {
        await sendComplexMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", [], { removeKeyboard: true });
        return;
    } else {
        await sendComplexMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sos –¥–ª—è –Ω–∞—á–∞–ª–∞.", [], { removeKeyboard: true });
        return;
    }

    // Create an invoice instead of an event
    const invoicePayload = `${invoiceType}_${activeRental.rental_id}_${Date.now()}`;
    await sendTelegramInvoice(
        userId,
        title,
        description,
        invoicePayload,
        xtrAmount
    );

    await sendComplexMessage(chatId, `–°—á–µ—Ç –Ω–∞ ${xtrAmount/100} XTR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∏ —ç–∫–∏–ø–∞–∂ –±—É–¥—É—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.`, [], { removeKeyboard: true });
}