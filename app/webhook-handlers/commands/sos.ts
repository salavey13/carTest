"use server";

import { logger } from "@/lib/logger";
import { supabaseAdmin } from "@/hooks/supabase";
import { sendComplexMessage, KeyboardButton } from "../actions/sendComplexMessage";

// This function presents the initial SOS options
export async function sosCommand(chatId: number, userId: string) {
    logger.info(`[SOS Command] User ${userId} initiated /sos command.`);

    // 1. Find the user's most recent *active* rental
    const { data: activeRental, error } = await supabaseAdmin
        .from('rentals')
        .select('rental_id, vehicle_id')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
    
    if (error || !activeRental) {
        logger.warn(`[SOS Command] User ${userId} has no active rentals.`, error);
        await sendComplexMessage(chatId, "üö® –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ SOS. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏.", []);
        return;
    }

    // 2. Present options via a reply keyboard
    const message = "üö® *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –°–ª—É–∂–±–∞ VIBE*\n\n–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é, –∏ –º—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –µ–≥–æ —ç–∫–∏–ø–∞–∂.";
    const buttons: KeyboardButton[][] = [
        [{ text: "‚õΩÔ∏è –ó–∞–ø—Ä–æ—Å –¢–æ–ø–ª–∏–≤–∞ (50 XTR)" }],
        [{ text: "üõ†Ô∏è –ó–∞–ø—Ä–æ—Å –≠–≤–∞–∫—É–∞—Ü–∏–∏ (250 XTR)" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞" }]
    ];

    await sendComplexMessage(chatId, message, buttons, { keyboardType: 'reply' });
}

// This function handles the user's choice from the reply keyboard
export async function handleSosChoice(chatId: number, userId: string, choice: string) {
    logger.info(`[SOS Handler] User ${userId} chose: "${choice}"`);

    // 1. Find the active rental again
    const { data: activeRental, error: rentalError } = await supabaseAdmin
        .from('rentals')
        .select('rental_id')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

    if (rentalError || !activeRental) {
        await sendComplexMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", [], { removeKeyboard: true });
        return;
    }
    
    let eventType: string | null = null;
    let xtrAmount: number | null = null;

    if (choice.startsWith("‚õΩÔ∏è –ó–∞–ø—Ä–æ—Å –¢–æ–ø–ª–∏–≤–∞")) {
        eventType = 'sos_fuel';
        xtrAmount = 50;
    } else if (choice.startsWith("üõ†Ô∏è –ó–∞–ø—Ä–æ—Å –≠–≤–∞–∫—É–∞—Ü–∏–∏")) {
        eventType = 'sos_evac';
        xtrAmount = 250;
    } else if (choice === "‚ùå –û—Ç–º–µ–Ω–∞") {
        await sendComplexMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", [], { removeKeyboard: true });
        return;
    } else {
        await sendComplexMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sos –¥–ª—è –Ω–∞—á–∞–ª–∞.", [], { removeKeyboard: true });
        return;
    }
    
    // 2. Create the event in the new 'events' table. The DB trigger will handle notifications.
    const { error: eventError } = await supabaseAdmin
        .from('events')
        .insert({
            rental_id: activeRental.rental_id,
            type: eventType,
            status: 'pending',
            payload: { xtr_amount: xtrAmount, reason: "User initiated SOS" },
            created_by: userId
        });

    if (eventError) {
        logger.error(`[SOS Handler] Failed to create event for rental ${activeRental.rental_id}`, eventError);
        await sendComplexMessage(chatId, "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", [], { removeKeyboard: true });
        return;
    }

    // 3. Confirm to the user and remove the keyboard
    const confirmationMessage = `‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–ª–∞–¥–µ–ª–µ—Ü –∏ –µ–≥–æ —ç–∫–∏–ø–∞–∂ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–º–æ—â–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—Ä–µ–Ω–¥—ã.`;
    await sendComplexMessage(chatId, confirmationMessage, [], { removeKeyboard: true });
}