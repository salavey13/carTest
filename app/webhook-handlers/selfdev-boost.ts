import { WebhookHandler } from "./types";
import { sendTelegramMessage } from "../actions";
import { logger } from "@/lib/logger"; // Added logger

export const selfDevBoostHandler: WebhookHandler = {
    // Check invoice type specifically
    canHandle: (invoice, payload) => invoice.type === "selfdev_boost",

    handle: async (invoice, userId, userData, totalAmount, supabase, telegramToken, adminChatId, baseUrl) => {
        logger.log(`[SelfDevBoostHandler] Handling selfdev_boost purchase for user ${userId}. Invoice:`, invoice);

        // Extract boost_type safely from metadata
        const boostType = invoice?.metadata?.boost_type;
        logger.log(`[SelfDevBoostHandler] Extracted boost_type: ${boostType}`);

        if (!boostType) {
            logger.error(`[SelfDevBoostHandler] Missing boost_type in metadata for invoice ID ${invoice.id}, user ${userId}. Metadata:`, invoice?.metadata);
            // Notify admin about the missing data
            await sendTelegramMessage(
                telegramToken,
                `üö® –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω boost_type –≤ metadata –¥–ª—è selfdev_boost! Invoice ID: ${invoice.id}, User: ${userId}`,
                [],
                undefined,
                adminChatId
            );
            // Throw an error to indicate failure in the proxy
            throw new Error(`Missing boost_type in metadata for invoice ${invoice.id}`);
        }

        // Define boost effects based on boost_type
        const boostEffects: { [key: string]: { dbField: string; message: string } } = {
            priority_review: { dbField: "has_priority_review", message: "PR –≤–ª–µ—Ç–∞–µ—Ç –≤ –ø—Ä–æ–¥ –∑–∞ 24 —á–∞—Å–∞!" },
            cyber_extractor_pro: { dbField: "has_cyber_extractor_pro", message: "–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–≤–æ–∏!" },
            custom_command: { dbField: "has_custom_command", message: "–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞!" },
            ai_code_review: { dbField: "has_ai_code_review", message: "Grok —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ä–µ–≤—å—é–µ—Ä!" },
            neon_avatar: { dbField: "has_neon_avatar", message: "–¢–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Ç–µ–ø–µ—Ä—å —Å–≤–µ—Ç–∏—Ç—Å—è –Ω–µ–æ–Ω–æ–º!" },
            vibe_session: { dbField: "has_vibe_session", message: "–°–∫–æ—Ä–æ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è –ø–æ VIBE!" },
            ar_tour_generator: { dbField: "has_ar_tour_generator", message: "AR-—Ç—É—Ä—ã –¥–ª—è —Ç–∞—á–µ–∫ –≤ –¥–µ–ª–µ!" },
            code_warp_drive: { dbField: "has_code_warp_drive", message: "–ë–æ—Ç –ø–∏—à–µ—Ç —Ñ–∏—á—É –∑–∞ 12 —á–∞—Å–æ–≤!" },
            cyber_garage_key: { dbField: "has_cyber_garage_key", message: "VIP-–¥–æ—Å—Ç—É–ø –∫ –≥–∞—Ä–∞–∂—É –æ—Ç–∫—Ä—ã—Ç!" },
            tsunami_rider: { dbField: "has_tsunami_rider", message: "–¢—ã —Ç–µ–ø–µ—Ä—å Tsunami Rider, —ç–ª–∏—Ç–∞!" },
            bot_overclock: { dbField: "has_bot_overclock", message: "–ë–æ—Ç –Ω–∞ –¥–≤–æ–π–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 30 –¥–Ω–µ–π!" },
            neural_tuner: { dbField: "has_neural_tuner", message: "–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–∞—á–∫–∏ –ø–æ –≤–∞–π–±—É!" },
            repo_stealth_mode: { dbField: "has_repo_stealth_mode", message: "–¢–≤–æ–∏ PR —Ç–µ–ø–µ—Ä—å –≤ —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–µ!" },
            glitch_fx_pack: { dbField: "has_glitch_fx_pack", message: "–ì–ª–∏—Ç—á-—ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è UI –≤ –∫–∞—Ä–º–∞–Ω–µ!" },
            infinite_extract: { dbField: "has_infinite_extract", message: "–≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤!" },
        };

        const effect = boostEffects[boostType];

        if (!effect) {
             logger.error(`[SelfDevBoostHandler] Unknown boost type: ${boostType} for user ${userId}, invoice ${invoice.id}.`);
             await sendTelegramMessage(
                 telegramToken,
                 `‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π boost_type '${boostType}'! Invoice ID: ${invoice.id}, User: ${userId}`,
                 [],
                 undefined,
                 adminChatId
             );
             // Don't throw an error, maybe log and proceed or handle gracefully
             // For now, let's just log and not update anything specific for this unknown boost
             return;
             // throw new Error(`Unknown boost type: ${boostType}`);
        }

        // Prepare the update object for the metadata field
        const metadataUpdate = {
             ...userData.metadata, // Keep existing metadata
             [effect.dbField]: true, // Add or update the specific boost flag
        };
        logger.log(`[SelfDevBoostHandler] Prepared metadata update for user ${userId}:`, metadataUpdate);

        try {
            // Update user metadata using 'upsert' might be safer if user row might not exist?
            // But since payment happened, user *should* exist. Let's stick to update.
            const { error: updateError } = await supabase
                .from("users")
                .update({ metadata: metadataUpdate })
                .eq("user_id", userId);

             if (updateError) {
                 logger.error(`[SelfDevBoostHandler] Error updating metadata for user ${userId} with boost ${boostType}:`, updateError);
                 throw updateError; // Re-throw to be caught by the proxy
             }
             logger.log(`[SelfDevBoostHandler] Successfully updated metadata for user ${userId} with boost ${boostType}.`);


             // Notify user
             await sendTelegramMessage(
                telegramToken,
                `üî• ${effect.message} –¢—ã –≤ –∏–≥—Ä–µ, ${userData.first_name || '–±—Ä–∞—Ç–∞–Ω'}!`, // Personalized greeting
                [],
                undefined,
                userId
             );
             logger.log(`[SelfDevBoostHandler] Sent boost confirmation to user ${userId}.`);

             // Notify admin
             await sendTelegramMessage(
                telegramToken,
                `ü§ë ${userData.username || userId} –∫—É–ø–∏–ª –±—É—Å—Ç "${boostType}" –∑–∞ ${totalAmount} XTR!`,
                [],
                undefined,
                adminChatId
             );
             logger.log(`[SelfDevBoostHandler] Notified admin about boost purchase for user ${userId}.`);

        } catch (error) {
            logger.error(`[SelfDevBoostHandler] Error processing boost ${boostType} for user ${userId}:`, error);
            // Re-throw error to be handled by the main proxy handler
            throw error;
        }
    },
};