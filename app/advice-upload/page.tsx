"use client";

import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { useAppContext } from '@/contexts/AppContext'; // Use AppContext
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUpload, faCopy, faSpinner, faCheckCircle, faFileCsv, faCircleInfo, faTriangleExclamation, faPaste, faList, faLanguage } from '@fortawesome/free-solid-svg-icons'; // Added faLanguage
import { uploadAdviceCsv } from '@/app/advice-upload/actions'; // Ensure action path is correct
import { logger } from '@/lib/logger';
import { debugLogger } from '@/lib/debugLogger';
import { Toaster, toast } from 'sonner'; // Use sonner instead of react-hot-toast
import Papa from 'papaparse'; // For client-side parsing/preview
import { cn } from "@/lib/utils";

// --- Translations ---
const translations: Record<string, Record<string, string>> = {
  en: {
    "Admin: Upload Advice Article": "Admin: Upload Advice Article",
    "Generate CSV Instructions": "1. Generate CSV Instructions",
    "Enter a YouTube video URL. Instructions for an AI bot (ChatGPT, Claude) to convert it to CSV will be generated and copied.": "Enter a YouTube video URL. Instructions for an AI bot (AIStudio, ChatGPT, Claude) to convert it to CSV will be generated and copied.",
    "Enter a valid YouTube URL starting with https://": "Please enter a valid YouTube URL starting with https://",
    "Generate & Copy": "Generate & Copy",
    "Instructions generated and copied!": "Instructions generated and copied!",
    "Failed to copy instructions.": "Failed to copy instructions.",
    "Instructions copied to clipboard!": "Instructions copied to clipboard!",
    "Paste & Upload CSV Data": "2. Paste & Upload CSV Data",
    "Paste the raw CSV data generated by the bot into the text area below.": "Paste the raw CSV data generated by the bot into the text area below.",
    "Required Columns: article_title, article_slug, article_description, section_order, section_title, section_content": "Required Columns: article_title, article_slug, article_description, section_order, section_title, section_content",
    "Paste CSV data here, starting with the header row...": "Paste CSV data here, starting with the header row...",
    "Please paste CSV data into the text area.": "Please paste CSV data into the text area.",
    "Parsing...": "Parsing...",
    "Parse & Preview": "Parse & Preview",
    "CSV Parsing Error": "CSV Parsing Error (Row %%ROW%%): %%MESSAGE%%. Check format/quoting.",
    "CSV Parsing Failed:": "CSV Parsing Failed: %%MESSAGE%%",
    "An unexpected error occurred during parsing.": "An unexpected error occurred during parsing.",
    "CSV has no data rows or is empty.": "CSV has no data rows or is empty.",
    "Missing required CSV columns:": "Missing required CSV columns: %%HEADERS%%",
    "Parsed rows successfully. Ready to upload.": "Parsed %%COUNT%% rows successfully. Ready to upload.",
    "Uploading...": "Uploading...",
    "Upload Parsed Data": "Upload Parsed Data",
    "No CSV data to upload.": "No CSV data to upload.",
    "Please parse the CSV data first using the 'Parse & Preview' button.": "Please parse the CSV data first using the 'Parse & Preview' button.",
    "User information not available. Cannot verify admin status.": "User information not available. Cannot verify admin status.",
    "CSV uploaded and processed successfully!": "CSV uploaded and processed successfully!",
    "Upload successful.": "Upload successful.",
    "An unknown error occurred during upload.": "An unknown error occurred during upload.",
    "Upload failed.": "Upload failed.",
    "Client-side error during upload.": "Client-side error during upload.",
    "A critical error occurred during upload.": "A critical error occurred during upload.",
    "Parsing/Upload Status Area": "Parsing/Upload Status Area",
    "Parsed rows. Ready to upload.": "Parsed %%COUNT%% rows. Ready to upload.",
    "Article Preview:": "Article Preview: \"%%TITLE%%\" (%%SLUG%%)",
    "Description Preview:": "Description Preview: \"%%DESC%%...\"",
    "Loading...": "Loading...",
    "Access Denied": "Access Denied",
    "You do not have permission to access this page.": "You do not have permission to access this page.",
    "Toggle Language": "Toggle Language",
  },
  ru: {
    "Admin: Upload Advice Article": "Админ: Загрузка Статьи-Совета",
    "Generate CSV Instructions": "1. Сгенерировать Инструкции CSV",
    "Enter a YouTube video URL. Instructions for an AI bot (ChatGPT, Claude) to convert it to CSV will be generated and copied.": "Введите URL видео YouTube. Инструкции для AI бота (AIStudio, ChatGPT, Claude) для конвертации в CSV будут сгенерированы и скопированы.",
    "Enter a valid YouTube URL starting with https://": "Пожалуйста, введите корректный URL YouTube, начинающийся с https://",
    "Generate & Copy": "Генерировать и Скопировать",
    "Instructions generated and copied!": "Инструкции сгенерированы и скопированы!",
    "Failed to copy instructions.": "Не удалось скопировать инструкции.",
    "Instructions copied to clipboard!": "Инструкции скопированы в буфер обмена!",
    "Paste & Upload CSV Data": "2. Вставить и Загрузить CSV Данные",
    "Paste the raw CSV data generated by the bot into the text area below.": "Вставьте необработанные CSV данные, сгенерированные ботом, в текстовое поле ниже.",
    "Required Columns: article_title, article_slug, article_description, section_order, section_title, section_content": "Обязательные колонки: article_title, article_slug, article_description, section_order, section_title, section_content",
    "Paste CSV data here, starting with the header row...": "Вставьте CSV данные сюда, начиная со строки заголовков...",
    "Please paste CSV data into the text area.": "Пожалуйста, вставьте CSV данные в текстовое поле.",
    "Parsing...": "Парсинг...",
    "Parse & Preview": "Распарсить и Предпросмотр",
    "CSV Parsing Error": "Ошибка парсинга CSV (Строка %%ROW%%): %%MESSAGE%%. Проверьте формат/кавычки.",
    "CSV Parsing Failed:": "Ошибка парсинга CSV: %%MESSAGE%%",
    "An unexpected error occurred during parsing.": "Произошла непредвиденная ошибка во время парсинга.",
    "CSV has no data rows or is empty.": "CSV не содержит строк данных или пуст.",
    "Missing required CSV columns:": "Отсутствуют обязательные колонки CSV: %%HEADERS%%",
    "Parsed rows successfully. Ready to upload.": "Успешно распарсено %%COUNT%% строк. Готово к загрузке.",
    "Uploading...": "Загрузка...",
    "Upload Parsed Data": "Загрузить Данные",
    "No CSV data to upload.": "Нет CSV данных для загрузки.",
    "Please parse the CSV data first using the 'Parse & Preview' button.": "Пожалуйста, сначала распарсите CSV данные кнопкой 'Распарсить и Предпросмотр'.",
    "User information not available. Cannot verify admin status.": "Информация о пользователе недоступна. Невозможно проверить статус администратора.",
    "CSV uploaded and processed successfully!": "CSV успешно загружен и обработан!",
    "Upload successful.": "Загрузка успешна.",
    "An unknown error occurred during upload.": "Произошла неизвестная ошибка во время загрузки.",
    "Upload failed.": "Загрузка не удалась.",
    "Client-side error during upload.": "Ошибка на стороне клиента во время загрузки.",
    "A critical error occurred during upload.": "Произошла критическая ошибка во время загрузки.",
    "Parsing/Upload Status Area": "Статус Парсинга/Загрузки",
    "Parsed rows. Ready to upload.": "Распарсено %%COUNT%% строк. Готово к загрузке.",
    "Article Preview:": "Предпросмотр статьи: \"%%TITLE%%\" (%%SLUG%%)",
    "Description Preview:": "Предпросмотр описания: \"%%DESC%%...\"",
    "Loading...": "Загрузка...",
    "Access Denied": "Доступ запрещен",
    "You do not have permission to access this page.": "У вас нет прав для доступа к этой странице.",
    "Toggle Language": "Переключить язык",
  }
};

// --- Instruction Generation ---
// .. Keeping template in English as it's for the AI
 const SYSTEM_INSTRUCTION_TEMPLATE = `
You are an expert content processor and technical writer. Your task is to watch the YouTube video at the following URL and convert its spoken content into a structured CSV format suitable for import into a database, adhering strictly to the format and constraints below.

Please translate to russian on the fly and give full russian csv, and add markdown to content;)

YouTube Video URL: %%YOUTUBE_URL%%

**Constraints & Formatting:**

1.  **Section Limit:** Aim to create a concise article structure with a **maximum of 13 sections**. Group related ideas or steps into single sections where logical. If the video is very long or dense, prioritize the most impactful or actionable advice.
2.  **CSV Structure:**
    *   The CSV MUST have the following columns in this exact order: \`"article_title", "article_slug", "article_description", "section_order", "section_title", "section_content"\`.
    *   Use a comma (,) as the delimiter.
    *   Enclose ALL text fields in double quotes (\`"\`). This is crucial for fields containing commas, newlines, or double quotes.
    *   Escape double quotes within field content by doubling them (e.g., \`"He said ""hello""."\`).
3.  **Output Format:** Output ONLY the raw CSV data, starting *directly* with the header row. Do NOT include *any* introductory text, explanations, summaries, \`\`\`csv \`\`\` markers, or any other text before or after the CSV data itself.

**Column Definitions:**

4. "article_title": The main title of the article derived from the video. Use this same title for all rows belonging to this article.
5. "article_slug": A URL-friendly version of the title (lowercase, spaces replaced with hyphens, remove special characters). Use this same slug for all rows belonging to this article. Keep it relatively short but descriptive. Example: "how-to-meditate-effectively".
6. "article_description": A brief (1-2 sentence) summary of the entire article/video content. Use this same description for all rows belonging to this article.
7. "section_order": A sequential integer number (1, 2, 3, ...) indicating the order of the section within the article. Each section should represent a logical chunk or topic from the video.
8. "section_title": (Optional) A short, descriptive title for the specific section. Leave blank if no obvious title emerges, but try to create one if possible.
9. "section_content": The transcribed and *lightly edited* text content of that specific section. Focus on clarity and readability. Remove filler words ("uh", "um"), correct obvious grammatical errors, and structure into paragraphs where appropriate. Preserve the core meaning and advice given in the video for that section. Ensure the content is properly quoted for CSV safety.

Processing Steps:
1. Watch the video carefully.
2. Identify the main topic and formulate the "article_title", "article_slug", and "article_description".
3. Break the video content down into logical sections based on topic shifts or distinct pieces of advice.
4. For each section, assign a sequential "section_order".5. Extract or formulate a "section_title" for each section if possible.
6. Transcribe the spoken content for each section, edit it lightly for clarity (as described above), and place it in the "section_content" column, ensuring correct CSV quoting.
7. Combine all sections into a single CSV output, repeating the article-level information (title, slug, description) for each section's row.Example Row:"How to Meditate Effectively","how-to-meditate-effectively","Learn the basics of mindfulness meditation to reduce stress and improve focus.",1,"Finding a Quiet Space","Find a comfortable and quiet location where you won't be disturbed. This could be a corner of your room, a park bench, or anywhere you feel at ease. Turn off notifications on your phone."
VERY IMPORTANT: Output ONLY the raw CSV data, starting directly with the header row ("article_title", "article_slug", ...). Do NOT include any introductory text, explanations, or \`\`\`csv \`\`\` markers before or after the CSV data itself.
;`
// Interface for parsed CSV row data (used for preview)
interface AdviceCsvRow {
    article_title: string;
    article_slug: string;
    article_description?: string | null;
    section_order: string; // Keep as string initially for parsing flexibility
    section_title?: string | null;
    section_content: string;
    [key: string]: any; // Allow other columns, though they might be ignored
}

// --- Component ---
export default function AdminAdviceUploadPage() {
    const { user, isAdmin, isAuthLoading } = useAppContext();
    const [youtubeUrl, setYoutubeUrl] = useState('');
    const [generatedInstruction, setGeneratedInstruction] = useState('');
    const [csvText, setCsvText] = useState('');
    const [parsedData, setParsedData] = useState<AdviceCsvRow[] | null>(null);
    const [parseError, setParseError] = useState<string | null>(null);
    const [isParsing, setIsParsing] = useState(false);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadStatus, setUploadStatus] = useState<{ success: boolean; message: string } | null>(null);

    // --- Language State ---
    const initialLang = useMemo(() => {
        const userLang = user?.language_code;
        return userLang === 'ru' ? 'ru' : 'en';
    }, [user?.language_code]);
    const [currentLang, setCurrentLang] = useState<'en' | 'ru'>(initialLang);

    useEffect(() => {
        const userLang = user?.language_code;
        const newLangBasedOnUser = userLang === 'ru' ? 'ru' : 'en';
        if (newLangBasedOnUser !== currentLang) {
            setCurrentLang(newLangBasedOnUser);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [user?.language_code]);

    const t = useCallback((key: string, replacements?: Record<string, string | number>): string => {
        let translation = translations[currentLang]?.[key] || translations['en']?.[key] || key;
        if (replacements) {
            Object.keys(replacements).forEach(placeholder => {
                const regex = new RegExp(`%%${placeholder.toUpperCase()}%%`, 'g');
                translation = translation.replace(regex, String(replacements[placeholder]));
            });
        }
        return translation;
    }, [currentLang]);

    const toggleLang = useCallback(() => {
        setCurrentLang(prevLang => prevLang === 'en' ? 'ru' : 'en');
    }, []);


    // --- Instruction Generation Logic ---
    const handleGenerateInstructions = useCallback(() => {
        if (!youtubeUrl || !youtubeUrl.trim().startsWith('https://')) {
            toast.error(t('Enter a valid YouTube URL starting with https://'));
            return;
        }
        const instruction = SYSTEM_INSTRUCTION_TEMPLATE.replace('%%YOUTUBE_URL%%', youtubeUrl.trim());
        setGeneratedInstruction(instruction);
        handleCopyToClipboard(instruction, t('Instructions copied to clipboard!')); // Pass translated success message
    }, [youtubeUrl, t]); // Added t dependency

    const handleCopyToClipboard = useCallback((text: string, successMessage: string) => {
        if (!text) return;
        navigator.clipboard.writeText(text)
            .then(() => { toast.success(successMessage); }) // Use passed message
            .catch(err => { toast.error(t('Failed to copy instructions.')); logger.error('Clipboard copy failed:', err); });
    }, [t]); // Added t dependency

    // --- CSV Text Parsing & Preview Logic ---
    const handleParseCsv = useCallback(() => {
        if (!csvText.trim()) {
            toast.error(t('Please paste CSV data into the text area.'));
            return;
        }
        setIsParsing(true);
        setParseError(null);
        setParsedData(null);
        setUploadStatus(null);

        debugLogger.log('Parsing CSV text...');
        try {
            Papa.parse<AdviceCsvRow>(csvText, {
                header: true,
                skipEmptyLines: 'greedy',
                transformHeader: header => header.trim(),
                transform: value => value.trim(),
                complete: (results) => {
                    if (results.errors.length > 0) {
                        const firstError = results.errors[0];
                        const errorMsg = t('CSV Parsing Error', { row: firstError.row + 1, message: firstError.message });
                        logger.error('CSV parsing errors:', results.errors);
                        setParseError(errorMsg);
                        toast.error(errorMsg, { duration: 5000 });
                        setParsedData(null);
                    } else if (!results.data || results.data.length === 0) {
                         const errorMsg = t('CSV has no data rows or is empty.');
                         setParseError(errorMsg);
                         toast.error(errorMsg);
                         setParsedData(null);
                    } else {
                        const requiredHeaders = ["article_title", "article_slug", "section_order", "section_content"];
                        const actualHeaders = Object.keys(results.data[0] || {});
                        const missingHeaders = requiredHeaders.filter(h => !actualHeaders.includes(h));

                        if (missingHeaders.length > 0) {
                             const errorMsg = t('Missing required CSV columns:', { headers: missingHeaders.join(', ') });
                             setParseError(errorMsg);
                             toast.error(errorMsg, { duration: 5000 });
                             setParsedData(null);
                        } else {
                            setParsedData(results.data);
                            toast.success(t('Parsed rows successfully. Ready to upload.', { count: results.data.length }));
                            debugLogger.log(`Parsed ${results.data.length} rows. Preview data set.`);
                        }
                    }
                    setIsParsing(false);
                },
                error: (error) => {
                    logger.error('PapaParse critical error:', error);
                    const errorMsg = t('CSV Parsing Failed:', { message: error.message });
                    setParseError(errorMsg);
                    toast.error(errorMsg);
                    setParsedData(null);
                    setIsParsing(false);
                }
            });
        } catch (error) {
            logger.error('Error during CSV parsing setup:', error);
            const errorMsg = t('An unexpected error occurred during parsing.');
            setParseError(errorMsg);
            toast.error(errorMsg);
            setParsedData(null);
            setIsParsing(false);
        }
    }, [csvText, t]); // Added t dependency

    // --- Upload Logic ---
    const handleUpload = async () => {
        if (!csvText.trim()) {
             toast.error(t('No CSV data to upload.'));
             return;
         }
        if (!user?.id) {
             toast.error(t('User information not available. Cannot verify admin status.'));
             return;
        }

        setIsUploading(true);
        setUploadStatus(null);
        debugLogger.log(`Starting upload of pasted CSV data...`);

        try {
            const result = await uploadAdviceCsv(csvText, user.id.toString());

            if (result.success) {
                toast.success(result.message || t('CSV uploaded and processed successfully!'));
                setUploadStatus({ success: true, message: result.message || t('Upload successful.') });
                setCsvText('');
                setParsedData(null);
                setParseError(null);
            } else {
                toast.error(result.error || t('An unknown error occurred during upload.'), { duration: 6000 });
                setUploadStatus({ success: false, message: result.error || t('Upload failed.') });
                logger.error('CSV Upload failed:', result.error);
            }
        } catch (error) {
            toast.error(t('A critical error occurred during upload.'));
            setUploadStatus({ success: false, message: t('Client-side error during upload.') });
            logger.error('Critical error calling uploadAdviceCsv:', error);
        } finally {
            setIsUploading(false);
            debugLogger.log('Upload process finished.');
        }
    };

    // --- Admin Access Control ---
    if (isAuthLoading) {
        return (
            <div className="flex justify-center items-center h-screen pt-24 bg-black">
                 <FontAwesomeIcon icon={faSpinner} spin size="2x" className="text-brand-green" />
                 <span className="ml-2">{t('Loading...')}</span>
            </div>
        );
    }
    if (!isAdmin) {
        return (
            <div className="p-6 pt-32 text-center text-brand-pink">
                <FontAwesomeIcon icon={faTriangleExclamation} size="2x" className="mb-2" />
                <p className="font-semibold text-xl">{t('Access Denied')}</p>
                <p className="text-gray-400">{t('You do not have permission to access this page.')}</p>
            </div>
        );
    }

    // --- Render Page ---
    return (
        <div className={cn(
            "min-h-screen pt-24 pb-10 font-mono",
            "bg-gradient-to-br from-gray-900 via-black to-gray-800 text-gray-200"
        )}>
            <Toaster position="bottom-center" reverseOrder={false} toastOptions={{ // Changed to bottom-center and using sonner options
                className: '!bg-gray-800 !border !border-brand-purple/50 !text-gray-200 !font-mono !shadow-lg',
                style: { // Additional style if needed
                    background: "rgba(20, 20, 30, 0.9)",
                    color: "#eee",
                    border: "1px solid rgba(157, 0, 255, 0.3)",
                    backdropFilter: "blur(5px)"
                },
                success: { iconTheme: {primary: '#00FF9D', secondary: '#14141e'}},
                error: {iconTheme: {primary: '#FF007A', secondary: '#14141e'}},
            }}/>

            <div className="container mx-auto px-4 max-w-4xl space-y-8 relative">
                 {/* Language Toggle Button */}
                 <div className="absolute top-0 right-4">
                    <button
                        onClick={toggleLang}
                        className="p-2 bg-gray-700/50 rounded-md hover:bg-gray-600/70 transition-colors flex items-center gap-1.5 text-xs text-cyan-300"
                        aria-label={t("Toggle Language")}
                        title={t("Toggle Language")}
                    >
                        <FontAwesomeIcon icon={faLanguage} />
                        {currentLang === 'en' ? 'RU' : 'EN'}
                    </button>
                 </div>

                <h1 className="text-3xl md:text-4xl font-bold text-center text-brand-green cyber-text glitch pt-4" data-text={t("Admin: Upload Advice Article")}>
                    {t("Admin: Upload Advice Article")}
                </h1>

                {/* Section 1: Generate Instructions */}
                <div className="p-4 md:p-6 border border-brand-blue/30 rounded-lg bg-black/50 backdrop-blur-sm shadow-lg shadow-brand-blue/20">
                    <h2 className="text-xl font-semibold mb-3 text-brand-blue flex items-center gap-2">
                        <FontAwesomeIcon icon={faCopy} /> {t("Generate CSV Instructions")}
                    </h2>
                    <p className="text-sm text-gray-400 mb-4">
                        {t("Enter a YouTube video URL. Instructions for an AI bot (ChatGPT, Claude) to convert it to CSV will be generated and copied.")}
                    </p>
                    <div className="flex flex-col sm:flex-row gap-2 mb-4">
                        <input
                            type="url"
                            value={youtubeUrl}
                            onChange={(e) => setYoutubeUrl(e.target.value)}
                            placeholder="https://www.youtube.com/watch?v=..."
                            className="flex-grow p-2 border rounded bg-gray-800/70 border-brand-blue/50 text-gray-200 focus:ring-2 focus:ring-brand-blue outline-none placeholder-gray-500"
                        />
                        <button
                            onClick={handleGenerateInstructions}
                            className="px-4 py-2 bg-brand-blue/80 text-black rounded hover:bg-brand-blue transition duration-150 flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-brand-blue focus:ring-offset-2 focus:ring-offset-black font-semibold"
                        >
                            <FontAwesomeIcon icon={faCopy} /> {t("Generate & Copy")}
                        </button>
                    </div>
                    {generatedInstruction && (
                         <div className="mt-4 p-3 bg-gray-800/50 rounded border border-brand-blue/20">
                             <p className="text-sm font-medium text-brand-green flex items-center gap-2">
                                 <FontAwesomeIcon icon={faCheckCircle} /> {t("Instructions generated and copied!")}
                             </p>
                             <textarea
                                readOnly
                                value={generatedInstruction}
                                rows={6}
                                className="w-full mt-2 p-2 border rounded text-xs bg-gray-900/60 border-gray-700 text-gray-300 whitespace-pre-wrap font-mono scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800"
                             />
                         </div>
                     )}
                </div>

                {/* Section 2: Paste & Upload CSV */}
                <div className="p-4 md:p-6 border border-brand-green/30 rounded-lg bg-black/50 backdrop-blur-sm shadow-lg shadow-brand-green/20">
                    <h2 className="text-xl font-semibold mb-3 text-brand-green flex items-center gap-2">
                       <FontAwesomeIcon icon={faPaste} /> {t("Paste & Upload CSV Data")}
                    </h2>
                    <p className="text-sm text-gray-400 mb-1">
                        {t("Paste the raw CSV data generated by the bot into the text area below.")}
                    </p>
                    <p className="text-xs text-brand-blue mb-4 flex items-center gap-1">
                        <FontAwesomeIcon icon={faCircleInfo} />
                        {t("Required Columns: article_title, article_slug, article_description, section_order, section_title, section_content")}
                     </p>

                    <textarea
                        value={csvText}
                        onChange={(e) => {
                            setCsvText(e.target.value);
                            setParsedData(null);
                            setParseError(null);
                            setUploadStatus(null);
                        }}
                        placeholder={t("Paste CSV data here, starting with the header row...")}
                        rows={10}
                        className="w-full p-2 border rounded bg-gray-800/70 border-brand-green/50 text-gray-200 focus:ring-2 focus:ring-brand-green outline-none placeholder-gray-500 font-mono text-sm scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800"
                    />

                    <div className="mt-4 flex flex-col sm:flex-row items-center gap-3">
                         <button
                            onClick={handleParseCsv}
                            disabled={isParsing || !csvText.trim()}
                            className={cn(
                                "px-5 py-2 rounded text-black font-semibold transition duration-150 flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-black w-full sm:w-auto",
                                isParsing || !csvText.trim()
                                    ? 'bg-gray-500 cursor-not-allowed'
                                    : 'bg-yellow-400 hover:bg-yellow-500 focus:ring-yellow-400'
                            )}
                         >
                           {isParsing ? <FontAwesomeIcon icon={faSpinner} spin /> : <FontAwesomeIcon icon={faList} />}
                           {isParsing ? t("Parsing...") : t("Parse & Preview")}
                         </button>

                         <button
                            onClick={handleUpload}
                            disabled={isUploading || !parsedData || !!parseError || isParsing}
                            className={cn(
                                "px-5 py-2 rounded text-black font-semibold transition duration-150 flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-black w-full sm:w-auto",
                                isUploading || !parsedData || !!parseError || isParsing
                                    ? 'bg-gray-500 cursor-not-allowed'
                                    : 'bg-brand-green/80 hover:bg-brand-green focus:ring-brand-green'
                            )}
                        >
                            {isUploading ? <FontAwesomeIcon icon={faSpinner} spin /> : <FontAwesomeIcon icon={faUpload} />}
                            {isUploading ? t("Uploading...") : t("Upload Parsed Data")}
                        </button>
                    </div>

                    {/* Parsing/Upload Status Area */}
                    {parseError && (
                         <div className="mt-4 p-3 rounded border border-brand-pink/50 bg-pink-900/30 text-brand-pink text-sm">
                             <FontAwesomeIcon icon={faTriangleExclamation} className="mr-2" />
                             {parseError}
                         </div>
                     )}
                    {parsedData && !parseError && (
                         <div className="mt-4 p-3 rounded border border-yellow-500/50 bg-yellow-900/30 text-yellow-300 text-sm">
                             <FontAwesomeIcon icon={faCheckCircle} className="mr-2 text-brand-green" />
                              {t("Parsed rows. Ready to upload.", { count: parsedData.length })}
                             <div className='mt-2 text-xs opacity-80'>
                                <p>{t("Article Preview:", { title: parsedData[0]?.article_title, slug: parsedData[0]?.article_slug })}</p>
                                <p>{t("Description Preview:", { desc: parsedData[0]?.article_description?.substring(0, 50) || '' })}</p>
                             </div>
                         </div>
                     )}
                    {uploadStatus && (
                        <div className={cn(
                            'mt-4 p-3 rounded border text-sm',
                             uploadStatus.success
                                ? 'bg-green-900/30 border-brand-green/50 text-brand-green'
                                : 'bg-red-900/30 border-brand-pink/50 text-brand-pink'
                        )}>
                            <FontAwesomeIcon icon={uploadStatus.success ? faCheckCircle : faTriangleExclamation} className="mr-2" />
                            {uploadStatus.message}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}