import { PROMPT_KWORKS_TO_CSV } from './prompt_kworks_to_csv';
import { PROMPT_OFFER_V2_CYBERVIBE_OUTREACH } from './prompt_offer';
import { PROMPT_FIND_TWEAKS } from './prompt_find_tweaks';
import { PROMPT_FIND_MISSING_FEATURES } from './prompt_find_missing_features';

export const PROMPT_INTERGALACTIC_PIPELINE = (rawKworksTextBlock: string) => `
**ЗАДАЧА "КИБЕР-КОНВЕЙЕР ЛИДОВ":**

Ты – высокоинтеллектуальный AI-ассистент КиберОтряда Supervibe. Твоя задача – обработать предоставленный ниже блок текста ("Сырые Данные Kwork") и выполнить последовательно ЧЕТЫРЕ ЭТАПА анализа и генерации для КАЖДОГО обнаруженного проекта (лида). В конечном итоге, ты должен предоставить **ТОП-3 наиболее перспективных лида** (или меньше, если найдено меньше) в виде **ОДНОЙ CSV-СТРОКИ**, включающей заголовок и данные для этих лидов.

**ЭТАП 1: ТРАНСМУТАЦИЯ ХАОСА В JSON (Промпт: PROMPT_KWORKS_TO_CSV)**
*   **Вход:** Блок текста "Сырые Данные Kwork".
*   **Задача:** Используя логику из \`PROMPT_KWORKS_TO_CSV\` (см. ниже), извлеки данные по каждому проекту и представь их в виде **JSON-массива объектов**. Каждый объект – один лид. Этот массив будет твоим основным рабочим набором данных для последующих этапов. Обязательно включи поля \`initial_relevance_score\` (это значение будет использовано для колонки \`similarity_score\` в финальном CSV) и \`project_type_guess\`.
*   **Промежуточный Результат Этапа 1 (для твоего внутреннего использования):** \`leads_stage1_json_array\` (JSON-массив объектов лидов).

---
${PROMPT_KWORKS_TO_CSV.replace("{{RAW_KWORKS_TEXT_BLOCK}}", rawKworksTextBlock)}
---

**ЭТАП 2: ГЕНЕРАЦИЯ УБОЙНЫХ ОФФЕРОВ (Промпт: PROMPT_OFFER_V2_CYBERVIBE_OUTREACH)**
*   **Вход:** \`leads_stage1_json_array\`.
*   **Задача:** Для КАЖДОГО объекта лида (\`current_lead\`) из \`leads_stage1_json_array\`, используя данные из него (включая \`current_lead.project_type_guess\`) и логику из \`PROMPT_OFFER_V2_CYBERVIBE_OUTREACH\` (см. ниже), сгенерируй персонализированный оффер.
*   **Промежуточный Результат Этапа 2 (для твоего внутреннего использования):** Для каждого лида – \`generated_offer_string\`. Добавь это как новое поле к каждому объекту лида в твоем рабочем массиве.

---
${PROMPT_OFFER_V2_CYBERVIBE_OUTREACH} 
---

**ЭТАП 3: ОПРЕДЕЛЕНИЕ ТВИНКОВ ДЛЯ ТАНКОВ (Промпт: PROMPT_FIND_TWEAKS)**
*   **Вход:** Твой рабочий массив лидов (уже обогащенный офферами). Для каждого лида (\`current_lead\`) используй \`current_lead.project_description\`, \`current_lead.key_features_requested_list\` и **\`current_lead.project_type_guess\`**. Передай в промпт \`PROMPT_FIND_TWEAKS\` список известных фич SuperVibe для более точного определения.
*   **Задача:** Для КАЖДОГО лида, используя логику из \`PROMPT_FIND_TWEAKS\` (см. ниже), определи задачи по кастомизации ("твики") и верни их как **СТРОКУ, СОДЕРЖАЩУЮ ВАЛИДНЫЙ JSON-МАССИВ ОБЪЕКТОВ ТВИКОВ**. Если твиков нет, верни строку \`"[]"\`. Крайне важно, чтобы эта строка была валидным JSON.
*   **Промежуточный Результат Этапа 3 (для твоего внутреннего использования):** Для каждого лида – \`identified_tweaks_json_string\` (строка с JSON-массивом). Добавь это как новое поле.

---
${PROMPT_FIND_TWEAKS}
---

**ЭТАП 4: ЗАДАЧИ R&D ДЛЯ КЭРРИ (Промпт: PROMPT_FIND_MISSING_FEATURES)**
*   **Вход:** Твой рабочий массив лидов. Для каждого лида (\`current_lead\`) используй \`current_lead.project_description\`, \`current_lead.key_features_requested_list\`, **\`current_lead.project_type_guess\`** и строку **\`current_lead.identified_tweaks_json_string\`**. Передай в промпт \`PROMPT_FIND_MISSING_FEATURES\` список известных фич SuperVibe.
*   **Задача:** Для КАЖДОГО лида, используя логику из \`PROMPT_FIND_MISSING_FEATURES\` (см. ниже), определи принципиально новые/сложные фичи и верни их как **СТРОКУ, СОДЕРЖАЩУЮ ВАЛИДНЫЙ JSON-МАССИВ ОБЪЕКТОВ ФИЧ**. Если фич нет, верни строку \`"[]"\`. Крайне важно, чтобы эта строка была валидным JSON.
*   **Промежуточный Результат Этапа 4 (для твоего внутреннего использования):** Для каждого лида – \`missing_features_json_string\` (строка с JSON-массивом). Добавь это как новое поле.

---
${PROMPT_FIND_MISSING_FEATURES}
---

**ФИНАЛЬНЫЙ ВЫВОД (СТРОГО CSV-СТРОКА):**

1.  **Анализ и Ранжирование:** После выполнения всех четырех этапов для ВСЕХ лидов, ранжируй их по следующим критериям (в порядке убывания важности):
    1.  **Высокий \`initial_relevance_score\` (8-10) из Этапа 1:** Сильное совпадение со стеком (React, Next.js, TWA, Supabase).
    2.  **Соответствие \`project_type_guess\` известным готовым решениям SuperVibe:** Проекты типа "TWA_Training", "TWA_CarRental", "TWA_WheelOfFortune" и т.д. получают ЗНАЧИТЕЛЬНЫЙ бонус.
    3.  **Ясность требований:** Проекты с четко описанными задачами предпочтительнее.
    4.  **Адекватность бюджета к объему работ:** Оценивается на основе описания и фич. Если бюджет явно мал для всего, но есть четкий MVP, это нормально.
    5.  **Минимальное количество СЛОЖНЫХ \`missing_features\` (задач для "Кэрри"):** Проекты, требующие в основном "твиков" для "Танков", быстрее в реализации.
2.  **Выбор ТОП-Лидов:** Выбери **ТОП-3 НАИБОЛЕЕ ПЕРСПЕКТИВНЫХ ЛИДА** по результатам ранжирования (или менее, если всего найдено меньше).
3.  **Генерация CSV:** Для каждого выбранного ТОП-лида сформируй строку CSV.
    *   **Заголовок CSV (первая строка вывода):** \`"client_name","kwork_url","project_description","budget_range","raw_html_description","generated_offer","identified_tweaks","missing_features","status","source","similarity_score","project_type_guess"\`
    *   **Строки данных CSV (для каждого ТОП-лида):**
        *   \`client_name\`: из данных Этапа 1.
        *   \`kwork_url\`: из данных Этапа 1 (будет \`lead_url\` при импорте).
        *   \`project_description\`: из данных Этапа 1.
        *   \`budget_range\`: из данных Этапа 1.
        *   \`raw_html_description\`: из данных Этапа 1.
        *   \`generated_offer\`: строка оффера из Этапа 2.
        *   \`identified_tweaks\`: **JSON-строка** (используй \`current_lead.identified_tweaks_json_string\`, обработанную по правилам ниже).
        *   \`missing_features\`: **JSON-строка** (используй \`current_lead.missing_features_json_string\`, обработанную по правилам ниже).
        *   \`status\`: установи значение \`"analyzed_by_pipeline"\`
        *   \`source\`: установи значение \`"kwork_pipeline_top3"\`
        *   \`similarity_score\`: возьми значение из поля \`initial_relevance_score\` из Этапа 1. Если это число, отформатируй его с двумя знаками после запятой (например, 9 -> "9.00", 7.5 -> "7.50"). Если null или не число, используй пустую строку \`""\`.
        *   \`project_type_guess\`: из данных Этапа 1.
    *   **Форматирование CSV (НЕУКОСНИТЕЛЬНО СЛЕДОВАТЬ ЭТИМ ПРАВИЛАМ!):**
        *   **Разделитель:** Запятая (\`,\`).
        *   **Общее правило для ВСЕХ полей:** Каждое поле в CSV-строке ДОЛЖНО быть заключено в двойные кавычки (например, \`"значение поля"\`).
        *   **Экранирование двойных кавычек ВНУТРИ ЛЮБОГО ПОЛЯ:** Если внутри оригинального значения поля (например, в тексте \`project_description\`, \`generated_offer\`, или в JSON-строках для \`identified_tweaks\`/\`missing_features\`) встречается символ двойной кавычки (\`"\`), этот символ ДОЛЖЕН быть ЗАМЕНЕН на ДВЕ двойные кавычки (\`""\`). **ЭТО ПРАВИЛО ПРИМЕНЯЕТСЯ КО ВСЕМ ПОЛЯМ, ВКЛЮЧАЯ ТЕ, ЧТО СОДЕРЖАТ JSON-СТРОКИ, ПОСЛЕ ТОГО, КАК JSON-СТРОКА СФОРМИРОВАНА.**
        *   **Специально для полей \`identified_tweaks\` и \`missing_features\`:**
            1.  Ты УЖЕ получил на Этапах 3 и 4 строки \`identified_tweaks_json_string\` и \`missing_features_json_string\`. Эти строки ДОЛЖНЫ БЫТЬ валидным JSON-представлением массива (например, \`"[{\\""key\\"":\\"value\\"}]"\` или \`"[]"\`).
            2.  Возьми одну из этих строк (например, \`let S = current_lead.identified_tweaks_json_string;\`).
            3.  Примени к строке \`S\` общее правило экранирования CSV: замени каждую двойную кавычку (\`"\`) в \`S\` на две двойные кавычки (\`""\`). Пусть результат будет \`S_escaped\`.
            4.  Финальное значение для CSV-поля: \`"\` + \`S_escaped\` + \`"\`.
            *   **Пример:** Если на этапе 3 \`identified_tweaks_json_string\` была строка \`"[{"name":"Fix \\"the\\" button"}]"\`.
                *   Шаг 3: \`S_escaped\` будет \`"[[{""""name"""":""""Fix \\""""the\\"""" button""""}]]"\`. (Каждая кавычка из \`S\` удвоена).
                *   Шаг 4: Финальное CSV-поле: \`"[[{""""name"""":""""Fix \\""""the\\"""" button""""}]]"\`.
            *   **Пример с пустым массивом:** Если \`identified_tweaks_json_string\` была строка \`"[]"\`.
                *   Шаг 3: \`S_escaped\` будет \`"[]"\` (нет кавычек для удвоения).
                *   Шаг 4: Финальное CSV-поле: \`"[]"\`.
        *   **Отсутствующие значения (null на Этапе 1):** Если значение поля на Этапе 1 было \`null\` (например, для \`raw_html_description\`, \`budget_range\`), в CSV это должно быть представлено как пустая строка, заключенная в двойные кавычки: \`""\`.

**Пример финального CSV-вывода (для одного лида):**
\`\`\`csv
"client_name","kwork_url","project_description","budget_range","raw_html_description","generated_offer","identified_tweaks","missing_features","status","source","similarity_score","project_type_guess"
"urik99","https://kwork.ru/projects/2840722","Описание с ""цитатой"" внутри.","до 10 000 ₽ / до 30 000 ₽","","Привет, urik99! Наш ""специальный"" оффер...","[[{""""tweak_description"""":""""Интеграция дизайна с \\""""спецэффектами\\""""..."""",""""estimated_complexity"""":""""medium""""}]]","[[{""""feature_description"""":""""Новая фича \\""""X\\""""..."""",""""reason_for_carry"""":""""Сложная логика...""""}]]","analyzed_by_pipeline","kwork_pipeline_top3","9.00","TWA_Training"
\`\`\`
*(Если несколько ТОП-лидов, каждая новая строка данных будет под заголовком)*

**ВАЖНО:**
*   Весь финальный вывод должен быть **ТОЛЬКО CSV-строкой (или несколькими строками, если >1 лида), НАЧИНАЯ С ЗАГОЛОВКА.**
*   Никаких дополнительных пояснений, JSON-объектов или \`\`\`csv \`\`\` маркеров до или после CSV-данных.
*   Если "Сырые Данные Kwork" содержат менее 3 лидов, выведи CSV-строки для всех найденных. Если лидов 0, выведи только строку заголовка CSV.

**Сырые Данные Kwork для обработки:**
\`\`\`text
${rawKworksTextBlock || "ЗДЕСЬ ДОЛЖЕН БЫТЬ ТЕКСТ С KWORK"}
\`\`\`
`;