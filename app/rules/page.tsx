"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AnimatePresence, motion } from 'framer-motion';
import useEmblaCarousel from 'embla-carousel-react';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { format } from 'date-fns';
import { useAppContext } from '@/contexts/AppContext'; // –î–ª—è userId/stars
import { ServiceCard } from '@/components/ServiceCard'; // Reuse

// Hardcoded –¥–ª—è MVP
const rig = { id: 'rule-cube-basic', name: '–ö—É–± –ë–∞–∑–æ–≤—ã–π', price: 800, image: 'https://.../cube.jpg' };
const rigger = { id: 'rule-master-default', name: '–î–µ—Ñ–æ–ª—Ç–Ω—ã–π –†–∏–≥–≥–µ—Ä', price: 500, image: 'https://.../rigger.jpg' };
const sessionTypes = [
  { title: '–†–∞—Å—Ç—è–∂–∫–∞', icon: 'üßò', items: [{ icon: 'üî•', text: '–ì–ª—É–±–æ–∫–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è' }] },
  { title: '–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞', icon: 'ü§∏', items: [{ icon: 'üí™', text: '–î–∏–Ω–∞–º–∏—á–Ω—ã–µ –ø–æ–∑—ã' }] },
  { title: '–§–æ—Ç–æ-—Å–µ—Å—Å–∏—è', icon: 'üì∏', items: [{ icon: 'üåü', text: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏' }] },
];

// How-to –Ω–∞ —Ä—É—Å—Å–∫–æ–º
const howToSteps = [
  { icon: '1Ô∏è‚É£', text: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏.' },
  { icon: '2Ô∏è‚É£', text: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–∏ (—Ä–∞—Å—Ç—è–∂–∫–∞, –∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞ –∏ —Ç.–¥.).' },
  { icon: '3Ô∏è‚É£', text: '–î–æ–±–∞–≤—å—Ç–µ —Ä–∏–≥–≥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å 1% –¥–µ–ø–æ–∑–∏—Ç–æ–º –≤ XTR.' },
];

// FAQ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
const faqItems = [
  { question: '–ß—Ç–æ —Ç–∞–∫–æ–µ 1% –¥–µ–ø–æ–∑–∏—Ç –≤ XTR?', answer: '–≠—Ç–æ –∞–Ω—Ç–∏-—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã. –°—É–º–º–∞ ~1% –æ—Ç —Ü–µ–Ω—ã —Å–µ—Å—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.' },
  { question: '–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?', answer: '–î–∞, —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –î–µ–ø–æ–∑–∏—Ç –≤–µ—Ä–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.' },
  { question: '–ù—É–∂–µ–Ω –ª–∏ —Ä–∏–≥–≥–µ—Ä?', answer: '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –î–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —Å —Ä–∏–≥–≥–µ—Ä–æ–º ‚Äî –¥–æ–ø–ª–∞—Ç–∞.' },
  { question: '–ß—Ç–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ?', answer: '–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Ä–µ–∞–ª-—Ç–∞–π–º. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è.' },
  { question: '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?', answer: '–ß–µ—Ä–µ–∑ Telegram Invoice –≤ XTR. –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ.' },
];

export default function RulesPage() {
  const { userId } = useAppContext();
  const [step, setStep] = useState(0);
  const [formData, setFormData] = useState({ start: '', end: '', sessionType: '', rigger: false, extras: [], notes: '' });
  const [calendar, setCalendar] = useState(null);
  const [price, setPrice] = useState(0);
  const [bookings, setBookings] = useState(null);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true); // –ù–æ–≤—ã–π loading state

  const [emblaRef, emblaApi] = useEmblaCarousel({ axis: 'y', dragFree: false, loop: false });

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const calRes = await fetch('/api/rules/rule-cube-basic/calendar');
        if (!calRes.ok) throw new Error('Failed to fetch calendar');
        const calData = await calRes.json();
        setCalendar(calData || []);

        const bookRes = await fetch(`/api/my/bookings?userId=${userId}`);
        if (!bookRes.ok) throw new Error('Failed to fetch bookings');
        const bookData = await bookRes.json();
        setBookings(bookData || []);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setIsLoading(false);
      }
    };
    if (userId) fetchData(); // –ñ–¥—ë–º userId
    else setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // Load draft from localStorage
    const draft = localStorage.getItem('rulesDraft');
    if (draft) setFormData(JSON.parse(draft));
  }, [userId]);

  useEffect(() => {
    // Save draft to localStorage
    localStorage.setItem('rulesDraft', JSON.stringify(formData));
  }, [formData]);

  useEffect(() => {
    if (emblaApi) {
      emblaApi.on('pointerDown', (evt) => {
        const startX = evt.clientX;
        const startY = evt.clientY;
        const handleDrag = (e: PointerEvent) => {
          const deltaX = Math.abs(e.clientX - startX);
          const deltaY = Math.abs(e.clientY - startY);
          if (deltaX > deltaY && deltaX > 10) { // Left/right drag
            e.preventDefault();
            emblaApi.off('pointerMove', handleDrag);
          }
        };
        emblaApi.on('pointerMove', handleDrag);
      });
    }
  }, [emblaApi]);

  const updateForm = (key: string, value: any) => setFormData(prev => ({ ...prev, [key]: value }));

  const calculatePrice = () => {
    let base = rig.price;
    if (formData.rigger) base += rigger.price;
    setPrice(base);
  };

  useEffect(calculatePrice, [formData]);

  const handleBook = async () => {
    const payload = { ...formData, price, userId, riggerId: formData.rigger ? rigger.id : null };
    const res = await fetch('/api/rules/book', { method: 'POST', body: JSON.stringify(payload) });
    if (res.ok) {
      alert('Invoice sent!');
      localStorage.removeItem('rulesDraft');
      // Refresh bookings
      const bookRes = await fetch(`/api/my/bookings?userId=${userId}`);
      if (bookRes.ok) setBookings(await bookRes.json() || []);
    }
  };

  const handleCancel = async (id: string) => {
    if (confirm('–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
      await fetch(`/api/rentals/${id}`, { method: 'PATCH', body: JSON.stringify({ status: 'cancelled' }) });
      // Refresh bookings
      const bookRes = await fetch(`/api/my/bookings?userId=${userId}`);
      if (bookRes.ok) setBookings(await bookRes.json() || []);
    }
  };

  if (error) return <div className="text-red-500 p-4">{error}</div>;
  if (isLoading) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  const steps = [
    <Card key="step1">
      <CardHeader><CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</CardTitle></CardHeader>
      <CardContent>
        <input type="datetime-local" onChange={e => updateForm('start', e.target.value)} value={formData.start} />
        <input type="datetime-local" onChange={e => updateForm('end', e.target.value)} value={formData.end} />
      </CardContent>
    </Card>,
    <Card key="step2">
      <CardHeader><CardTitle>–¢–∏–ø —Å–µ—Å—Å–∏–∏</CardTitle></CardHeader>
      <CardContent className="grid gap-4">
        {sessionTypes.map(type => (
          <Button key={type.title} onClick={() => updateForm('sessionType', type.title)} variant={formData.sessionType === type.title ? 'default' : 'outline'}>
            {type.title}
          </Button>
        ))}
      </CardContent>
    </Card>,
    <Card key="step3">
      <CardHeader><CardTitle>–†–∏–≥–≥–µ—Ä?</CardTitle></CardHeader>
      <CardContent>
        <Button onClick={() => updateForm('rigger', !formData.rigger)} variant={formData.rigger ? 'default' : 'outline'}>
          {formData.rigger ? '–° —Ä–∏–≥–≥–µ—Ä–æ–º' : '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ'}
        </Button>
        <div>–ó–∞–º–µ—Ç–∫–∏: <textarea onChange={e => updateForm('notes', e.target.value)} value={formData.notes} /></div>
        <div className="sticky bottom-0 bg-background p-4 border-t">–¶–µ–Ω–∞: {price} RUB</div>
        <Button onClick={handleBook}>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å 1%</Button>
      </CardContent>
    </Card>,
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-100 to-green-100 text-foreground">
      <section className="relative h-48 bg-lavender-200 text-center pt-16 wave-anim">
        <h1 className="text-4xl font-bold">–ü—Ä–∞–≤–ò–ª–∞: –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å–µ—Å—Å–∏—é</h1>
        <p className="text-lg">–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ 80%+</p>
      </section>
      <div ref={emblaRef} className="overflow-hidden">
        <div className="flex flex-col">
          <img src={rig.image} alt={rig.name} className="h-64 object-cover" />
        </div>
      </div>
      <section className="p-4 grid gap-4">
        {sessionTypes.map(type => <ServiceCard {...type} borderColorClass="border-blue-500" />)}
      </section>
      <Card className="m-4">
        <CardHeader><CardTitle>{rigger.name}</CardTitle></CardHeader>
        <CardContent>
          <img src={rigger.image} alt={rigger.name} className="h-32" />
          <Button onClick={() => updateForm('rigger', !formData.rigger)}>–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å</Button>
        </CardContent>
      </Card>
      <section className="p-4">
        <h2 className="text-2xl font-bold mb-4">–ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:</h2>
        <ul className="space-y-2">
          {howToSteps.map(step => (
            <li key={step.icon} className="flex items-center gap-2">
              <span>{step.icon}</span> {step.text}
            </li>
          ))}
        </ul>
      </section>
      <Accordion type="single" collapsible className="p-4">
        {faqItems.map((item, i) => (
          <AccordionItem value={`item-${i}`} key={i}>
            <AccordionTrigger>{item.question}</AccordionTrigger>
            <AccordionContent>{item.answer}</AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
      <AnimatePresence mode="wait">
        <motion.div key={step} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} transition={{ duration: 0.3 }}>
          <div ref={emblaRef} className="h-[400px] overflow-hidden">
            <div className="flex flex-col">{steps}</div>
          </div>
        </motion.div>
      </AnimatePresence>
      <section className="p-4">
        <h2 className="text-2xl font-bold mb-4">–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</h2>
        {bookings?.length ? (
          bookings.map(booking => (
            <Card key={booking.rental_id} className="mb-4">
              <CardContent>
                <p>{booking.metadata?.session_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} {format(new Date(booking.requested_start_date), 'dd.MM.yy HH:mm')}</p>
                <Button variant="destructive" onClick={() => handleCancel(booking.rental_id)}>–û—Ç–º–µ–Ω–∏—Ç—å</Button>
              </CardContent>
            </Card>
          ))
        ) : (
          <p>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.</p>
        )}
      </section>
    </div>
  );
}