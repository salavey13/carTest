// /app/vpr-tests/page.tsx
"use client";

"use client";
import { useEffect, useState, useMemo } from "react"; // –î–æ–±–∞–≤–ª–µ–Ω useMemo
import Link from "next/link";
import Image from "next/image";
import { motion } from "framer-motion";
import { supabaseAdmin } from "@/hooks/supabase";
import { useAppContext } from "@/contexts/AppContext"; // Keep if needed for user context
import { debugLogger } from "@/lib/debugLogger";
import { Loader2, Trophy, BookOpen } from "lucide-react";
import type { Database } from '@/types/database.types';

// --- Types ---
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ç–∏–ø Subject –≤–∫–ª—é—á–∞–µ—Ç grade_level
type Subject = Database['public']['Tables']['subjects']['Row'] & {
    grade_level?: number | null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ Database['...']['Row'])
};
type LeaderboardEntry = {
    user_id: string;
    username: string | null;
    avatar_url: string | null;
    total_score: number | null;
};
// --- End Types ---

// --- SubjectCard Component (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
const SubjectCard = ({ subject }: { subject: Subject }) => (
    <Link href={`/vpr-test/${subject.id}`} passHref legacyBehavior>
        <motion.a
            className="block bg-gradient-to-br from-dark-card to-gray-800 rounded-2xl shadow-lg hover:shadow-xl shadow-brand-blue/20 hover:shadow-brand-blue/30 transition-all duration-300 overflow-hidden border-2 border-brand-blue/30 group p-6 text-center"
            whileHover={{ y: -6, scale: 1.04 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 15 }}
        >
            <div className="mb-4 w-16 h-16 mx-auto rounded-full bg-brand-blue/20 flex items-center justify-center border-2 border-brand-blue/50 group-hover:scale-110 transition-transform">
                 <BookOpen className="w-8 h-8 text-brand-blue group-hover:text-neon-lime transition-colors" />
            </div>
            <h3 className="text-lg font-semibold text-light-text group-hover:text-brand-green transition-colors">
                {subject.name}
            </h3>
            {/* –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ */}
            {/* <p className="text-sm text-gray-400 mt-1">{subject.grade_level} –∫–ª–∞—Å—Å</p> */}
        </motion.a>
    </Link>
);
// --- End SubjectCard ---

// --- Leaderboard Component (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
const Leaderboard = ({ entries }: { entries: LeaderboardEntry[] }) => (
    <div className="bg-gradient-to-b from-dark-card to-dark-bg rounded-xl shadow-xl border border-brand-purple/30 p-5 md:p-6">
        <h2 className="text-xl font-bold text-center text-brand-orange mb-5 flex items-center justify-center gap-2">
            <Trophy className="w-6 h-6 text-yellow-400" />
            –î–æ—Å–∫–∞ –ü–æ—á–µ—Ç–∞ –í–ü–†
        </h2>
        {entries.length === 0 ? (
            <p className="text-center text-gray-400 py-4">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç—ã.</p>
        ) : (
            <ol className="space-y-3">
                {entries.map((entry, index) => (
                    <motion.li
                        key={entry.user_id}
                        className={`flex items-center gap-3 p-3 rounded-lg border ${index < 3 ? 'border-yellow-400/50 bg-gradient-to-r from-yellow-500/10 to-dark-card' : 'border-gray-700 bg-dark-card/60'}`}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.05 }}
                    >
                        <span className={`font-bold text-lg w-6 text-center ${index < 3 ? 'text-yellow-400' : 'text-gray-400'}`}>
                            {index + 1}
                        </span>
                         <Image
                            src={entry.avatar_url || '/default-avatar.png'}
                            alt={entry.username || '–ê–Ω–æ–Ω–∏–º'}
                            width={36}
                            height={36}
                            className="rounded-full border border-gray-600"
                        />
                        <span className="flex-grow font-medium text-light-text/90 truncate">
                            {entry.username || `–£—á–µ–Ω–∏–∫ #${entry.user_id.substring(0, 4)}`}
                        </span>
                        <span className="font-bold text-brand-green bg-brand-green/10 px-2.5 py-1 rounded-md text-sm border border-brand-green/30">
                            {entry.total_score ?? 0} <span className="text-xs opacity-80">–æ—á–∫.</span>
                        </span>
                    </motion.li>
                ))}
            </ol>
        )}
    </div>
);
// --- End Leaderboard ---


export default function VprTestsListPage() {
    // --- State and Fetching Logic ---
    // const [subjects, setSubjects] = useState<Subject[]>([]); // –°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ
    const [allSubjects, setAllSubjects] = useState<Subject[]>([]); // –•—Ä–∞–Ω–∏–º –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (6 –∏ 7 –∫–ª–∞—Å—Å)
    const [selectedGrade, setSelectedGrade] = useState<number>(6); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6
    const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    // const { user } = useAppContext();

    useEffect(() => {
        const fetchData = async () => {
            setIsLoading(true);
            setError(null);
            try {
                // 1. Fetch Subjects –¥–ª—è 6 –ò 7 –∫–ª–∞—Å—Å–∞
                // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ 'subjects' –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'grade_level' –∏–ª–∏ –∞–Ω–∞–ª–æ–≥
                const { data: subjectsData, error: subjectsError } = await supabaseAdmin
                    .from('subjects')
                    .select('*')
                    .in('grade_level', [6, 7]) // <-- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è 6 –∏ 7 –∫–ª–∞—Å—Å–∞
                    .order('grade_level', { ascending: true }) // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ 6, –ø–æ—Ç–æ–º 7 –∫–ª–∞—Å—Å
                    .order('name', { ascending: true });

                if (subjectsError) throw subjectsError;
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ grade_level –µ—Å—Ç—å, —Ö–æ—Ç—è –±—ã –∫–∞–∫ null –∏–ª–∏ undefined
                const subjectsWithGrade = subjectsData?.map(s => ({ ...s, grade_level: s.grade_level })) || [];
                setAllSubjects(subjectsWithGrade as Subject[]); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã

                // 2. Fetch Leaderboard Data (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–±—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥)
                const { data: leaderboardData, error: leaderboardError } = await supabaseAdmin
                     .rpc('get_vpr_leaderboard', { limit_count: 10 });

                if (leaderboardError) throw leaderboardError;
                setLeaderboard((leaderboardData as LeaderboardEntry[]) || []);

            } catch (err: any) {
                debugLogger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –í–ü–†:", err);
                setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –í–ü–†.");
                // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–∫–∏
                if (err.message?.includes('column "grade_level" does not exist')) {
                     setError("–û—à–∏–±–∫–∞: –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ 'grade_level' –≤ —Ç–∞–±–ª–∏—Ü–µ 'subjects'. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–ª–∞—Å—Å—É.");
                }
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
    }, []);
    // --- End State and Fetching ---

    // --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    const displayedSubjects = useMemo(() => {
        return allSubjects.filter(subject => subject.grade_level === selectedGrade);
    }, [allSubjects, selectedGrade]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

    // --- Loading State (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    if (isLoading) {
        return (
            <div className="min-h-screen bg-dark-bg flex items-center justify-center">
                <Loader2 className="h-12 w-12 animate-spin text-brand-blue" />
                <span className="ml-4 text-lg text-light-text">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã...</span>
            </div>
        );
    }

    // --- Error State (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
     if (error) {
         return (
            <div className="min-h-screen bg-dark-bg flex items-center justify-center text-brand-pink p-5 text-center">
                {error}
            </div>
         );
     }

    // --- Main Page Render ---
    return (
        <div className="min-h-screen bg-page-gradient py-10 px-4 md:px-8 text-light-text">
            <div className="max-w-6xl mx-auto">
                 {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π */}
                 <motion.h1
                    initial={{ opacity: 0, y: -20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="text-3xl md:text-4xl font-bold text-center text-brand-green mb-4 md:mb-6" // –£–º–µ–Ω—å—à–µ–Ω –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
                 >
                    –¢—Ä–µ–Ω–∞–∂–µ—Ä—ã –í–ü–† ({selectedGrade} –∫–ª–∞—Å—Å) üöÄ
                 </motion.h1>

                 {/* –ë–ª–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ */}
                 <div className="flex justify-center items-center gap-4 mb-8 md:mb-12">
                     {[6, 7].map((grade) => (
                         <button
                             key={grade}
                             onClick={() => setSelectedGrade(grade)}
                             className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 border-2 ${
                                 selectedGrade === grade
                                     ? 'bg-brand-blue border-brand-blue/80 text-white shadow-md shadow-brand-blue/30' // –°—Ç–∏–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                                     : 'bg-dark-card border-gray-700 text-gray-300 hover:bg-gray-700 hover:border-gray-500 hover:text-white' // –°—Ç–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                             }`}
                         >
                             {grade} –∫–ª–∞—Å—Å
                         </button>
                     ))}
                 </div>


                {/* Subject Grid (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ displayedSubjects) */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5 md:gap-8 mb-10 md:mb-12">
                    {displayedSubjects.length > 0 ? (
                         displayedSubjects.map(subject => (
                             <SubjectCard key={subject.id} subject={subject} />
                         ))
                     ) : (
                        // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                        <p className="text-center text-gray-400 col-span-full">
                            –¢—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è {selectedGrade} –∫–ª–∞—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.
                        </p>
                     )}
                </div>

                {/* Leaderboard (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –¥–æ—Å–∫—É) */}
                 <Leaderboard entries={leaderboard} />

            </div>
             {/* <ParticlesComponent /> */}
        </div>
    );
}