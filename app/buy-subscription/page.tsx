"use client"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { useTelegram } from "@/hooks/useTelegram"
import { sendTelegramInvoice } from "@/app/actions"
import { createInvoice, getUserSubscription } from "@/hooks/supabase"

const SUBSCRIPTIONS = [
  { id: 1, name: "–ë–∞–∑–æ–≤—ã–π", price: 13, features: ["–î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º", "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"] },
  {
    id: 2,
    name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
    price: 69,
    features: ["–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-–∞–≤—Ç–æ–º–æ–±–∏–ª—è–º", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã"],
  },
  {
    id: 3,
    name: "VIP",
    price: 420,
    features: ["–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º", "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"],
  },
]

export default function BuySubscription() {
  const { user, isInTelegramContext } = useTelegram()
  const [selectedSubscription, setSelectedSubscription] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [success, setSuccess] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [hasSubscription, setHasSubscription] = useState<boolean>(false)

  // Check subscription status
  useEffect(() => {
    const checkSubscription = async () => {
      if (user) {
        const subscriptionId = await getUserSubscription(user.id.toString())
        setHasSubscription(!!subscriptionId)
      }
    }
    checkSubscription()
  }, [user])

  const getWelcomeMessage = () => {
    if (hasSubscription) {
      return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã —É–∂–µ PRO;)"
    }
    return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –°—Ç–∞–Ω—å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º."
  }

  const handlePurchase = async () => {
    if (!user) {
      setError("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")
      return
    }

    if (hasSubscription) {
      setError("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
      return
    }

    if (!selectedSubscription) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç.")
      return
    }

    setLoading(true)
    setError(null)

    try {
      

      // Create metadata for the invoice
      const metadata = {
        type: "subscription",
        subscription_id: selectedSubscription.id,
        subscription_name: selectedSubscription.name,
        subscription_price_stars: selectedSubscription.price
      }

      const payload = `subscription_${user.id}_${Date.now()}`
      // Create invoice in Supabase first
      await createInvoice("subscription", payload, user.id.toString(), selectedSubscription.price, metadata)

      const response = await sendTelegramInvoice(
        user.id.toString(),
        `${selectedSubscription.name} –ê–±–æ–Ω–µ–º–µ–Ω—Ç`,
        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ —Å —ç—Ç–∏–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º!",
        payload,
        selectedSubscription.price,
      )

      if (!response.success) {
        throw new Error(response.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç")
      }

      setSuccess(true)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:", err)
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. " + err)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 text-gray-900 pt-20">
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center mb-8 font-sans text-blue-900">–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç</h1>
        <p className="text-center mb-6">{getWelcomeMessage()}</p>
        {error && <p className="text-red-500 text-center mb-4">{error}</p>}
        {success && (
          <p className="text-green-500 text-center mb-4">üéâ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ Telegram.</p>
        )}
        {!hasSubscription && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {SUBSCRIPTIONS.map((sub) => (
              <Card key={sub.id} className="bg-white border-gray-300">
                <CardHeader>
                  <CardTitle className="text-blue-900 font-sans">{sub.name}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-2xl font-bold mb-4 font-sans">{sub.price} XTR</p>
                  <ul className="list-disc list-inside mb-4">
                    {sub.features.map((feature, index) => (
                      <li key={index} className="font-sans text-gray-700">
                        {feature}
                      </li>
                    ))}
                  </ul>
                  <RadioGroup onValueChange={() => setSelectedSubscription(sub)}>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value={sub.id.toString()} id={`sub-${sub.id}`} />
                      <Label htmlFor={`sub-${sub.id}`} className="font-sans text-gray-900">
                        –í—ã–±—Ä–∞—Ç—å
                      </Label>
                    </div>
                  </RadioGroup>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
        {!hasSubscription && (
          <div className="mt-8 text-center">
            <Button
              onClick={handlePurchase}
              disabled={!selectedSubscription || loading}
              className="bg-blue-600 text-white hover:bg-blue-700 font-sans text-lg px-8 py-4"
            >
              {loading ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"}
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}

