"use client";

import React, { useState, useEffect, Suspense, useCallback, useId } from 'react'; 
import Link from 'next/link';
import { useSearchParams, useRouter } from 'next/navigation';
import { cn } from '@/lib/utils';
import ScrollControlledVideoPlayer from '@/components/ScrollControlledVideoPlayer';
import { VibeContentRenderer } from '@/components/VibeContentRenderer';
import { Button } from '@/components/ui/button';
import TutorialLoader from '../TutorialLoader'; 
import { useAppContext } from '@/contexts/AppContext';
import { markTutorialAsCompleted } from '@/hooks/cyberFitnessSupabase';
import { useAppToast } from '@/hooks/useAppToast';

import TutorialPageContainer from '../TutorialPageContainer';
import RockstarHeroSection from '../RockstarHeroSection';
import TutorialContentContainer from '../TutorialContentContainer';
import TutorialStepSection from '../TutorialStepSection';
import NextLevelTeaser from '../NextLevelTeaser';

const iconSwapTutorialTranslations = {
  ru: {
    pageTitle: "–ú–∏—Å—Å–∏—è 2: –°–∞–ø—ë—Ä –ò–∫–æ–Ω–æ–∫",
    pageSubtitle: "–ê–≥–µ–Ω—Ç! –¢–≤–æ—è —Ü–µ–ª—å ‚Äì –Ω–∞—É—á–∏—Ç—å—Å—è –æ–±–µ–∑–≤—Ä–µ–∂–∏–≤–∞—Ç—å '–º–∏–Ω–Ω—ã–µ –ø–æ–ª—è' –∏–∑ –±–∏—Ç—ã—Ö –∏–∫–æ–Ω–æ–∫. ::FaLandMineOn:: -> ::FaScrewdriverWrench:: -> ::FaSmileWink::. –û–¥–Ω–∞ –æ—à–∏–±–∫–∞ ‚Äì –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç '–ø–æ–¥–æ—Ä–≤–∞—Ç—å—Å—è'!",
    steps: [
      {
        id: 1,
        title: "–®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ê–Ω–æ–º–∞–ª–∏–∏",
        description: "–ü–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ–±–ª–µ–º—ã ‚Äì –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ `[?] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ <iconname>` –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –∏–ª–∏ –≤ –û–≤–µ—Ä–ª–µ–µ –û—à–∏–±–æ–∫ (Ctrl+Shift+E). –≠—Ç–æ —Å–∏–≥–Ω–∞–ª –æ—Ç `VibeContentRenderer`, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –µ–≥–æ –∫–∞—Ä—Ç–µ (`iconNameMap`).",
        icon: "FaTriangleExclamation",
        color: "brand-orange",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step1_find_icon.mp4" 
      },
      {
        id: 2,
        title: "–®–∞–≥ 2: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¶–µ–ª–∏",
        description: "–ó–∞–ø–æ–º–Ω–∏ –∏–º—è `<iconname>` –∏–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –∏–º—è (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª—é—á–æ–º –≤ `iconNameMap` –≤ `/components/VibeContentRenderer.tsx`. –ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ ‚Äì –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ PascalCase –∏–º—è –∏–∫–æ–Ω–∫–∏ –∏–∑ `react-icons/fa6`.",
        icon: "FaCrosshairs",
        color: "brand-pink",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step2_sticky_chat.mp4" 
      },
      {
        id: 3,
        title: "–®–∞–≥ 3: –ü–æ–¥–±–æ—Ä –ë–æ–µ–ø—Ä–∏–ø–∞—Å–∞ (–ò–∫–æ–Ω–∫–∏)",
        description: "–ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ, –∏–ª–∏ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–π–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –Ω–∞ —Å–∞–π—Ç–µ [FontAwesome](https://fontawesome.com/search?o=r&m=free&f=brands,solid,regular) (–Ω–∞–ø—Ä–∏–º–µ—Ä, `magnifying-glass` -> `FaMagnifyingGlass`) –∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ `react-icons`. ",
        icon: "FaBookMedical",
        color: "brand-blue",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step3_modal_magic.mp4" 
      },
      {
        id: 4,
        title: "–®–∞–≥ 4: –ù–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –£–≥—Ä–æ–∑—ã",
        description: "–í–Ω–µ—Å–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \n1. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∏–ø–∞ `::FaIconName::`, —É–±–µ–¥–∏—Å—å —á—Ç–æ `FaIconName` (PascalCase) –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ `faiconname` (lowercase) –µ—Å—Ç—å –≤ `iconNameMap` –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É. \n2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É –≤ –∫–∞—Ä—Ç—É ‚Äì –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π `iconNameMap` –≤ `VibeContentRenderer.tsx`. \n3. –ò—Å–ø–æ–ª—å–∑—É–π SUPERVIBE Studio –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ 'Magic Swap' –∏–ª–∏ 'Search/Replace'.",
        icon: "FaShieldHalved",
        color: "brand-purple",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step4_profit.mp4" 
      },
      {
        id: 5,
        title: "–®–∞–≥ 5: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ü—Ä–æ–≤–µ—Ä–∫–∞",
        description: "–û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏—Å—á–µ–∑–ª–æ. –ü–æ–º–Ω–∏: –±–µ–∑ `VibeContentRenderer` –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞—â–∏—Ç—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∏–∫–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–∞–¥–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏!",
        icon: "FaCheckDouble",
        color: "brand-green",
      }
    ],
    nextLevelTitle: "::FaAward:: –ù–∞–≤—ã–∫ '–†–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–∫–æ–Ω–æ–∫' –ü–æ–ª—É—á–µ–Ω!",
    nextLevelText: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å–∞–ø—ë—Ä! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. <Link href='/start-training' class='text-brand-blue hover:underline font-semibold'>–°–ª–µ–¥—É—é—â–∞—è –ú–∏—Å—Å–∏—è</Link> –∂–¥–µ—Ç!",
    tryLiveButton: "::FaTools:: –ü–µ—Ä–µ–π—Ç–∏ –≤ –°—Ç—É–¥–∏—é",
    toggleButtonToWtf: "::FaPooStorm:: –í—Ä—É–±–∏—Ç—å –†–µ–∂–∏–º –ë–û–ì–ê (WTF?!)",
    toggleButtonToNormal: "::FaBook:: –í–µ—Ä–Ω—É—Ç—å –°–∫—É—á–Ω—É—é –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", 
  },
  wtf: {
    pageTitle: "WTF IS THIS ICON?! ::FaHandMiddleFinger::",
    pageSubtitle: "–°–ª–æ–º–∞–ª–∞—Å—å –∏–∫–æ–Ω–∫–∞? –ü—Ñ—Ñ—Ñ, –ò–ó–ò! Sticky Chat ‚Äì —Ç–≤–æ–π —á–∏—Ç-–∫–æ–¥. Press F to Pay Respects to Broken Icons.",
    steps: [
      {
        id: 1,
        title: "–®–ê–ì 1: –°–ö–û–ü–ò–ü–ê–°–¢–¨ –ò–ú–Ø –ë–ê–ì–ê",
        description: "–í–∏–¥–∏—à—å `[?] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ <–°–†–ê–¢–û–ï_–ò–ú–Ø>`? –ö–æ–ø–∏—Ä—É–π `<–°–†–ê–¢–û–ï_–ò–ú–Ø>`! –í–°–Å!",
        icon: "FaRegCopy", 
        color: "brand-orange",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step1_find_icon.mp4"
      },
      {
        id: 2,
        title: "–®–ê–ì 2: –ö–ù–û–ü–ö–ê –ß–ê–¢–ê -> CTRL+V",
        description: "–°–ª–µ–≤–∞ –≤–Ω–∏–∑—É –ö–†–£–ì–õ–ê–Ø –§–ò–ì–ù–Ø ::FaCommentDots::. –ñ–º–∏. –í –ø–æ–ª–µ –≤—Å—Ç–∞–≤—å `<–°–†–ê–¢–û–ï_–ò–ú–Ø>`. Done.",
        icon: "FaPaste", 
        color: "brand-pink",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step2_sticky_chat.mp4"
      },
      {
        id: 3,
        title: "–®–ê–ì 3: –ú–ê–ì–ò–Ø STICKY CHAT, BLYAT!",
        description: "–ß–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç '–ó–∞–º–µ–Ω–∏—Ç—å –ò–∫–æ–Ω–∫—É'. –ñ–º–∏! \n1. –°—Å—ã–ª–∫–∞ –Ω–∞ FontAwesome ‚Äì —Ç—ã–∫–∞–π, –∏—â–∏ –ù–û–†–ú –ò–ö–û–ù–ö–£, –∫–æ–ø–∏—Ä—É–π –µ—ë –ü–û–õ–ù–û–ï –ò–ú–Ø (—Ç–∏–ø–∞ `FaBeer`).\n2. –í—Å—Ç–∞–≤—å –Ω–æ–≤–æ–µ –∏–º—è –≤ –ø–æ–ª–µ. \n3. –ñ–º–∏ 'OK'. Profit!",
        icon: "FaMagic", 
        color: "brand-purple",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step3_modal_magic.mp4"
      },
      {
        id: 4,
        title: "–®–ê–ì 4: GG WP! –ò–ö–û–ù–ö–ê –¶–ï–õ–ê!",
        description: "–ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç: PR, –º–µ—Ä–¥–∂. –û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äì –∏–∫–æ–Ω–∫–∞ –ò–î–ï–ê–õ–¨–ù–ê! –¢—ã ‚Äì –±–æ–∂–µ–Ω—å–∫–∞ UX!",
        icon: "FaCircleCheck", 
        color: "brand-green",
        videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-icon-swap-wtf/step4_profit.mp4"
      }
    ],
    nextLevelTitle: "::FaCrown:: –ò–ö–û–ù–ö–ò –ü–û–î–ß–ò–ù–Ø–Æ–¢–°–Ø –¢–ï–ë–ï!",
    nextLevelText: "–¢—ã —Ç–µ–ø–µ—Ä—å –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –∏–∫–æ–Ω–æ–∫! –ì–æ –Ω–∞ <Link href='/start-training' class='text-brand-blue hover:underline font-semibold'>–°–ª–µ–¥—É—é—â—É—é –ú–∏—Å—Å–∏—é</Link>, —Ç–∞–º –†–ï–ê–õ–¨–ù–´–ï –î–ï–õ–ê.",
    tryLiveButton: "::FaHammer:: –í –°—Ç—É–¥–∏—é, –†–ê–ë–û–¢–Ø–ì–ê!",
    toggleButtonToWtf: "::FaPooStorm:: –í—Ä—É–±–∏—Ç—å –†–µ–∂–∏–º –ë–û–ì–ê (WTF?!)", 
    toggleButtonToNormal: "::FaBook:: –í–µ—Ä–Ω—É—Ç—å –°–∫—É—á–Ω—É—é –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", 
  }
};

const colorClasses: Record<string, { text: string; border: string; shadow: string }> = {
  "brand-pink": { text: "text-brand-pink", border: "border-brand-pink/50", shadow: "shadow-brand-pink/40" },
  "brand-blue": { text: "text-brand-blue", border: "border-brand-blue/50", shadow: "shadow-brand-blue/40" },
  "brand-purple": { text: "text-brand-purple", border: "border-brand-purple/50", shadow: "shadow-brand-purple/40" },
  "brand-green": { text: "text-brand-green", border: "border-brand-green/50", shadow: "shadow-brand-green/40" },
  "brand-orange": { text: "text-brand-orange", border: "border-brand-orange/50", shadow: "shadow-brand-orange/40" },
};

function IconSwapTutorialContent() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { dbUser, isAuthenticated } = useAppContext();
  const { addToast } = useAppToast();
  const heroTriggerId = useId().replace(/:/g, "-") + "-hero-trigger"; 

  const initialModeFromUrl = searchParams.get('mode') === 'wtf';
  const [currentMode, setCurrentMode] = useState<'ru' | 'wtf'>(initialModeFromUrl ? 'wtf' : 'ru');
  
  const t = iconSwapTutorialTranslations[currentMode];
  const tutorialQuestId = "icon-swap-mission";

  const handleTutorialCompletion = useCallback(async () => {
    if (isAuthenticated && dbUser?.user_id) {
      const result = await markTutorialAsCompleted(dbUser.user_id, tutorialQuestId);
      if (result.success && result.kiloVibesAwarded && result.kiloVibesAwarded > 0) {
        addToast(`::FaCircleCheck:: –ú–∏—Å—Å–∏—è "${iconSwapTutorialTranslations.ru.pageTitle}" –ø—Ä–æ–π–¥–µ–Ω–∞! +${result.kiloVibesAwarded} KiloVibes!`, "success");
      }
      result.newAchievements?.forEach(ach => {
        addToast(`üèÜ –ê—á–∏–≤–∫–∞: ${ach.name}!`, "success", 5000, { description: ach.description });
      });
    }
  }, [isAuthenticated, dbUser, addToast, tutorialQuestId]);

  useEffect(() => {
    handleTutorialCompletion();
  }, [handleTutorialCompletion]);
  
  const toggleMode = () => {
    const newMode = currentMode === 'ru' ? 'wtf' : 'ru';
    setCurrentMode(newMode);
    router.replace(`/tutorials/icon-swap${newMode === 'wtf' ? '?mode=wtf' : ''}`, { scroll: false });
  };
  
  useEffect(() => {
    const modeFromUrl = searchParams.get('mode') === 'wtf' ? 'wtf' : 'ru';
    if (modeFromUrl !== currentMode) {
      setCurrentMode(modeFromUrl);
    }
  }, [searchParams, currentMode]);

  const stepsToRender = t.steps;
  const pageMainColorKey = "brand-purple"; 

  return (
    <TutorialPageContainer>
      <RockstarHeroSection
        title={t.pageTitle}
        subtitle={t.pageSubtitle}
        triggerElementSelector={`#${heroTriggerId}`}
        // mainBackgroundImageUrl uses new default from RockstarHeroSection if not overridden
        backgroundImageObjectUrl="https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/appStore/oneSitePls_transparent_icon.png"
      >
        <Button 
            onClick={toggleMode} 
            variant="outline" 
            size="lg"
            className={cn(
                "backdrop-blur-lg transition-all duration-300 font-orbitron active:scale-95 transform hover:scale-105 focus:ring-offset-background",
                currentMode === 'ru' 
                ? "bg-brand-pink/10 border-2 border-brand-pink text-brand-pink shadow-md shadow-brand-pink/40 hover:bg-brand-pink/20 hover:text-white hover:shadow-pink-glow focus:ring-2 focus:ring-brand-pink" 
                : "bg-brand-blue/10 border-2 border-brand-blue text-brand-blue shadow-md shadow-brand-blue/40 hover:bg-brand-blue/20 hover:text-white hover:shadow-blue-glow focus:ring-2 focus:ring-brand-blue"
            )}
        >
            <VibeContentRenderer content={currentMode === 'ru' ? iconSwapTutorialTranslations.ru.toggleButtonToWtf : iconSwapTutorialTranslations.wtf.toggleButtonToNormal} />
        </Button>
      </RockstarHeroSection>

      <div id={heroTriggerId} style={{ height: '250vh' }} aria-hidden="true" />

      <TutorialContentContainer className="relative">
        <div className="space-y-12 md:space-y-20">
          {stepsToRender.map((step, index) => {
            const stepColorData = colorClasses[step.color as keyof typeof colorClasses] || colorClasses["brand-purple"];
            const hasVideo = !!(step as any).videoSrc && typeof (step as any).videoSrc === 'string';

            return (
              <TutorialStepSection 
                key={step.id} 
                className={cn(index > 0 && "pt-12 md:pt-16")} 
                isLastStep={index === stepsToRender.length -1}
              >
                <div className={cn(
                  "flex flex-col gap-6 md:gap-10",
                  index % 2 === 0 ? "md:flex-row" : "md:flex-row-reverse"
                )}>
                  <div className={cn("space-y-4 flex flex-col items-start justify-center", hasVideo ? "md:w-2/5 lg:w-1/3" : "w-full")}>
                    <h2 className={cn("text-3xl md:text-4xl font-orbitron flex items-center gap-3", stepColorData.text)}>
                      <VibeContentRenderer content={`::${step.icon}::`} className="text-3xl opacity-90" />
                      <VibeContentRenderer content={step.title} />
                    </h2>
                    <div className="text-gray-300 text-base md:text-lg leading-relaxed prose prose-invert prose-sm md:prose-base max-w-none prose-p:my-2 prose-ul:my-2 prose-li:my-1 prose-headings:my-3 prose-a:text-brand-blue hover:prose-a:text-brand-cyan">
                      <VibeContentRenderer content={step.description} />
                    </div>
                  </div>

                  {hasVideo && (
                    <div className="md:w-3/5 lg:w-2/3">
                      <div className={cn("rounded-xl overflow-hidden border-2 shadow-2xl", stepColorData.border, stepColorData.shadow, "bg-black")}>
                        <ScrollControlledVideoPlayer 
                          src={(step as any).videoSrc}
                          className="w-full" 
                        />
                      </div>
                    </div>
                  )}
                </div>
              </TutorialStepSection>
            );
          })}
        </div>
      </TutorialContentContainer>
      
      <NextLevelTeaser 
        title={t.nextLevelTitle}
        text={t.nextLevelText}
        buttonText={t.tryLiveButton}
        buttonLink="/start-training"
        mainColorClassKey={pageMainColorKey}
      />
    </TutorialPageContainer>
  );
}

export default function IconSwapTutorialPage() {
  return (
    <Suspense fallback={<TutorialLoader />}>
      <IconSwapTutorialContent />
    </Suspense>
  );
}