"use client";

import React, { useState, useEffect, Suspense, useCallback, useId } from 'react'; 
import Link from 'next/link';
import { useSearchParams, useRouter } from 'next/navigation';
import { cn } from '@/lib/utils';
import ScrollControlledVideoPlayer from '@/components/ScrollControlledVideoPlayer';
import { VibeContentRenderer } from '@/components/VibeContentRenderer';
import { Button } from '@/components/ui/button';
import TutorialLoader from '../TutorialLoader'; 
import { useAppContext } from '@/contexts/AppContext';
import { markTutorialAsCompleted } from '@/hooks/cyberFitnessSupabase';
import { useAppToast } from '@/hooks/useAppToast';

import TutorialPageContainer from '../TutorialPageContainer';
import RockstarHeroSection from '../RockstarHeroSection';
import TutorialContentContainer from '../TutorialContentContainer';
import TutorialStepSection from '../TutorialStepSection';
import NextLevelTeaser from '../NextLevelTeaser';

const imageSwapTutorialTranslations = {
  ru: {
    pageTitle: "–ú–∏—Å—Å–∏—è 1: –û—Ö–æ—Ç–∞ –Ω–∞ –ë–∏—Ç—ã–π –ü–∏–∫—Å–µ–ª—å",
    pageSubtitle: "–ü–µ—Ä–≤–∞—è –º–∏—Å—Å–∏—è, –ê–≥–µ–Ω—Ç! –ù–∞—É—á–∏—Å—å –±—ã—Å—Ç—Ä–æ –∑–∞–º–µ–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ—â—å SUPERVIBE Studio. –≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É.",
    steps: [ 
      { id: 1, title: "–®–∞–≥ 1: –ó–∞—Ö–≤–∞—Ç URL –°—Ç–∞—Ä–æ–≥–æ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", description: "–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫: –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ –∑–∞–º–µ–Ω—ã. –ù–∞–π–¥—è, —Å–∫–æ–ø–∏—Ä—É–π –µ–≥–æ –ø–æ–ª–Ω—ã–π URL. –≠—Ç–æ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å!", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//1_copy_image_link.mp4", icon: "FaLink", color: "brand-pink" },
      { id: 2, title: "–®–∞–≥ 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ù–æ–≤–æ–≥–æ –ê–∫—Ç–∏–≤–∞", description: "–î–∞–ª–µ–µ, –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π –Ω–æ–≤–µ–Ω—å–∫–∏–π, —Å–∏—è—é—â–∏–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º Supabase Storage –¥–ª—è –≥–ª–∞–¥–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ª—é–±–æ–π –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π URL. –ó–∞—â–∏—Ç–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É!", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//2_upload_new_image.mp4", icon: "FaUpload", color: "brand-blue" },
      { id: 3, title: "–®–∞–≥ 3: –ê–∫—Ç–∏–≤–∞—Ü–∏—è VIBE-–¢—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏–∏!", description: "–í—Ä–µ–º—è –º–∞–≥–∏–∏! –ù–∞–ø—Ä–∞–≤–ª—è–π—Å—è –≤ SUPERVIBE Studio. –í–≤–µ–¥–∏ URL —Å—Ç–∞—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞—Ç–µ–º –Ω–æ–≤–æ–≥–æ. –ù–∞—à AI-–∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –∑–∞–º–µ–Ω—É.", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//3_sitback_and_relax_its_swappin.mp4", icon: "FaWandMagicSparkles", color: "brand-purple" },
      { id: 4, title: "–®–∞–≥ 4: –û–ø–µ—Ä–∞—Ü–∏—è –£—Å–ø–µ—à–Ω–∞! –ê–Ω–∞–ª–∏–∑ PR", description: "–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! Pull Request —Å –∑–∞–º–µ–Ω–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–º–µ—Ä–¥–∂–∏—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ü—Ä–æ—Ñ–∏—Ç!", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//4_profit_check.mp4", icon: "FaCheckDouble", color: "brand-green" }
    ],
    nextLevelTitle: "<FaPlayCircle /> –ù–æ–≤—ã–π –£—Ä–æ–≤–µ–Ω—å –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
    nextLevelText: "–û—Å–Ω–æ–≤—ã —É —Ç–µ–±—è –≤ –∫–∞—Ä–º–∞–Ω–µ, –ê–≥–µ–Ω—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—é? <Link href='/start-training' class='text-brand-blue hover:underline font-semibold'>–°–ª–µ–¥—É—é—â–∞—è –ú–∏—Å—Å–∏—è</Link> –∂–¥–µ—Ç!",
    tryLiveButton: "<FaWandMagicSparkles /> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ –°—Ç—É–¥–∏–∏",
    toggleButtonToWtf: "<FaPooStorm /> –í–∫–ª—é—á–∏—Ç—å –†–µ–∂–∏–º –ë–û–ì–ê (WTF?!)",
  },
  wtf: {
    pageTitle: "–ö–ê–†–¢–ò–ù–ö–ò –ú–ï–ù–Ø–¢–¨ ‚Äì –ö–ê–ö –î–í–ê –ë–ê–ô–¢–ê –ü–ï–†–ï–°–õ–ê–¢–¨!",
    pageSubtitle: "–≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫, —Å–∞–ª–∞–≥–∞! –ù–∞—É—á–∏—Å—å –º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π!",
    steps: [ 
      { id: 1, title: "–®–ê–ì 1: –ö–û–ü–ò–†–£–ô –°–¢–ê–†–´–ô URL", description: "–ù–∞—à–µ–ª –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∫–æ–¥–µ? –ö–û–ü–ò–†–ù–ò –ï–ï –ê–î–†–ï–°. –í—Å—ë.", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//1_copy_image_link.mp4", icon: "FaCopy", color: "brand-pink" },
      { id: 2, title: "–®–ê–ì 2: –ó–ê–õ–ï–ô –ù–û–í–£–Æ, –ö–û–ü–ò–†–£–ô URL", description: "–ó–∞–≥—Ä—É–∑–∏ –ù–û–í–£–Æ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ö–û–ü–ò–†–ù–ò –ï–ï –ê–î–†–ï–°. –ò–∑–∏.", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//2_upload_new_image.mp4", icon: "FaCloudArrowUp", color: "brand-blue" },
      { id: 3, title: "–®–ê–ì 3: –°–¢–£–î–ò–Ø -> CTRL+V, CTRL+V -> MAGIC!", description: "–ò–¥–∏ –≤ SUPERVIBE. –°—Ç–∞—Ä—ã–π URL -> –ù–æ–≤—ã–π URL. –ñ–ú–ò –ö–ù–û–ü–ö–£. –ë–æ—Ç —Å–∞–º –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç.", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//3_sitback_and_relax_its_swappin.mp4", icon: "FaRightLeft", color: "brand-purple" },
      { id: 4, title: "–®–ê–ì 4: PR –ì–û–¢–û–í! –¢–´ –ö–†–ê–°–ê–í–ß–ò–ö!", description: "PR —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å, —Å–º–µ—Ä–¥–∂–∏. –í—Å—ë! –¢—ã –ø–æ–º–µ–Ω—è–ª –∫–∞—Ä—Ç–∏–Ω–∫—É –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –∑–∞–≤–∞—Ä–∏–ª –¥–æ—à–∏–∫.", videoSrc: "https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//4_profit_check.mp4", icon: "FaThumbsUp", color: "brand-green" }
    ],
    nextLevelTitle: "<FaRocket /> –¢–´ –ü–†–û–ö–ê–ß–ê–õ–°–Ø, –ë–†–û!",
    nextLevelText: "–ú–µ–Ω—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äì —ç—Ç–æ –¥–ª—è –ª–æ—Ö–æ–≤. –¢—ã —É–∂–µ –ü–†–û. –ì–æ –Ω–∞ <Link href='/start-training' class='text-brand-blue hover:underline font-semibold'>–°–ª–µ–¥—É—é—â—É—é –ú–∏—Å—Å–∏—é</Link>, —Ç–∞–º –†–ï–ê–õ–¨–ù–´–ï –î–ï–õ–ê.",
    tryLiveButton: "<FaArrowRight /> –í –°—Ç—É–¥–∏—é, –ù–ï –¢–û–†–ú–û–ó–ò!",
    toggleButtonToNormal: "<FaBookOpen /> –í–µ—Ä–Ω—É—Ç—å –°–∫—É—á–Ω—É—é –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", 
  }
};

const colorClasses: Record<string, { text: string; border: string; shadow: string }> = {
  "brand-pink": { text: "text-brand-pink", border: "border-brand-pink", shadow: "shadow-pink-glow" },
  "brand-blue": { text: "text-brand-blue", border: "border-brand-blue", shadow: "shadow-blue-glow" },
  "brand-purple": { text: "text-brand-purple", border: "border-brand-purple", shadow: "shadow-purple-glow" },
  "brand-green": { text: "text-brand-green", border: "border-brand-green", shadow: "shadow-green-glow" },
};

function ImageSwapTutorialContent() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { dbUser, isAuthenticated } = useAppContext();
  const { addToast } = useAppToast();
  const heroTriggerId = useId().replace(/:/g, "-") + "-hero-trigger"; // Unique ID for trigger

  const initialModeFromUrl = searchParams.get('mode') === 'wtf';
  const [currentMode, setCurrentMode] = useState<'ru' | 'wtf'>(initialModeFromUrl ? 'wtf' : 'ru');

  const t = imageSwapTutorialTranslations[currentMode];
  const tutorialQuestId = "image-swap-mission";

  const handleTutorialCompletion = useCallback(async () => {
    if (isAuthenticated && dbUser?.user_id) {
      const result = await markTutorialAsCompleted(dbUser.user_id, tutorialQuestId);
      if (result.success && result.kiloVibesAwarded && result.kiloVibesAwarded > 0) {
        addToast(`::FaCheckCircle:: –ú–∏—Å—Å–∏—è "${imageSwapTutorialTranslations.ru.pageTitle}" –ø—Ä–æ–π–¥–µ–Ω–∞! +${result.kiloVibesAwarded} KiloVibes!`, "success");
      }
      result.newAchievements?.forEach(ach => {
        addToast(`üèÜ –ê—á–∏–≤–∫–∞: ${ach.name}!`, "success", 5000, { description: ach.description });
      });
    }
  }, [isAuthenticated, dbUser, addToast, tutorialQuestId]);

  useEffect(() => {
    handleTutorialCompletion();
  }, [handleTutorialCompletion]);

  const toggleMode = () => {
    const newMode = currentMode === 'ru' ? 'wtf' : 'ru';
    setCurrentMode(newMode);
    router.replace(`/tutorials/image-swap${newMode === 'wtf' ? '?mode=wtf' : ''}`, { scroll: false });
  };
  
  useEffect(() => {
    const modeFromUrl = searchParams.get('mode') === 'wtf' ? 'wtf' : 'ru';
    if (modeFromUrl !== currentMode) {
      setCurrentMode(modeFromUrl);
    }
  }, [searchParams, currentMode]);

  const stepsToRender = t.steps;
  const pageMainColorKey = "brand-green"; 

  return (
    <TutorialPageContainer>
      <RockstarHeroSection 
        title={t.pageTitle} 
        subtitle={t.pageSubtitle}
        triggerElementSelector={`#${heroTriggerId}`}
        mainBackgroundImageUrl="https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/tutorial-1-img-swap//Screenshot_2025-05-17-11-07-09-401_org.telegram.messenger.jpg" 
        backgroundImageObjectUrl="https://inmctohsodgdohamhzag.supabase.co/storage/v1/object/public/appStore/oneSitePls_transparent_icon.png"
      >
        <Button 
            onClick={toggleMode} 
            variant="outline" 
            size="lg"
            className={cn(
              "bg-card/80 backdrop-blur-md hover:bg-pink-600/30 transition-all duration-200 font-semibold shadow-xl hover:shadow-pink-600/50 focus:ring-offset-background active:scale-95 transform hover:scale-105",
              currentMode === 'ru' 
                ? "border-pink-500/80 text-pink-400 hover:text-pink-200 focus:ring-2 focus:ring-pink-500" 
                : "border-blue-500/80 text-blue-400 hover:text-blue-200 focus:ring-2 focus:ring-blue-500"
            )}
        >
            <VibeContentRenderer content={currentMode === 'ru' ? t.toggleButtonToWtf : t.toggleButtonToNormal} />
        </Button>
      </RockstarHeroSection>
      
      <div id={heroTriggerId} style={{ height: '250vh' }} aria-hidden="true" />

      <TutorialContentContainer className="relative">
        <div className="space-y-16 md:space-y-24">
          {stepsToRender.map((step, index) => {
            const stepColorData = colorClasses[step.color as keyof typeof colorClasses] || colorClasses["brand-purple"];
            const hasVideo = !!step.videoSrc && typeof step.videoSrc === 'string';

            return (
              <TutorialStepSection 
                key={step.id} 
                className={cn(index > 0 && "pt-12 md:pt-16")} 
                isLastStep={index === stepsToRender.length -1}
              >
                <div className={cn(
                  "flex flex-col gap-6 md:gap-10",
                  index % 2 === 0 ? "md:flex-row" : "md:flex-row-reverse"
                )}>
                  <div className={cn("space-y-4 flex flex-col items-start justify-center", hasVideo ? "md:w-2/5 lg:w-1/3" : "w-full")}>
                    <h2 className={cn("text-3xl md:text-4xl font-orbitron flex items-center gap-3", stepColorData.text)}>
                      <VibeContentRenderer content={`::${step.icon}::`} className="text-3xl opacity-90" />
                      <VibeContentRenderer content={step.title} />
                    </h2>
                    <p className="text-muted-foreground text-base md:text-lg leading-relaxed">
                      <VibeContentRenderer content={step.description} />
                    </p>
                    {step.id === 3 && ( 
                      <Button asChild variant="default" size="lg" className={cn( 
                        "inline-flex items-center justify-center px-8 py-3 text-base font-semibold rounded-md transition-colors shadow-lg mt-4",
                        "active:scale-95 transform hover:scale-105"
                        )}>
                        <Link href="/repo-xml?flow=imageSwap">
                           <VibeContentRenderer content="–ö –°—Ç—É–¥–∏–∏ SUPERVIBE <FaArrowUpRightFromSquare />" />
                        </Link>
                      </Button>
                    )}
                  </div>
                 
                  {hasVideo && (
                    <div className="md:w-3/5 lg:w-2/3">
                      <div className={cn("rounded-xl overflow-hidden border-2 shadow-2xl", stepColorData.border, stepColorData.shadow, "bg-black")}>
                        <ScrollControlledVideoPlayer 
                          src={step.videoSrc} 
                          className="w-full" 
                        />
                      </div>
                    </div>
                  )}
                </div>
              </TutorialStepSection>
            );
          })}
        </div>
      </TutorialContentContainer>
      
      <NextLevelTeaser 
        title={t.nextLevelTitle}
        text={t.nextLevelText}
        buttonText={t.tryLiveButton}
        buttonLink="/start-training"
        mainColorClassKey={pageMainColorKey}
      />
    </TutorialPageContainer>
  );
}

export default function ImageSwapTutorialPage() {
  return (
    <Suspense fallback={<TutorialLoader />}>
      <ImageSwapTutorialContent />
    </Suspense>
  );
}