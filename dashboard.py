import os
import subprocess
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECTS_DIR = os.path.expanduser("~/Documents/V0_Projects")
REPO_DIR = os.path.join(PROJECTS_DIR, "cartest")
VERSION_FILE = os.path.join(REPO_DIR, "version.ini")
V0_DEV_URL = "https://v0.dev/chat/fork-of-rastaman-shop-KvYJosUCML9"
VERCEL_URL = "https://vercel.com"
SUPABASE_URL = "https://supabase.com"
GITHUB_URL = "https://github.com/salavey13/cartest"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ VERSION.ini
config = {}
if os.path.exists(VERSION_FILE):
    with open(VERSION_FILE, "r", encoding="utf-8") as f:
        for line in f:
            if "=" in line:
                key, value = line.strip().split("=", 1)
                config[key] = value


def save_config():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ VERSION.ini."""
    with open(VERSION_FILE, "w", encoding="utf-8") as f:
        for key, value in config.items():
            f.write(f"{key}={value}\n")


def run_command(command, success_message="–£—Å–ø–µ—Ö", error_message="–û—à–∏–±–∫–∞"):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–±–æ–ª–æ—á–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        messagebox.showinfo("–£—Å–ø–µ—Ö", success_message + "\n" + result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", error_message + "\n" + e.stderr)
        return False


def apply_zip_updates():
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å ZIP-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    zip_path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ ZIP —Ñ–∞–π–ª",
        filetypes=[("ZIP —Ñ–∞–π–ª—ã", "*.zip")],
        initialdir=REPO_DIR
    )
    if not zip_path:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "ZIP —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å ZIP –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try:
        extract_dir = os.path.join(os.path.dirname(zip_path), "temp_unzip")
        subprocess.run(f"powershell -Command \"Expand-Archive -Force '{zip_path}' -DestinationPath '{extract_dir}'\"", shell=True, check=True)
        subprocess.run(f"xcopy /s /y \"{extract_dir}\\*\" \"{REPO_DIR}\"", shell=True, check=True)
        subprocess.run(f"rmdir /s /q \"{extract_dir}\"", shell=True, check=True)

        # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏
        current_version = int(config.get("CURRENT_VERSION", 0))
        next_version = current_version + 1
        config["CURRENT_VERSION"] = str(next_version)
        config["LAST_APPLIED_ZIP"] = os.path.basename(zip_path)
        save_config()

        # –°–æ–∑–¥–∞—Ç—å Pull Request
        branch_name = f"update-{datetime.now().strftime('%Y%m%d%H%M%S')}"
        subprocess.run(f"git checkout -b {branch_name}", shell=True, check=True)
        subprocess.run("git add .", shell=True, check=True)
        commit_msg = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç {os.path.basename(zip_path)} | –í–µ—Ä—Å–∏—è {next_version}"
        subprocess.run(f"git commit -m \"{commit_msg}\"", shell=True, check=True)
        subprocess.run(f"git push origin {branch_name}", shell=True, check=True)
        subprocess.run("git checkout main", shell=True, check=True)
        subprocess.run("git pull origin main", shell=True, check=True)
        subprocess.Popen(["start", "https://github.com/salavey13/cartest/pulls"], shell=True)
        messagebox.showinfo("–£—Å–ø–µ—Ö", "ZIP –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏ —Å–æ–∑–¥–∞–Ω Pull Request.")
    except subprocess.CalledProcessError as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å ZIP –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e.stderr}")


def reset_supabase_db(sql_file=None):
    """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º SQL —Ñ–∞–π–ª–æ–º."""
    if sql_file is None:
        sql_file = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ SQL —Ñ–∞–π–ª",
            filetypes=[("SQL —Ñ–∞–π–ª—ã", "*.sql")],
            initialdir=REPO_DIR
        )
        if not sql_file:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "SQL —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
        return

    run_command(f"supabase db reset --sql \"{sql_file}\"", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


def configure_vercel():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel."""
    if "VERCEL_PROJECT_URL" in config:
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"Vercel —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config['VERCEL_PROJECT_URL']}")
        return

    try:
        subprocess.run("vercel login", shell=True, check=True)
        subprocess.run(f"cd \"{REPO_DIR}\" && vercel projects create cartest --yes", shell=True, check=True)
        subprocess.run(f"cd \"{REPO_DIR}\" && vercel deploy --prod", shell=True, check=True)
        vercel_url = subprocess.check_output("vercel inspect --scope", shell=True, text=True).strip()
        config["VERCEL_PROJECT_URL"] = vercel_url
        save_config()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"Vercel –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ: {vercel_url}")
    except subprocess.CalledProcessError as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Vercel: {e.stderr}")


def configure_telegram_bot():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞."""
    if "TELEGRAM_BOT_TOKEN" not in config:
        bot_token = tk.simpledialog.askstring("–í–≤–æ–¥", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞:")
        if bot_token:
            config["TELEGRAM_BOT_TOKEN"] = bot_token
            save_config()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    if "ADMIN_CHAT_ID" not in config:
        admin_chat_id = tk.simpledialog.askstring("–í–≤–æ–¥", "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞:")
        if admin_chat_id:
            config["ADMIN_CHAT_ID"] = admin_chat_id
            save_config()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    if "VERCEL_PROJECT_URL" in config:
        if "TELEGRAM_BOT_TOKEN" in config:
            run_command(f"vercel env add TELEGRAM_BOT_TOKEN {config['TELEGRAM_BOT_TOKEN']} production")
        if "ADMIN_CHAT_ID" in config:
            run_command(f"vercel env add ADMIN_CHAT_ID {config['ADMIN_CHAT_ID']} production")


def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è Telegram –±–æ—Ç–∞."""
    if "VERCEL_PROJECT_URL" not in config:
        messagebox.showerror("–û—à–∏–±–∫–∞", "URL Vercel –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    webhook_url = f"https://{config['VERCEL_PROJECT_URL']}/api/telegramWebhook"
    run_command(f"npx tsx scripts/setWebhook.ts", "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook.")


def generate_embeddings():
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    if not messagebox.askyesno(
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        "–≠—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
    ):
        return

    run_command(
        "npx tsx utils/embeddingsGenerator.ts",
        "–í–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è.",
    )


def generate_achievements():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–µ–π–º–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    achievements = []
    if "VERCEL_PROJECT_URL" in config:
        achievements.append("üåü Vercel –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    if "SUPABASE_PROJECT_ID" in config:
        achievements.append("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase –≥–æ—Ç–æ–≤–∞!")
    if "TELEGRAM_BOT_TOKEN" in config and "ADMIN_CHAT_ID" in config:
        achievements.append("üî• Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    if os.path.exists(os.path.join(REPO_DIR, "seed.sql")):
        achievements.append("üå± –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ seed.sql!")
    if not achievements:
        achievements.append("‚ú® –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel!")
    return achievements


def get_user_level():
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    achievements = generate_achievements()
    if len(achievements) >= 5:
        return "Badass"
    elif len(achievements) >= 3:
        return "Advanced"
    elif len(achievements) >= 1:
        return "Intermediate"
    else:
        return "Beginner"


def is_telegram_dashboard_unlocked():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ Telegram Dashboard."""
    return all(key in config for key in ["VERCEL_PROJECT_URL", "TELEGRAM_BOT_TOKEN", "ADMIN_CHAT_ID"])


def open_telegram_dashboard():
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram."""
    telegram_window = tk.Toplevel(root)
    telegram_window.title("Telegram –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    telegram_window.geometry("800x600")

    # –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    bot_frame = ttk.Frame(telegram_window)
    bot_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(bot_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", font=("Arial", 16)).pack(anchor=tk.W)
    ttk.Button(bot_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", command=lambda: messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")).pack(fill=tk.X, padx=10, pady=5)
    ttk.Button(bot_frame, text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", command=lambda: messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")).pack(fill=tk.X, padx=10, pady=5)

    # –†–∞–∑–¥–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    payment_frame = ttk.Frame(telegram_window)
    payment_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(payment_frame, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", font=("Arial", 16)).pack(anchor=tk.W)
    ttk.Button(payment_frame, text="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç", command=lambda: messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")).pack(fill=tk.X, padx=10, pady=5)
    ttk.Button(payment_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π", command=lambda: messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞!")).pack(fill=tk.X, padx=10, pady=5)

    # –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    user_frame = ttk.Frame(telegram_window)
    user_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(user_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", font=("Arial", 16)).pack(anchor=tk.W)
    ttk.Button(user_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", command=lambda: messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!")).pack(fill=tk.X, padx=10, pady=5)
    ttk.Button(user_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=lambda: messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")).pack(fill=tk.X, padx=10, pady=5)


def refresh_dashboard():
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_level = get_user_level()
    for widget in root.winfo_children():
        widget.destroy()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header_frame = ttk.Frame(root)
    header_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(header_frame, text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º", font=("Arial", 24)).pack()

    # –†–∞–∑–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_frame = ttk.Frame(root)
    progress_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(progress_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", font=("Arial", 16)).pack(anchor=tk.W)
    achievements = generate_achievements()
    for achievement in achievements:
        ttk.Label(progress_frame, text=f"‚úÖ {achievement}", font=("Arial", 12)).pack(anchor=tk.W)

    # –†–∞–∑–¥–µ–ª –¥–µ–π—Å—Ç–≤–∏–π
    actions_frame = ttk.Frame(root)
    actions_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(actions_frame, text="–î–µ–π—Å—Ç–≤–∏—è:", font=("Arial", 16)).pack(anchor=tk.W)

    def add_button(text, command, warning=None, level="Beginner"):
        """Helper function to add buttons with optional warnings and level restrictions."""
        if user_level == "Badass" or level == "Beginner":
            def safe_command():
                if warning and not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", warning):
                    return
                command()
            ttk.Button(actions_frame, text=text, command=safe_command).pack(fill=tk.X, padx=10, pady=5)

    add_button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å ZIP –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", apply_zip_updates, "–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", level="Beginner")
    add_button("–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase", reset_supabase_db, "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", level="Intermediate")
    add_button("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Vercel", configure_vercel, level="Beginner")
    add_button("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –±–æ—Ç", configure_telegram_bot, level="Intermediate")
    add_button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook", set_webhook, level="Advanced")
    add_button("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è", generate_embeddings, "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", level="Advanced")
# Telegram Dashboard Unlock Check
    if is_telegram_dashboard_unlocked():
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ Telegram Dashboard! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
        ttk.Button(actions_frame, text="–û—Ç–∫—Ä—ã—Ç—å Telegram Dashboard", command=open_telegram_dashboard).pack(fill=tk.X, padx=10, pady=5)
    # Pro Tips Section
    pro_tips_frame = ttk.Frame(root)
    pro_tips_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(pro_tips_frame, text="Pro Tips:", font=("Arial", 16)).pack(anchor=tk.W)
    ttk.Label(pro_tips_frame, text="‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Vercel + Supabase: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Vercel -> –†–∞—Å—à–∏—Ä–µ–Ω–∏—è -> Supabase Integration.", font=("Arial", 12)).pack(anchor=tk.W)
    ttk.Label(pro_tips_frame, text="‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.", font=("Arial", 12)).pack(anchor=tk.W)

    # Links Section
    links_frame = ttk.Frame(root)
    links_frame.pack(fill=tk.X, padx=20, pady=10)
    ttk.Label(links_frame, text="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:", font=("Arial", 16)).pack(anchor=tk.W)

    links = [
        ("Vercel", VERCEL_URL),
        ("Supabase", SUPABASE_URL),
        ("GitHub", GITHUB_URL),
        ("v0.dev –ü—Ä–æ–µ–∫—Ç", V0_DEV_URL),
        ("Qwen Chat", "https://chat.qwenlm.ai"),
        ("Supabase SQL Console", "https://app.supabase.com/project/YOUR_PROJECT_ID/sql"),
    ]

    for name, url in links:
        ttk.Button(links_frame, text=name, command=lambda u=url: subprocess.Popen(["start", u], shell=True)).pack(fill=tk.X, padx=10, pady=2)

    # Exit Button
    ttk.Button(root, text="–í—ã—Ö–æ–¥", command=root.quit).pack(fill=tk.X, padx=20, pady=10)


# GUI Setup
root = tk.Tk()
root.title("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º")
root.geometry("800x600")
root.configure(bg="#2d2d2d")  # Dark theme background

style = ttk.Style()
style.theme_use("clam")
style.configure("TLabel", background="#2d2d2d", foreground="#ffffff", font=("Arial", 12))
style.configure("TButton", background="#4d4d4d", foreground="#ffffff", font=("Arial", 12))
style.configure("TFrame", background="#2d2d2d")

refresh_dashboard()
root.mainloop()
