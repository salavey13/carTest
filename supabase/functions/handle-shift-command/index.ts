import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const VERCEL_NOTIFY_ENDPOINT = Deno.env.get("VERCEL_NOTIFICATION_API_ENDPOINT")!;
const CRON_SECRET = Deno.env.get("CRON_SECRET")!;

interface VercelNotificationPayload {
  chatId: number | string;
  message: string;
  keyboardType?: 'inline' | 'reply';
  buttons?: { text: string; url?: string; callback_data?: string; }[][];
  removeKeyboard?: boolean;
}

async function notifyVercel(payload: VercelNotificationPayload) {
  if (!VERCEL_NOTIFY_ENDPOINT) {
    console.error("Vercel notification endpoint is not set.");
    return;
  }
  try {
    await fetch(VERCEL_NOTIFY_ENDPOINT, {
      method: "POST",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": `Bearer ${CRON_SECRET}` 
      },
      body: JSON.stringify(payload),
    });
  } catch (error) {
    console.error("Failed to notify Vercel:", error);
  }
}

serve(async (req: Request) => {
  const { userId, chatId, username, action, location } = await req.json();
  const supabaseAdmin = createClient(
    Deno.env.get("SUPABASE_URL") ?? "",
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
  );

  try {
    // We only need to find one active membership for the user
    const { data: crewMember, error: crewError } = await supabaseAdmin
      .from("crew_members")
      .select("crew_id, status, crews(owner_id, name)")
      .eq("user_id", userId)
      .eq("status", "active")
      .single();

    if (crewError || !crewMember) {
      await notifyVercel({ chatId, message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç–∫–∏–ø–∞–∂–∞." });
      return new Response("ok");
    }

    const { crews: crew, status: live_status } = crewMember;
    if (!crew) {
        throw new Error(`Crew data missing for member ${userId}`);
    }
    const { owner_id: ownerId, name: crewName } = crew;
    
    let updateData: any = {};
    let userMessage = "";
    let ownerMessage = "";

    if (action === 'clock_in' && live_status === 'offline') {
        updateData = { status: 'online' };
        userMessage = "‚úÖ *–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞.* –í—Ä–µ–º—è –ø–æ—à–ª–æ. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã!";
        ownerMessage = `üü¢ @${username} –Ω–∞—á–∞–ª —Å–º–µ–Ω—É –≤ —ç–∫–∏–ø–∞–∂–µ *'${crewName}'*.`;
    } else if (action === 'clock_out' && live_status !== 'offline') {
        updateData = { status: 'offline', last_location: null };
        userMessage = `‚úÖ *–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.*\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!`;
        ownerMessage = `üî¥ @${username} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –≤ —ç–∫–∏–ø–∞–∂–µ *'${crewName}'*.`;
    } else if (action === 'toggle_ride' && live_status !== 'offline') {
        const newStatus = live_status === 'online' ? 'riding' : 'online';
        updateData = { status: newStatus };
        if (newStatus === 'riding' && location) {
            updateData.last_location = `POINT(${location.longitude} ${location.latitude})`;
            userMessage = "üèçÔ∏è –°—Ç–∞—Ç—É—Å: *–ù–∞ –ë–∞–π–∫–µ*. –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!";
        } else if (newStatus === 'riding' && !location) {
             userMessage = "üìç –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ–±—è –Ω–∞ –∫–∞—Ä—Ç–µ, *–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é*.";
        } else { // going back to online
             updateData.last_location = null;
             userMessage = "üè¢ –°—Ç–∞—Ç—É—Å: *–û–Ω–ª–∞–π–Ω*. –°–Ω–æ–≤–∞ –≤ –±–æ–∫—Å–µ.";
        }
        ownerMessage = `‚öôÔ∏è –°—Ç–∞—Ç—É—Å @${username} –≤ *'${crewName}'*: ${newStatus === 'riding' ? "–ù–∞ –ë–∞–π–∫–µ" : "–û–Ω–ª–∞–π–Ω"}`;
    } else {
        // Just show the keyboard, no state change
    }

    if (Object.keys(updateData).length > 0) {
        const { error: updateError } = await supabaseAdmin
            .from("crew_members")
            .update(updateData)
            .eq("user_id", userId)
            .eq("status", "active");
        if(updateError) throw updateError;
        
        await notifyVercel({ chatId, message: userMessage, removeKeyboard: true });
        if(ownerId) await notifyVercel({ chatId: ownerId, message: ownerMessage });
    } else {
        const toggleRideLabel = live_status === 'online' ? "üèçÔ∏è –ù–∞ –ë–∞–π–∫–µ" : "üè¢ –í –ë–æ–∫—Å–µ";
        const buttons = live_status !== 'offline'
            ? [ [{ text: toggleRideLabel }], [{ text: "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –°–º–µ–Ω—É" }] ]
            : [ [{ text: "‚úÖ –ù–∞—á–∞—Ç—å –°–º–µ–Ω—É" }] ];
        await notifyVercel({ chatId, message: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboardType: 'reply', buttons });
    }

    return new Response("ok");
  } catch (error) {
    console.error("Error in handle-shift-command:", error);
    await notifyVercel({ chatId, message: `üö® –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: \`\`\`${error.message}\`\`\`` });
    return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: { "Content-Type": "application/json" } });
  }
});