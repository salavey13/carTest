export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      answers: {
        Row: {
          id: number
          question_id: number | null
          result: string | null
          text: string
        }
        Insert: {
          id?: number
          question_id?: number | null
          result?: string | null
          text: string
        }
        Update: {
          id?: number
          question_id?: number | null
          result?: string | null
          text?: string
        }
        Relationships: [
          {
            foreignKeyName: "answers_question_id_fkey"
            columns: ["question_id"]
            isOneToOne: false
            referencedRelation: "questions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "answers_result_fkey"
            columns: ["result"]
            isOneToOne: false
            referencedRelation: "cars"
            referencedColumns: ["id"]
          },
        ]
      }
      article_sections: {
        Row: {
          article_id: string
          content: string
          created_at: string
          id: string
          image_url: string | null
          section_order: number
          title: string
          updated_at: string
        }
        Insert: {
          article_id: string
          content: string
          created_at?: string
          id?: string
          image_url?: string | null
          section_order?: number
          title: string
          updated_at?: string
        }
        Update: {
          article_id?: string
          content?: string
          created_at?: string
          id?: string
          image_url?: string | null
          section_order?: number
          title?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "article_sections_article_id_fkey"
            columns: ["article_id"]
            isOneToOne: false
            referencedRelation: "articles"
            referencedColumns: ["id"]
          },
        ]
      }
      articles: {
        Row: {
          author_id: string | null
          category: string | null
          created_at: string
          id: string
          image_url: string | null
          is_premium: boolean
          published_at: string | null
          slug: string
          status: string
          summary: string | null
          tags: string[] | null
          title: string
          updated_at: string
        }
        Insert: {
          author_id?: string | null
          category?: string | null
          created_at?: string
          id?: string
          image_url?: string | null
          is_premium?: boolean
          published_at?: string | null
          slug: string
          status?: string
          summary?: string | null
          tags?: string[] | null
          title: string
          updated_at?: string
        }
        Update: {
          author_id?: string | null
          category?: string | null
          created_at?: string
          id?: string
          image_url?: string | null
          is_premium?: boolean
          published_at?: string | null
          slug?: string
          status?: string
          summary?: string | null
          tags?: string[] | null
          title?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "articles_author_id_fkey"
            columns: ["author_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      cars: {
        Row: {
          daily_price: number | null
          description: string | null
          embedding: number[] | null // vector type, pgvector
          id: string // text, primary key
          image_url: string | null
          is_test_result: boolean
          make: string | null
          model: string | null
          owner_id: string | null
          rent_link: string | null
          specs: Json | null
          status: string | null // e.g., 'available', 'rented'
          // Missing created_at, updated_at if they exist in actual DB
        }
        Insert: {
          daily_price?: number | null
          description?: string | null
          embedding?: number[] | null
          id?: string // Defaults to uuid_generate_v4() if that's the DB default
          image_url?: string | null
          is_test_result?: boolean
          make?: string | null
          model?: string | null
          owner_id?: string | null
          rent_link?: string | null
          specs?: Json | null
          status?: string | null
        }
        Update: {
          daily_price?: number | null
          description?: string | null
          embedding?: number[] | null
          id?: string
          image_url?: string | null
          is_test_result?: boolean
          make?: string | null
          model?: string | null
          owner_id?: string | null
          rent_link?: string | null
          specs?: Json | null
          status?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "cars_owner_id_fkey"
            columns: ["owner_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      characters: {
        Row: {
          created_at: string
          description: string | null
          id: string
          image_url: string | null
          metadata: Json | null
          name: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          created_at?: string
          description?: string | null
          id?: string
          image_url?: string | null
          metadata?: Json | null
          name: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          created_at?: string
          description?: string | null
          id?: string
          image_url?: string | null
          metadata?: Json | null
          name?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "characters_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      coze_responses: {
        Row: {
          bot_id: string | null
          coze_chat_id: string | null
          coze_conversation_id: string | null
          created_at: string
          id: number
          metadata: Json | null
          request_content: string | null
          response_content: string | null
          user_id: string | null
        }
        Insert: {
          bot_id?: string | null
          coze_chat_id?: string | null
          coze_conversation_id?: string | null
          created_at?: string
          id?: number
          metadata?: Json | null
          request_content?: string | null
          response_content?: string | null
          user_id?: string | null
        }
        Update: {
          bot_id?: string | null
          coze_chat_id?: string | null
          coze_conversation_id?: string | null
          created_at?: string
          id?: number
          metadata?: Json | null
          request_content?: string | null
          response_content?: string | null
          user_id?: string | null
        }
        Relationships: []
      }
      invoices: {
        Row: {
          amount: number
          created_at: string
          currency: string
          id: string // This is the invoice_payload usually
          metadata: Json | null
          status: "pending" | "paid" | "failed" | "cancelled"
          subscription_id: number | null
          type: string // e.g. "subscription", "donation", "rental"
          updated_at: string
          user_id: string
        }
        Insert: {
          amount: number
          created_at?: string
          currency?: string
          id: string
          metadata?: Json | null
          status?: "pending" | "paid" | "failed" | "cancelled"
          subscription_id?: number | null
          type: string
          updated_at?: string
          user_id: string
        }
        Update: {
          amount?: number
          created_at?: string
          currency?: string
          id?: string
          metadata?: Json | null
          status?: "pending" | "paid" | "failed" | "cancelled"
          subscription_id?: number | null
          type?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "invoices_subscription_id_fkey"
            columns: ["subscription_id"]
            isOneToOne: false
            referencedRelation: "subscriptions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoices_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      questions: {
        Row: {
          id: number
          position: number
          text: string
          theme: string
        }
        Insert: {
          id?: number
          position: number
          text: string
          theme: string
        }
        Update: {
          id?: number
          position?: number
          text?: string
          theme?: string
        }
        Relationships: []
      }
      rentals: {
        Row: {
          car_id: string // text, FK to cars.id
          created_at: string
          end_date: string
          metadata: Json | null
          payment_status: "pending" | "paid" | "failed" | "refunded"
          rental_id: number // integer, primary key
          start_date: string
          status: "pending" | "confirmed" | "active" | "completed" | "cancelled"
          total_cost: number
          updated_at: string
          user_id: string
        }
        Insert: {
          car_id: string
          created_at?: string
          end_date: string
          metadata?: Json | null
          payment_status?: "pending" | "paid" | "failed" | "refunded"
          rental_id?: number
          start_date: string
          status?: "pending" | "confirmed" | "active" | "completed" | "cancelled"
          total_cost: number
          updated_at?: string
          user_id: string
        }
        Update: {
          car_id?: string
          created_at?: string
          end_date?: string
          metadata?: Json | null
          payment_status?: "pending" | "paid" | "failed" | "refunded"
          rental_id?: number
          start_date?: string
          status?: "pending" | "confirmed" | "active" | "completed" | "cancelled"
          total_cost?: number
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "rentals_car_id_fkey"
            columns: ["car_id"]
            isOneToOne: false
            referencedRelation: "cars"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "rentals_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      subscriptions: {
        Row: {
          created_at: string
          description: string | null
          id: number // integer, primary key
          name: string
          price_monthly: number | null
          price_yearly: number | null
          status: "active" | "inactive" | "archived"
          updated_at: string
        }
        Insert: {
          created_at?: string
          description?: string | null
          id?: number
          name: string
          price_monthly?: number | null
          price_yearly?: number | null
          status?: "active" | "inactive" | "archived"
          updated_at?: string
        }
        Update: {
          created_at?: string
          description?: string | null
          id?: number
          name?: string
          price_monthly?: number | null
          price_yearly?: number | null
          status?: "active" | "inactive" | "archived"
          updated_at?: string
        }
        Relationships: []
      }
      tasks: {
        Row: {
          assigned_to: string | null
          completed_at: string | null
          created_at: string
          description: string | null
          due_date: string | null
          id: string
          metadata: Json | null
          priority: number
          project_id: string | null
          status: string
          title: string
          updated_at: string
        }
        Insert: {
          assigned_to?: string | null
          completed_at?: string | null
          created_at?: string
          description?: string | null
          due_date?: string | null
          id?: string
          metadata?: Json | null
          priority?: number
          project_id?: string | null
          status?: string
          title: string
          updated_at?: string
        }
        Update: {
          assigned_to?: string | null
          completed_at?: string | null
          created_at?: string
          description?: string | null
          due_date?: string | null
          id?: string
          metadata?: Json | null
          priority?: number
          project_id?: string | null
          status?: string
          title?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "tasks_assigned_to_fkey"
            columns: ["assigned_to"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      user_results: {
        Row: {
          car_id: string // text, FK to cars.id
          created_at: string
          user_id: string // text, FK to users.user_id
          // Composite primary key (user_id, car_id) or an 'id' field is typical
        }
        Insert: {
          car_id: string
          created_at?: string
          user_id: string
        }
        Update: {
          car_id?: string
          created_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_results_car_id_fkey"
            columns: ["car_id"]
            isOneToOne: false
            referencedRelation: "cars"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_results_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["user_id"]
          },
        ]
      }
      users: {
        Row: {
          active_organizer_id: string | null
          avatar_url: string | null
          badges: Json | null
          created_at: string
          description: string | null
          full_name: string | null
          language_code: string | null
          metadata: Json | null
          // Missing subscription_id field if it's used as per supabase.ts
          role: "attendee" | "admin" | "user" // Extended roles
          status: "free" | "pro" | "admin" | "pending_approval" | "verified" // Extended statuses
          test_progress: Json | null
          updated_at: string
          user_id: string // text, primary key
          username: string | null
          website: string | null
        }
        Insert: {
          active_organizer_id?: string | null
          avatar_url?: string | null
          badges?: Json | null
          created_at?: string
          description?: string | null
          full_name?: string | null
          language_code?: string | null
          metadata?: Json | null
          role?: "attendee" | "admin" | "user"
          status?: "free" | "pro" | "admin" | "pending_approval" | "verified"
          test_progress?: Json | null
          updated_at?: string
          user_id: string
          username?: string | null
          website?: string | null
        }
        Update: {
          active_organizer_id?: string | null
          avatar_url?: string | null
          badges?: Json | null
          created_at?: string
          description?: string | null
          full_name?: string | null
          language_code?: string | null
          metadata?: Json | null
          role?: "attendee" | "admin" | "user"
          status?: "free" | "pro" | "admin" | "pending_approval" | "verified"
          test_progress?: Json | null
          updated_at?: string
          user_id?: string
          username?: string | null
          website?: string | null
        }
        Relationships: []
      }
      videos: {
        Row: {
          channel_id: string | null
          created_at: string
          description: string | null
          duration_seconds: number | null
          id: string
          metadata: Json | null
          published_at: string | null
          tags: string[] | null
          thumbnail_url: string | null
          title: string
          updated_at: string
          view_count: number | null
          youtube_video_id: string
        }
        Insert: {
          channel_id?: string | null
          created_at?: string
          description?: string | null
          duration_seconds?: number | null
          id?: string
          metadata?: Json | null
          published_at?: string | null
          tags?: string[] | null
          thumbnail_url?: string | null
          title: string
          updated_at?: string
          view_count?: number | null
          youtube_video_id: string
        }
        Update: {
          channel_id?: string | null
          created_at?: string
          description?: string | null
          duration_seconds?: number | null
          id?: string
          metadata?: Json | null
          published_at?: string | null
          tags?: string[] | null
          thumbnail_url?: string | null
          title?: string
          updated_at?: string
          view_count?: number | null
          youtube_video_id?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      search_cars: { // Parameters and return type must match DB function
        Args: {
          query_embedding: number[] // vector
          match_count: number
        }
        // This return type should match what the DB function actually returns.
        // The original error was about `id` type, ensure this matches `cars.id` (text).
        Returns: {
          id: string // text
          make: string
          model: string
          similarity: number
          description?: string // Assuming function returns these
          image_url?: string
          daily_price?: number
          rent_link?: string
        }[]
      }
      similar_cars: {
        Args: {
          p_car_id: string // text, to match cars.id
          p_match_count?: number
        }
        // This should return rows matching the 'cars' table structure
        Returns: Database["public"]["Tables"]["cars"]["Row"][]
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}