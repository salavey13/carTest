import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";
import animate from "tailwindcss-animate";
import typography from "@tailwindcss/typography";

// Helper function to convert HSL string from CSS variables to RGB string
// (More robust than hex conversion as source is HSL)
const hslVarToRgbString = (hslVar: string): string => {
  // Extract H, S, L percentages from "H S% L%" format
  const match = hslVar.match(/(\d+)\s+([\d.]+)%\s+([\d.]+)%/);
  if (!match) return "0, 0, 0"; // Fallback
  const [, hStr, sStr, lStr] = match;
  const h = parseInt(hStr, 10);
  const s = parseFloat(sStr) / 100;
  const l = parseFloat(lStr) / 100;

  // HSL to RGB conversion logic (standard algorithm)
  let r, g, b;
  if (s === 0) {
    r = g = b = l; // achromatic
  } else {
    const hue2rgb = (p: number, q: number, t: number): number => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    };
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p = 2 * l - q;
    const hNormalized = h / 360;
    r = hue2rgb(p, q, hNormalized + 1 / 3);
    g = hue2rgb(p, q, hNormalized);
    b = hue2rgb(p, q, hNormalized - 1 / 3);
  }
  // Return comma-separated string for CSS rgba()
  return `${Math.round(r * 255)}, ${Math.round(g * 255)}, ${Math.round(b * 255)}`;
};

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        // Define colors using HSL variables from globals.css
        // This ensures consistency between CSS and Tailwind utilities
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",

        // Brand colors also defined using HSL vars
        "brand-orange": "hsl(var(--brand-orange))",
        "brand-blue": "hsl(var(--brand-blue))",
        "brand-green": "hsl(var(--brand-green))",
        "brand-pink": "hsl(var(--brand-pink))",
        "brand-purple": "hsl(var(--brand-purple))",
        "brand-cyan": "hsl(var(--brand-cyan))", // Added cyan explicitly
        "brand-yellow": "hsl(var(--brand-yellow))", // Added yellow explicitly
        "neon-lime": "hsl(var(--neon-lime))",

        // Define specific utility colors if needed, can use HSL vars too
        "dark-bg": "hsl(var(--background))", // Or use specific var like --dark-bg if different
        "dark-card": "hsl(var(--card))",     // Or use specific var like --dark-card
        "light-text": "hsl(var(--foreground))", // Or use specific var like --light-text
        "accent-text": "hsl(var(--accent-text))",

        // Chart colors
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        // Sidebar colors
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      fontFamily: {
        sans: ["Inter", ...fontFamily.sans],
        mono: ["monospace", ...fontFamily.mono],
        orbitron: ["Orbitron", "sans-serif"], // Ensure Orbitron is usable
      },
      boxShadow: {
        // Use CSS variables directly within rgba() for dynamic colors
        "glow-sm": "0 0 8px rgba(var(--glow-color-rgb, 242, 128, 170), 0.5)", // Fallback soft pink
        "glow-md": "0 0 15px rgba(var(--glow-color-rgb, 242, 128, 170), 0.6)",
        "glow-lg": "0 0 25px rgba(var(--glow-color-rgb, 242, 128, 170), 0.7)",
        // Example using specific brand color RGB vars from CSS
        'brand-cyan-glow': '0 0 12px rgba(var(--brand-cyan-rgb), 0.5)',
        'brand-pink-glow': '0 0 12px rgba(var(--brand-pink-rgb), 0.5)',
      },
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic": "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
        // Use CSS variables for gradients
        "page-gradient": "linear-gradient(145deg, hsl(var(--background)), hsl(var(--card)))",
        "brand-gradient": "linear-gradient(to right, hsl(var(--brand-purple)), hsl(var(--brand-pink)), hsl(var(--brand-orange)))",
      },
      animation: {
        "subtle-pulse": "subtle-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        // Add animations from globals.css if needed as utilities
        'spin-slow': 'spin 3s linear infinite',
        'gradient-text-flow': 'gradient-text-flow 3s linear infinite',
        'wiggle': 'wiggle 0.5s ease-in-out infinite', // Example
      },
      keyframes: {
        "subtle-pulse": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: ".7" },
        },
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        // Add keyframes from globals.css if needed
        'gradient-text-flow': {
          'to': { backgroundPosition: '200% center' },
        },
        'wiggle': { // Example
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [typography, animate],
};

export default config;