// /tailwind.config.ts
import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";
import animate from "tailwindcss-animate";
import typography from "@tailwindcss/typography";

// Define custom color variables for easier management
const customColors = {
  brand: {
    orange: "#FF6B00",
    blue: "#00C2FF",
    green: "#00FF9D", // Main accent
    pink: "#FF007A",
    purple: "#9D00FF",
    lime: "#AEFF00", // Neon Lime
  },
  dark: {
    bg: "#12121a", // Slightly different dark background
    card: "#1a1a2e", // Darker card background
    border: "rgba(0, 255, 157, 0.2)", // Neon green border, subtle
  },
  light: {
    text: "#e0fbfc", // Light cyan text
    muted: "#a0a0c0", // Muted purple-ish gray
  },
  accent: {
    DEFAULT: "hsl(var(--accent))", // Keep shadcn compatibility
    foreground: "hsl(var(--accent-foreground))",
    neon: "var(--color-brand-green)", // Reference CSS variable
  },
  // Shadcn UI semantic colors (mapped or default)
  background: "hsl(var(--background))", // Typically dark-bg
  foreground: "hsl(var(--foreground))", // Typically light-text
  card: {
    DEFAULT: "hsl(var(--card))", // Typically dark-card
    foreground: "hsl(var(--card-foreground))", // Typically light-text
  },
  popover: {
    DEFAULT: "hsl(var(--popover))",
    foreground: "hsl(var(--popover-foreground))",
  },
  primary: {
    DEFAULT: "hsl(var(--primary))", // Map to brand green?
    foreground: "hsl(var(--primary-foreground))", // Dark text for green bg?
  },
  secondary: {
    DEFAULT: "hsl(var(--secondary))", // Map to brand blue?
    foreground: "hsl(var(--secondary-foreground))",
  },
  muted: {
    DEFAULT: "hsl(var(--muted))", // Map to light.muted
    foreground: "hsl(var(--muted-foreground))", // Light text for muted bg
  },
   destructive: {
    DEFAULT: "hsl(var(--destructive))", // Keep standard destructive
    foreground: "hsl(var(--destructive-foreground))",
  },
  border: "hsl(var(--border))", // Map to dark.border? or keep shadcn default
  input: "hsl(var(--input))",
  ring: "hsl(var(--ring))", // Typically related to primary or accent
};


const config: Config = {
  darkMode: ["class"], // Enable dark mode using class strategy
  content: [
    // Scan these files for Tailwind classes
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./hooks/**/*.{js,ts,jsx,tsx,mdx}",
    "./lib/**/*.{js,ts,jsx,tsx,mdx}",
    "./contexts/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: { // Optional: Configure default container padding
       center: true,
       padding: "1rem", // Default padding
       screens: {
          '2xl': '1400px',
       },
    },
    extend: {
       colors: customColors, // Use the defined custom colors object
      fontFamily: {
        sans: ["Inter", "var(--font-sans)", ...fontFamily.sans], // Use Inter and CSS variable fallback
        mono: ["Roboto Mono", "var(--font-mono)", ...fontFamily.mono], // Example: Roboto Mono
      },
      boxShadow: {
        // Define glow effects using CSS variables for potential theming
        "glow-sm": "0 0 6px rgba(var(--glow-color-rgb, 0, 255, 157), 0.5)",
        "glow-md": "0 0 12px rgba(var(--glow-color-rgb, 0, 255, 157), 0.6)",
        "glow-lg": "0 0 20px rgba(var(--glow-color-rgb, 0, 255, 157), 0.7)",
        "glow-brand": `0 0 12px ${customColors.brand.green}aa`, // Direct reference example
      },
      backgroundImage: {
        // Example gradients
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic": "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
        "page-gradient": `linear-gradient(145deg, ${customColors.dark.bg} 0%, ${customColors.dark.card} 100%)`,
      },
      keyframes: {
         // Shadcn UI accordion animations (keep if using Accordion)
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
         // Custom animations
         "subtle-pulse": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: ".7" },
        },
         "ticker-kf": { // Keyframe for the ticker animation
             "0%": { transform: "translateX(0)" },
             "100%": { transform: "translateX(-50%)" }, // Assumes content is duplicated
         },
      },
      animation: {
         // Shadcn UI animations
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
         // Custom animations
         "subtle-pulse": "subtle-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
         "ticker": "ticker-kf 40s linear infinite", // Apply ticker keyframe
      },
       borderRadius: { // Keep consistent with shadcn/ui variables
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [
      typography, // Plugin for Tailwind Typography styles
      animate, // Plugin for tailwindcss-animate
      require("tailwindcss-radix")(), // Optional: Radix UI utilities if needed
  ],
};

export default config;