import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";
import animate from "tailwindcss-animate";
import typography from "@tailwindcss/typography";

// Helper function to convert hex color to RGBA with opacity
const hexToRgba = (hex: string, alpha: number): string => {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        // Existing brand colors
        "brand-purple": "hsl(var(--brand-purple))",
        "brand-pink": "hsl(var(--brand-pink))",
        "brand-cyan": "hsl(var(--brand-cyan))",
        "brand-blue": "hsl(var(--brand-blue))",
        "brand-yellow": "hsl(var(--brand-yellow))",
        "brand-green": "hsl(var(--brand-green))",
        "brand-orange": "hsl(var(--brand-orange))",
        "neon-lime": "hsl(var(--neon-lime))",

        // Dark background and contrast colors (defined via HSL vars below)
        "dark-bg": "hsl(var(--background))",
        "dark-card": "hsl(var(--card))",
        "light-text": "hsl(var(--foreground))", // Use foreground as the primary light text
        "accent-text": "hsl(var(--accent-text))", // Use dedicated accent text variable

        // Shadcn UI theme colors (using HSL vars)
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      fontFamily: {
        sans: ["Inter", ...fontFamily.sans],
        mono: ["monospace", ...fontFamily.mono],
        orbitron: ["Orbitron", "sans-serif"], // Added Orbitron
      },
      boxShadow: {
        // Standard shadows
        sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
        DEFAULT: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
        md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
        lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
        xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',
        '2xl': '0 25px 50px -12px rgb(0 0 0 / 0.25)',
        inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)',
        none: 'none',
        // Custom Glow Shadows using HSL vars
        "glow-sm": "0 0 8px hsla(var(--brand-cyan), 0.5)", // Example using cyan
        "glow-md": "0 0 15px hsla(var(--brand-cyan), 0.6)",
        "glow-lg": "0 0 25px hsla(var(--brand-cyan), 0.7)",
        "pink-glow": "0 0 10px hsla(var(--brand-pink), 0.5), 0 0 20px hsla(var(--brand-pink), 0.3)",
        "purple-glow": "0 0 10px hsla(var(--brand-purple), 0.5), 0 0 20px hsla(var(--brand-purple), 0.3)",
        "yellow-glow": "0 0 15px hsla(var(--brand-yellow), 0.6), 0 0 8px hsla(var(--brand-yellow), 0.4)", // Added for premium page fix
      },
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic": "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
        "page-gradient":"linear-gradient(145deg, hsla(var(--background), 0.98), hsla(var(--card), 0.95))", // Use HSL vars
      },
      animation: {
        "subtle-pulse": "subtle-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "gradient-text-flow": "gradient-text-flow 3s linear infinite", // Added for text gradient effect
        "neon-border-glow": "neon-border-glow 2.5s infinite alternate", // Added from globals
        "glitch": "glitch 1s linear infinite", // Added from globals
        "glitch-border": "glitch-border 2s linear infinite", // Added from globals
        "wiggle": "wiggle 0.5s ease-in-out infinite", // Added from globals
        "drift": "drift 30s linear infinite", // Added from globals
      },
      keyframes: {
        "subtle-pulse": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: ".7" },
        },
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
         "gradient-text-flow": { // Added for text gradient effect
          to: { backgroundPosition: "200% center" },
         },
         "neon-border-glow": { // Added from globals
          "0%, 100%": {
            borderColor: "hsla(var(--brand-cyan), 0.7)",
            boxShadow: "0 0 5px hsla(var(--brand-cyan), 0.5), 0 0 10px hsla(var(--brand-cyan), 0.3)",
          },
          "50%": {
            borderColor: "hsla(var(--brand-pink), 0.7)",
            boxShadow: "0 0 8px hsla(var(--brand-pink), 0.5), 0 0 15px hsla(var(--brand-pink), 0.3), 0 0 5px hsla(var(--brand-purple), 0.2)",
          },
         },
         "glitch": { // Added from globals (simplified version for keyframes)
          "0%, 100%": { textShadow: "0.05em 0 0 hsla(var(--brand-pink), 0.75), -0.05em -0.025em 0 hsla(var(--brand-green), 0.75), -0.025em 0.05em 0 hsla(var(--brand-cyan), 0.75)" },
          "50%": { textShadow: "-0.05em -0.025em 0 hsla(var(--brand-pink), 0.75), 0.025em 0.025em 0 hsla(var(--brand-green), 0.75), -0.05em -0.05em 0 hsla(var(--brand-cyan), 0.75)" },
         },
         "glitch-border": { // Added from globals
            "0%, 100%": { borderColor: "hsla(var(--brand-cyan), 0.3)", boxShadow: "0 0 5px hsla(var(--brand-cyan), 0.2)" },
            "25%": { borderColor: "hsla(var(--brand-pink), 0.3)", boxShadow: "0 0 8px hsla(var(--brand-pink), 0.3)" },
            "50%": { borderColor: "hsla(var(--brand-yellow), 0.3)", boxShadow: "0 0 5px hsla(var(--brand-yellow), 0.2)" },
            "75%": { borderColor: "hsla(var(--brand-green), 0.3)", boxShadow: "0 0 8px hsla(var(--brand-green), 0.3)" },
         },
         "wiggle": { // Added from globals
            "0%, 100%": { transform: "rotate(-3deg)" },
            "50%": { transform: "rotate(3deg)" },
         },
          "drift": { // Added from globals
            "0%": { backgroundPosition: "0 0" },
            "100%": { backgroundPosition: "200px 200px" },
         },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      // Custom text shadow utility using CSS vars
      textShadow: {
        DEFAULT: '0 2px 4px rgba(0, 0, 0, 0.1)',
        md: '0 4px 6px rgba(0, 0, 0, 0.1)',
        lg: '0 10px 15px rgba(0, 0, 0, 0.1)',
        xl: '0 20px 25px rgba(0, 0, 0, 0.1)',
        'neon': '0 0 5px hsl(var(--brand-pink)), 0 0 10px hsl(var(--brand-pink)), 0 0 15px hsl(var(--brand-purple)), 0 0 20px hsl(var(--brand-purple))',
        'cyber': '0 0 4px hsl(var(--brand-cyan)), 0 0 10px hsl(var(--brand-pink))',
        'glow': '0 0 5px hsla(var(--brand-pink), 0.5), 0 0 20px hsla(var(--brand-pink), 0.8), 0 0 30px hsla(var(--brand-purple), 0.5)', // Corresponds to text-glow animation
      },
    },
  },
  plugins: [
    typography,
    animate,
    // Plugin to add textShadow utilities
    function ({ addUtilities, theme, e }: { addUtilities: any, theme: any, e: any }) {
      const newUtilities = Object.entries(theme('textShadow')).map(([key, value]) => ({
        [`.${e(`text-shadow-${key === 'DEFAULT' ? '' : key}`)}`]: { textShadow: value as string },
      }));
      addUtilities(newUtilities);
    }
  ],
};

export default config;