import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";
import animate from "tailwindcss-animate";
import typography from "@tailwindcss/typography";

// Helper function to convert hex color to RGBA with opacity
const hexToRgba = (hex: string, alpha: number): string => {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        // CyberVice Palette (GTA VI Inspired)
        "brand-purple": "#6A0DAD", // Deep vibrant purple
        "brand-pink": "#FF00FF",   // Magenta / Hot Pink
        "brand-orange": "#FFA500", // Sunset Orange
        "brand-yellow": "#FFD700", // Gold/Yellow Accent (can be GTA VI text color)
        "brand-cyan": "#00FFFF",   // Bright Cyan (Cyber accent)
        "brand-blue": "#007BFF",   // Electric Blue (can be used for links or secondary accents)
        "brand-green": "#39FF14",  // Neon Green (classic cyber/tech accent)
        "neon-lime": "#AEFF00",   // Retained, good for highlights

        // Dark theme core
        "dark-bg": "#0D0221",      // Very dark, slightly purplish/blueish black
        "dark-card": "#1A0A3D",   // Darker purple for cards
        "light-text": "#F0F0F0",   // Off-white for readability
        "accent-text": "#FF00FF",  // Magenta for accent text

        // Retained & ShadCN UI Base Colors (will be overridden by :root in globals.css for HSL)
        // These will primarily be used by Tailwind utility classes IF not using HSL vars for them.
        // For components using hsl(var(--...)), the globals.css definition will take precedence.
        background: "hsl(var(--background))", // #0D0221
        foreground: "hsl(var(--foreground))", // #F0F0F0
        card: {
          DEFAULT: "hsl(var(--card))", // #1A0A3D
          foreground: "hsl(var(--card-foreground))", // #F0F0F0
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: { // Main action color - Vibrant Pink
          DEFAULT: "hsl(var(--primary))", // #FF00FF
          foreground: "hsl(var(--primary-foreground))", // Black or very dark for contrast on pink
        },
        secondary: { // Secondary action / info - Bright Cyan
          DEFAULT: "hsl(var(--secondary))", // #00FFFF
          foreground: "hsl(var(--secondary-foreground))", // Black or very dark for contrast on cyan
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: { // Accent for highlights, borders - Sunset Orange
          DEFAULT: "hsl(var(--accent))", // #FFA500
          foreground: "hsl(var(--accent-foreground))", // Dark for contrast
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))", // Bright Red
          foreground: "hsl(var(--destructive-foreground))", // White
        },
        border: "hsl(var(--border))", // #6A0DAD or slightly lighter
        input: "hsl(var(--input))",   // Dark bg, accent border
        ring: "hsl(var(--ring))",     // Accent color for focus rings (e.g., brand-pink)
        
        chart: { // Keep chart colors, can be adjusted if needed
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: { // Adjust sidebar if it's a distinct element
          DEFAULT: "hsl(var(--sidebar-background))", // e.g., slightly different dark shade
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      fontFamily: {
        sans: ["Inter", ...fontFamily.sans],
        mono: ["monospace", ...fontFamily.mono],
        orbitron: ["Orbitron", "sans-serif"], // Added Orbitron for easier use
      },
      boxShadow: {
        // Updated glow colors to match CyberVice theme
        "glow-sm": "0 0 8px rgba(var(--glow-color-rgb, 255, 0, 255), 0.6)",  // Magenta glow
        "glow-md": "0 0 15px rgba(var(--glow-color-rgb, 255, 0, 255), 0.7)", // Magenta glow
        "glow-lg": "0 0 25px rgba(var(--glow-color-rgb, 255, 0, 255), 0.8)", // Magenta glow
        "cyber-shadow": "0 0 10px var(--brand-cyan), 0 0 20px var(--brand-pink), 0 0 30px var(--brand-purple)", // Complex neon shadow
      },
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic": "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
        // CyberVice gradient
        "cyber-gradient": "linear-gradient(145deg, var(--brand-purple), var(--brand-pink), var(--brand-orange))",
        "page-gradient":"linear-gradient(145deg, rgba(var(--dark-bg-rgb), 0.98), rgba(var(--dark-card-rgb), 0.95))",
      },
      animation: {
        "subtle-pulse": "subtle-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "neon-flicker": "neon-flicker 1.5s infinite alternate", // Neon flicker animation
      },
      keyframes: {
        "subtle-pulse": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: ".7" },
        },
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "neon-flicker": { // Keyframes for neon flicker
          "0%, 100%": { opacity: "1", textShadow: "0 0 5px var(--brand-pink), 0 0 10px var(--brand-pink), 0 0 20px var(--brand-purple)" },
          "50%": { opacity: "0.7", textShadow: "0 0 10px var(--brand-pink), 0 0 20px var(--brand-purple), 0 0 30px var(--brand-orange)" },
        },
      },
      borderRadius: {
        lg: "var(--radius)", // 0.75rem by default in globals.css for :root
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [typography, animate],
};

export default config;